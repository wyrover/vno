#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Account:
  """
  Attributes:
   - id
   - username
   - password
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'username', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, id=None, username=None, password=None, comment=None,):
    self.id = id
    self.username = username
    self.password = password
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.username = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Account')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.username is not None:
      oprot.writeFieldBegin('username', TType.STRING, 2)
      oprot.writeString(self.username)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.username)
    value = (value * 31) ^ hash(self.password)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdjLayer:
  """
  Attributes:
   - id
   - work_surf_id
   - coal_id
   - name
   - num
   - h
   - hp
   - in_cz
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_surf_id', None, None, ), # 2
    (3, TType.I32, 'coal_id', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.I32, 'num', None, None, ), # 5
    (6, TType.DOUBLE, 'h', None, None, ), # 6
    (7, TType.DOUBLE, 'hp', None, None, ), # 7
    (8, TType.I32, 'in_cz', None, None, ), # 8
    (9, TType.STRING, 'comment', None, None, ), # 9
  )

  def __init__(self, id=None, work_surf_id=None, coal_id=None, name=None, num=None, h=None, hp=None, in_cz=None, comment=None,):
    self.id = id
    self.work_surf_id = work_surf_id
    self.coal_id = coal_id
    self.name = name
    self.num = num
    self.h = h
    self.hp = hp
    self.in_cz = in_cz
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_surf_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.coal_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.hp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.in_cz = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdjLayer')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_surf_id is not None:
      oprot.writeFieldBegin('work_surf_id', TType.I32, 2)
      oprot.writeI32(self.work_surf_id)
      oprot.writeFieldEnd()
    if self.coal_id is not None:
      oprot.writeFieldBegin('coal_id', TType.I32, 3)
      oprot.writeI32(self.coal_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 5)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 6)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.hp is not None:
      oprot.writeFieldBegin('hp', TType.DOUBLE, 7)
      oprot.writeDouble(self.hp)
      oprot.writeFieldEnd()
    if self.in_cz is not None:
      oprot.writeFieldBegin('in_cz', TType.I32, 8)
      oprot.writeI32(self.in_cz)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 9)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_surf_id)
    value = (value * 31) ^ hash(self.coal_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.hp)
    value = (value * 31) ^ hash(self.in_cz)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Coal:
  """
  Attributes:
   - id
   - mine_id
   - name
   - minable
   - thick
   - hw
   - qa
   - qr
   - fore_qr
   - fore_qa
   - rank
   - quality
   - pressure
   - gas_content
   - f_value
   - res_abundance
   - complexity
   - mine_index
   - var_coeff
   - stability
   - dip_angle
   - czh
   - czk
   - czw
   - hw_sum
   - rock
   - hhh
   - layer_gap
   - influence_factor
   - res_a1
   - gas_x1
   - res_a2
   - gas_x2
   - pump_wc
   - pump_k
   - pump_k2
   - pump_k3
   - pump_k4
   - pump_k1
   - pore_datas
   - rho
   - vr
   - gas_w0
   - gas_wc2
   - gas_wc3
   - gas_eta
   - q0
   - eval_method
   - q0_alpha
   - qt_alpha
   - t_alpha
   - q_lambda
   - r_lambda
   - p0_lambda
   - p1_lambda
   - t_lambda
   - a_lambda
   - p1_k
   - p2_k
   - gas_q
   - core_height
   - core_area
   - gas_viscosity
   - decay_alpha
   - permeability_lambda
   - permeability_k
   - eval_difficult
   - comment
   - relative_layer_gap
   - is_protectable
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'mine_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'minable', None, None, ), # 4
    (5, TType.DOUBLE, 'thick', None, None, ), # 5
    (6, TType.DOUBLE, 'hw', None, None, ), # 6
    (7, TType.DOUBLE, 'qa', None, None, ), # 7
    (8, TType.DOUBLE, 'qr', None, None, ), # 8
    (9, TType.DOUBLE, 'fore_qr', None, None, ), # 9
    (10, TType.DOUBLE, 'fore_qa', None, None, ), # 10
    (11, TType.I32, 'rank', None, None, ), # 11
    (12, TType.I32, 'quality', None, None, ), # 12
    (13, TType.DOUBLE, 'pressure', None, None, ), # 13
    (14, TType.DOUBLE, 'gas_content', None, None, ), # 14
    (15, TType.DOUBLE, 'f_value', None, None, ), # 15
    (16, TType.I32, 'res_abundance', None, None, ), # 16
    (17, TType.I32, 'complexity', None, None, ), # 17
    (18, TType.DOUBLE, 'mine_index', None, None, ), # 18
    (19, TType.DOUBLE, 'var_coeff', None, None, ), # 19
    (20, TType.I32, 'stability', None, None, ), # 20
    (21, TType.DOUBLE, 'dip_angle', None, None, ), # 21
    (22, TType.DOUBLE, 'czh', None, None, ), # 22
    (23, TType.DOUBLE, 'czk', None, None, ), # 23
    (24, TType.DOUBLE, 'czw', None, None, ), # 24
    (25, TType.DOUBLE, 'hw_sum', None, None, ), # 25
    (26, TType.I32, 'rock', None, None, ), # 26
    (27, TType.DOUBLE, 'hhh', None, None, ), # 27
    (28, TType.DOUBLE, 'layer_gap', None, None, ), # 28
    (29, TType.DOUBLE, 'influence_factor', None, None, ), # 29
    (30, TType.DOUBLE, 'res_a1', None, None, ), # 30
    (31, TType.DOUBLE, 'gas_x1', None, None, ), # 31
    (32, TType.DOUBLE, 'res_a2', None, None, ), # 32
    (33, TType.DOUBLE, 'gas_x2', None, None, ), # 33
    (34, TType.DOUBLE, 'pump_wc', None, None, ), # 34
    (35, TType.DOUBLE, 'pump_k', None, None, ), # 35
    (36, TType.DOUBLE, 'pump_k2', None, None, ), # 36
    (37, TType.DOUBLE, 'pump_k3', None, None, ), # 37
    (38, TType.DOUBLE, 'pump_k4', None, None, ), # 38
    (39, TType.DOUBLE, 'pump_k1', None, None, ), # 39
    (40, TType.STRING, 'pore_datas', None, None, ), # 40
    (41, TType.DOUBLE, 'rho', None, None, ), # 41
    (42, TType.DOUBLE, 'vr', None, None, ), # 42
    (43, TType.DOUBLE, 'gas_w0', None, None, ), # 43
    (44, TType.DOUBLE, 'gas_wc2', None, None, ), # 44
    (45, TType.DOUBLE, 'gas_wc3', None, None, ), # 45
    (46, TType.DOUBLE, 'gas_eta', None, None, ), # 46
    (47, TType.DOUBLE, 'q0', None, None, ), # 47
    (48, TType.I32, 'eval_method', None, None, ), # 48
    (49, TType.DOUBLE, 'q0_alpha', None, None, ), # 49
    (50, TType.DOUBLE, 'qt_alpha', None, None, ), # 50
    (51, TType.DOUBLE, 't_alpha', None, None, ), # 51
    (52, TType.DOUBLE, 'q_lambda', None, None, ), # 52
    (53, TType.DOUBLE, 'r_lambda', None, None, ), # 53
    (54, TType.DOUBLE, 'p0_lambda', None, None, ), # 54
    (55, TType.DOUBLE, 'p1_lambda', None, None, ), # 55
    (56, TType.DOUBLE, 't_lambda', None, None, ), # 56
    (57, TType.DOUBLE, 'a_lambda', None, None, ), # 57
    (58, TType.DOUBLE, 'p1_k', None, None, ), # 58
    (59, TType.DOUBLE, 'p2_k', None, None, ), # 59
    (60, TType.DOUBLE, 'gas_q', None, None, ), # 60
    (61, TType.DOUBLE, 'core_height', None, None, ), # 61
    (62, TType.DOUBLE, 'core_area', None, None, ), # 62
    (63, TType.DOUBLE, 'gas_viscosity', None, None, ), # 63
    (64, TType.DOUBLE, 'decay_alpha', None, None, ), # 64
    (65, TType.DOUBLE, 'permeability_lambda', None, None, ), # 65
    (66, TType.DOUBLE, 'permeability_k', None, None, ), # 66
    (67, TType.I32, 'eval_difficult', None, None, ), # 67
    (68, TType.STRING, 'comment', None, None, ), # 68
    (69, TType.DOUBLE, 'relative_layer_gap', None, None, ), # 69
    (70, TType.I32, 'is_protectable', None, None, ), # 70
  )

  def __init__(self, id=None, mine_id=None, name=None, minable=None, thick=None, hw=None, qa=None, qr=None, fore_qr=None, fore_qa=None, rank=None, quality=None, pressure=None, gas_content=None, f_value=None, res_abundance=None, complexity=None, mine_index=None, var_coeff=None, stability=None, dip_angle=None, czh=None, czk=None, czw=None, hw_sum=None, rock=None, hhh=None, layer_gap=None, influence_factor=None, res_a1=None, gas_x1=None, res_a2=None, gas_x2=None, pump_wc=None, pump_k=None, pump_k2=None, pump_k3=None, pump_k4=None, pump_k1=None, pore_datas=None, rho=None, vr=None, gas_w0=None, gas_wc2=None, gas_wc3=None, gas_eta=None, q0=None, eval_method=None, q0_alpha=None, qt_alpha=None, t_alpha=None, q_lambda=None, r_lambda=None, p0_lambda=None, p1_lambda=None, t_lambda=None, a_lambda=None, p1_k=None, p2_k=None, gas_q=None, core_height=None, core_area=None, gas_viscosity=None, decay_alpha=None, permeability_lambda=None, permeability_k=None, eval_difficult=None, comment=None, relative_layer_gap=None, is_protectable=None,):
    self.id = id
    self.mine_id = mine_id
    self.name = name
    self.minable = minable
    self.thick = thick
    self.hw = hw
    self.qa = qa
    self.qr = qr
    self.fore_qr = fore_qr
    self.fore_qa = fore_qa
    self.rank = rank
    self.quality = quality
    self.pressure = pressure
    self.gas_content = gas_content
    self.f_value = f_value
    self.res_abundance = res_abundance
    self.complexity = complexity
    self.mine_index = mine_index
    self.var_coeff = var_coeff
    self.stability = stability
    self.dip_angle = dip_angle
    self.czh = czh
    self.czk = czk
    self.czw = czw
    self.hw_sum = hw_sum
    self.rock = rock
    self.hhh = hhh
    self.layer_gap = layer_gap
    self.influence_factor = influence_factor
    self.res_a1 = res_a1
    self.gas_x1 = gas_x1
    self.res_a2 = res_a2
    self.gas_x2 = gas_x2
    self.pump_wc = pump_wc
    self.pump_k = pump_k
    self.pump_k2 = pump_k2
    self.pump_k3 = pump_k3
    self.pump_k4 = pump_k4
    self.pump_k1 = pump_k1
    self.pore_datas = pore_datas
    self.rho = rho
    self.vr = vr
    self.gas_w0 = gas_w0
    self.gas_wc2 = gas_wc2
    self.gas_wc3 = gas_wc3
    self.gas_eta = gas_eta
    self.q0 = q0
    self.eval_method = eval_method
    self.q0_alpha = q0_alpha
    self.qt_alpha = qt_alpha
    self.t_alpha = t_alpha
    self.q_lambda = q_lambda
    self.r_lambda = r_lambda
    self.p0_lambda = p0_lambda
    self.p1_lambda = p1_lambda
    self.t_lambda = t_lambda
    self.a_lambda = a_lambda
    self.p1_k = p1_k
    self.p2_k = p2_k
    self.gas_q = gas_q
    self.core_height = core_height
    self.core_area = core_area
    self.gas_viscosity = gas_viscosity
    self.decay_alpha = decay_alpha
    self.permeability_lambda = permeability_lambda
    self.permeability_k = permeability_k
    self.eval_difficult = eval_difficult
    self.comment = comment
    self.relative_layer_gap = relative_layer_gap
    self.is_protectable = is_protectable

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mine_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.minable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.thick = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.hw = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.fore_qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.fore_qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.rank = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.quality = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.pressure = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.gas_content = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.f_value = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.res_abundance = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.complexity = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.mine_index = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.var_coeff = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.stability = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.dip_angle = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.czh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.czk = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.czw = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.hw_sum = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.rock = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.hhh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.layer_gap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.influence_factor = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.res_a1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.gas_x1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.DOUBLE:
          self.res_a2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.DOUBLE:
          self.gas_x2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.DOUBLE:
          self.pump_wc = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.DOUBLE:
          self.pump_k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.DOUBLE:
          self.pump_k2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.DOUBLE:
          self.pump_k3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.DOUBLE:
          self.pump_k4 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.DOUBLE:
          self.pump_k1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.pore_datas = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.DOUBLE:
          self.rho = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.DOUBLE:
          self.vr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.DOUBLE:
          self.gas_w0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.DOUBLE:
          self.gas_wc2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.DOUBLE:
          self.gas_wc3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.DOUBLE:
          self.gas_eta = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.DOUBLE:
          self.q0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.eval_method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.DOUBLE:
          self.q0_alpha = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.DOUBLE:
          self.qt_alpha = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.DOUBLE:
          self.t_alpha = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.DOUBLE:
          self.q_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.DOUBLE:
          self.r_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.DOUBLE:
          self.p0_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.DOUBLE:
          self.p1_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.DOUBLE:
          self.t_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.DOUBLE:
          self.a_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.DOUBLE:
          self.p1_k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.DOUBLE:
          self.p2_k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.DOUBLE:
          self.gas_q = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 61:
        if ftype == TType.DOUBLE:
          self.core_height = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 62:
        if ftype == TType.DOUBLE:
          self.core_area = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.DOUBLE:
          self.gas_viscosity = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 64:
        if ftype == TType.DOUBLE:
          self.decay_alpha = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.DOUBLE:
          self.permeability_lambda = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 66:
        if ftype == TType.DOUBLE:
          self.permeability_k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 67:
        if ftype == TType.I32:
          self.eval_difficult = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 68:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 69:
        if ftype == TType.DOUBLE:
          self.relative_layer_gap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.I32:
          self.is_protectable = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Coal')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.mine_id is not None:
      oprot.writeFieldBegin('mine_id', TType.I32, 2)
      oprot.writeI32(self.mine_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.minable is not None:
      oprot.writeFieldBegin('minable', TType.I32, 4)
      oprot.writeI32(self.minable)
      oprot.writeFieldEnd()
    if self.thick is not None:
      oprot.writeFieldBegin('thick', TType.DOUBLE, 5)
      oprot.writeDouble(self.thick)
      oprot.writeFieldEnd()
    if self.hw is not None:
      oprot.writeFieldBegin('hw', TType.DOUBLE, 6)
      oprot.writeDouble(self.hw)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 7)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    if self.qr is not None:
      oprot.writeFieldBegin('qr', TType.DOUBLE, 8)
      oprot.writeDouble(self.qr)
      oprot.writeFieldEnd()
    if self.fore_qr is not None:
      oprot.writeFieldBegin('fore_qr', TType.DOUBLE, 9)
      oprot.writeDouble(self.fore_qr)
      oprot.writeFieldEnd()
    if self.fore_qa is not None:
      oprot.writeFieldBegin('fore_qa', TType.DOUBLE, 10)
      oprot.writeDouble(self.fore_qa)
      oprot.writeFieldEnd()
    if self.rank is not None:
      oprot.writeFieldBegin('rank', TType.I32, 11)
      oprot.writeI32(self.rank)
      oprot.writeFieldEnd()
    if self.quality is not None:
      oprot.writeFieldBegin('quality', TType.I32, 12)
      oprot.writeI32(self.quality)
      oprot.writeFieldEnd()
    if self.pressure is not None:
      oprot.writeFieldBegin('pressure', TType.DOUBLE, 13)
      oprot.writeDouble(self.pressure)
      oprot.writeFieldEnd()
    if self.gas_content is not None:
      oprot.writeFieldBegin('gas_content', TType.DOUBLE, 14)
      oprot.writeDouble(self.gas_content)
      oprot.writeFieldEnd()
    if self.f_value is not None:
      oprot.writeFieldBegin('f_value', TType.DOUBLE, 15)
      oprot.writeDouble(self.f_value)
      oprot.writeFieldEnd()
    if self.res_abundance is not None:
      oprot.writeFieldBegin('res_abundance', TType.I32, 16)
      oprot.writeI32(self.res_abundance)
      oprot.writeFieldEnd()
    if self.complexity is not None:
      oprot.writeFieldBegin('complexity', TType.I32, 17)
      oprot.writeI32(self.complexity)
      oprot.writeFieldEnd()
    if self.mine_index is not None:
      oprot.writeFieldBegin('mine_index', TType.DOUBLE, 18)
      oprot.writeDouble(self.mine_index)
      oprot.writeFieldEnd()
    if self.var_coeff is not None:
      oprot.writeFieldBegin('var_coeff', TType.DOUBLE, 19)
      oprot.writeDouble(self.var_coeff)
      oprot.writeFieldEnd()
    if self.stability is not None:
      oprot.writeFieldBegin('stability', TType.I32, 20)
      oprot.writeI32(self.stability)
      oprot.writeFieldEnd()
    if self.dip_angle is not None:
      oprot.writeFieldBegin('dip_angle', TType.DOUBLE, 21)
      oprot.writeDouble(self.dip_angle)
      oprot.writeFieldEnd()
    if self.czh is not None:
      oprot.writeFieldBegin('czh', TType.DOUBLE, 22)
      oprot.writeDouble(self.czh)
      oprot.writeFieldEnd()
    if self.czk is not None:
      oprot.writeFieldBegin('czk', TType.DOUBLE, 23)
      oprot.writeDouble(self.czk)
      oprot.writeFieldEnd()
    if self.czw is not None:
      oprot.writeFieldBegin('czw', TType.DOUBLE, 24)
      oprot.writeDouble(self.czw)
      oprot.writeFieldEnd()
    if self.hw_sum is not None:
      oprot.writeFieldBegin('hw_sum', TType.DOUBLE, 25)
      oprot.writeDouble(self.hw_sum)
      oprot.writeFieldEnd()
    if self.rock is not None:
      oprot.writeFieldBegin('rock', TType.I32, 26)
      oprot.writeI32(self.rock)
      oprot.writeFieldEnd()
    if self.hhh is not None:
      oprot.writeFieldBegin('hhh', TType.DOUBLE, 27)
      oprot.writeDouble(self.hhh)
      oprot.writeFieldEnd()
    if self.layer_gap is not None:
      oprot.writeFieldBegin('layer_gap', TType.DOUBLE, 28)
      oprot.writeDouble(self.layer_gap)
      oprot.writeFieldEnd()
    if self.influence_factor is not None:
      oprot.writeFieldBegin('influence_factor', TType.DOUBLE, 29)
      oprot.writeDouble(self.influence_factor)
      oprot.writeFieldEnd()
    if self.res_a1 is not None:
      oprot.writeFieldBegin('res_a1', TType.DOUBLE, 30)
      oprot.writeDouble(self.res_a1)
      oprot.writeFieldEnd()
    if self.gas_x1 is not None:
      oprot.writeFieldBegin('gas_x1', TType.DOUBLE, 31)
      oprot.writeDouble(self.gas_x1)
      oprot.writeFieldEnd()
    if self.res_a2 is not None:
      oprot.writeFieldBegin('res_a2', TType.DOUBLE, 32)
      oprot.writeDouble(self.res_a2)
      oprot.writeFieldEnd()
    if self.gas_x2 is not None:
      oprot.writeFieldBegin('gas_x2', TType.DOUBLE, 33)
      oprot.writeDouble(self.gas_x2)
      oprot.writeFieldEnd()
    if self.pump_wc is not None:
      oprot.writeFieldBegin('pump_wc', TType.DOUBLE, 34)
      oprot.writeDouble(self.pump_wc)
      oprot.writeFieldEnd()
    if self.pump_k is not None:
      oprot.writeFieldBegin('pump_k', TType.DOUBLE, 35)
      oprot.writeDouble(self.pump_k)
      oprot.writeFieldEnd()
    if self.pump_k2 is not None:
      oprot.writeFieldBegin('pump_k2', TType.DOUBLE, 36)
      oprot.writeDouble(self.pump_k2)
      oprot.writeFieldEnd()
    if self.pump_k3 is not None:
      oprot.writeFieldBegin('pump_k3', TType.DOUBLE, 37)
      oprot.writeDouble(self.pump_k3)
      oprot.writeFieldEnd()
    if self.pump_k4 is not None:
      oprot.writeFieldBegin('pump_k4', TType.DOUBLE, 38)
      oprot.writeDouble(self.pump_k4)
      oprot.writeFieldEnd()
    if self.pump_k1 is not None:
      oprot.writeFieldBegin('pump_k1', TType.DOUBLE, 39)
      oprot.writeDouble(self.pump_k1)
      oprot.writeFieldEnd()
    if self.pore_datas is not None:
      oprot.writeFieldBegin('pore_datas', TType.STRING, 40)
      oprot.writeString(self.pore_datas)
      oprot.writeFieldEnd()
    if self.rho is not None:
      oprot.writeFieldBegin('rho', TType.DOUBLE, 41)
      oprot.writeDouble(self.rho)
      oprot.writeFieldEnd()
    if self.vr is not None:
      oprot.writeFieldBegin('vr', TType.DOUBLE, 42)
      oprot.writeDouble(self.vr)
      oprot.writeFieldEnd()
    if self.gas_w0 is not None:
      oprot.writeFieldBegin('gas_w0', TType.DOUBLE, 43)
      oprot.writeDouble(self.gas_w0)
      oprot.writeFieldEnd()
    if self.gas_wc2 is not None:
      oprot.writeFieldBegin('gas_wc2', TType.DOUBLE, 44)
      oprot.writeDouble(self.gas_wc2)
      oprot.writeFieldEnd()
    if self.gas_wc3 is not None:
      oprot.writeFieldBegin('gas_wc3', TType.DOUBLE, 45)
      oprot.writeDouble(self.gas_wc3)
      oprot.writeFieldEnd()
    if self.gas_eta is not None:
      oprot.writeFieldBegin('gas_eta', TType.DOUBLE, 46)
      oprot.writeDouble(self.gas_eta)
      oprot.writeFieldEnd()
    if self.q0 is not None:
      oprot.writeFieldBegin('q0', TType.DOUBLE, 47)
      oprot.writeDouble(self.q0)
      oprot.writeFieldEnd()
    if self.eval_method is not None:
      oprot.writeFieldBegin('eval_method', TType.I32, 48)
      oprot.writeI32(self.eval_method)
      oprot.writeFieldEnd()
    if self.q0_alpha is not None:
      oprot.writeFieldBegin('q0_alpha', TType.DOUBLE, 49)
      oprot.writeDouble(self.q0_alpha)
      oprot.writeFieldEnd()
    if self.qt_alpha is not None:
      oprot.writeFieldBegin('qt_alpha', TType.DOUBLE, 50)
      oprot.writeDouble(self.qt_alpha)
      oprot.writeFieldEnd()
    if self.t_alpha is not None:
      oprot.writeFieldBegin('t_alpha', TType.DOUBLE, 51)
      oprot.writeDouble(self.t_alpha)
      oprot.writeFieldEnd()
    if self.q_lambda is not None:
      oprot.writeFieldBegin('q_lambda', TType.DOUBLE, 52)
      oprot.writeDouble(self.q_lambda)
      oprot.writeFieldEnd()
    if self.r_lambda is not None:
      oprot.writeFieldBegin('r_lambda', TType.DOUBLE, 53)
      oprot.writeDouble(self.r_lambda)
      oprot.writeFieldEnd()
    if self.p0_lambda is not None:
      oprot.writeFieldBegin('p0_lambda', TType.DOUBLE, 54)
      oprot.writeDouble(self.p0_lambda)
      oprot.writeFieldEnd()
    if self.p1_lambda is not None:
      oprot.writeFieldBegin('p1_lambda', TType.DOUBLE, 55)
      oprot.writeDouble(self.p1_lambda)
      oprot.writeFieldEnd()
    if self.t_lambda is not None:
      oprot.writeFieldBegin('t_lambda', TType.DOUBLE, 56)
      oprot.writeDouble(self.t_lambda)
      oprot.writeFieldEnd()
    if self.a_lambda is not None:
      oprot.writeFieldBegin('a_lambda', TType.DOUBLE, 57)
      oprot.writeDouble(self.a_lambda)
      oprot.writeFieldEnd()
    if self.p1_k is not None:
      oprot.writeFieldBegin('p1_k', TType.DOUBLE, 58)
      oprot.writeDouble(self.p1_k)
      oprot.writeFieldEnd()
    if self.p2_k is not None:
      oprot.writeFieldBegin('p2_k', TType.DOUBLE, 59)
      oprot.writeDouble(self.p2_k)
      oprot.writeFieldEnd()
    if self.gas_q is not None:
      oprot.writeFieldBegin('gas_q', TType.DOUBLE, 60)
      oprot.writeDouble(self.gas_q)
      oprot.writeFieldEnd()
    if self.core_height is not None:
      oprot.writeFieldBegin('core_height', TType.DOUBLE, 61)
      oprot.writeDouble(self.core_height)
      oprot.writeFieldEnd()
    if self.core_area is not None:
      oprot.writeFieldBegin('core_area', TType.DOUBLE, 62)
      oprot.writeDouble(self.core_area)
      oprot.writeFieldEnd()
    if self.gas_viscosity is not None:
      oprot.writeFieldBegin('gas_viscosity', TType.DOUBLE, 63)
      oprot.writeDouble(self.gas_viscosity)
      oprot.writeFieldEnd()
    if self.decay_alpha is not None:
      oprot.writeFieldBegin('decay_alpha', TType.DOUBLE, 64)
      oprot.writeDouble(self.decay_alpha)
      oprot.writeFieldEnd()
    if self.permeability_lambda is not None:
      oprot.writeFieldBegin('permeability_lambda', TType.DOUBLE, 65)
      oprot.writeDouble(self.permeability_lambda)
      oprot.writeFieldEnd()
    if self.permeability_k is not None:
      oprot.writeFieldBegin('permeability_k', TType.DOUBLE, 66)
      oprot.writeDouble(self.permeability_k)
      oprot.writeFieldEnd()
    if self.eval_difficult is not None:
      oprot.writeFieldBegin('eval_difficult', TType.I32, 67)
      oprot.writeI32(self.eval_difficult)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 68)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.relative_layer_gap is not None:
      oprot.writeFieldBegin('relative_layer_gap', TType.DOUBLE, 69)
      oprot.writeDouble(self.relative_layer_gap)
      oprot.writeFieldEnd()
    if self.is_protectable is not None:
      oprot.writeFieldBegin('is_protectable', TType.I32, 70)
      oprot.writeI32(self.is_protectable)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.mine_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.minable)
    value = (value * 31) ^ hash(self.thick)
    value = (value * 31) ^ hash(self.hw)
    value = (value * 31) ^ hash(self.qa)
    value = (value * 31) ^ hash(self.qr)
    value = (value * 31) ^ hash(self.fore_qr)
    value = (value * 31) ^ hash(self.fore_qa)
    value = (value * 31) ^ hash(self.rank)
    value = (value * 31) ^ hash(self.quality)
    value = (value * 31) ^ hash(self.pressure)
    value = (value * 31) ^ hash(self.gas_content)
    value = (value * 31) ^ hash(self.f_value)
    value = (value * 31) ^ hash(self.res_abundance)
    value = (value * 31) ^ hash(self.complexity)
    value = (value * 31) ^ hash(self.mine_index)
    value = (value * 31) ^ hash(self.var_coeff)
    value = (value * 31) ^ hash(self.stability)
    value = (value * 31) ^ hash(self.dip_angle)
    value = (value * 31) ^ hash(self.czh)
    value = (value * 31) ^ hash(self.czk)
    value = (value * 31) ^ hash(self.czw)
    value = (value * 31) ^ hash(self.hw_sum)
    value = (value * 31) ^ hash(self.rock)
    value = (value * 31) ^ hash(self.hhh)
    value = (value * 31) ^ hash(self.layer_gap)
    value = (value * 31) ^ hash(self.influence_factor)
    value = (value * 31) ^ hash(self.res_a1)
    value = (value * 31) ^ hash(self.gas_x1)
    value = (value * 31) ^ hash(self.res_a2)
    value = (value * 31) ^ hash(self.gas_x2)
    value = (value * 31) ^ hash(self.pump_wc)
    value = (value * 31) ^ hash(self.pump_k)
    value = (value * 31) ^ hash(self.pump_k2)
    value = (value * 31) ^ hash(self.pump_k3)
    value = (value * 31) ^ hash(self.pump_k4)
    value = (value * 31) ^ hash(self.pump_k1)
    value = (value * 31) ^ hash(self.pore_datas)
    value = (value * 31) ^ hash(self.rho)
    value = (value * 31) ^ hash(self.vr)
    value = (value * 31) ^ hash(self.gas_w0)
    value = (value * 31) ^ hash(self.gas_wc2)
    value = (value * 31) ^ hash(self.gas_wc3)
    value = (value * 31) ^ hash(self.gas_eta)
    value = (value * 31) ^ hash(self.q0)
    value = (value * 31) ^ hash(self.eval_method)
    value = (value * 31) ^ hash(self.q0_alpha)
    value = (value * 31) ^ hash(self.qt_alpha)
    value = (value * 31) ^ hash(self.t_alpha)
    value = (value * 31) ^ hash(self.q_lambda)
    value = (value * 31) ^ hash(self.r_lambda)
    value = (value * 31) ^ hash(self.p0_lambda)
    value = (value * 31) ^ hash(self.p1_lambda)
    value = (value * 31) ^ hash(self.t_lambda)
    value = (value * 31) ^ hash(self.a_lambda)
    value = (value * 31) ^ hash(self.p1_k)
    value = (value * 31) ^ hash(self.p2_k)
    value = (value * 31) ^ hash(self.gas_q)
    value = (value * 31) ^ hash(self.core_height)
    value = (value * 31) ^ hash(self.core_area)
    value = (value * 31) ^ hash(self.gas_viscosity)
    value = (value * 31) ^ hash(self.decay_alpha)
    value = (value * 31) ^ hash(self.permeability_lambda)
    value = (value * 31) ^ hash(self.permeability_k)
    value = (value * 31) ^ hash(self.eval_difficult)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.relative_layer_gap)
    value = (value * 31) ^ hash(self.is_protectable)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Complexity:
  """
  Attributes:
   - id
   - name
   - details
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'details', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, id=None, name=None, details=None, comment=None,):
    self.id = id
    self.name = name
    self.details = details
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.details = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Complexity')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 3)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignDrillingSurfTechnology:
  """
  Attributes:
   - id
   - design_technology_id
   - name
   - comment
   - v_offset
   - h_offset
   - dp
   - gp
   - leading_dist
   - gbp
   - l_stripe
   - ls
   - ws
   - hs
   - gs
   - wd
   - hd
   - l1
   - l2
   - w
   - h
   - top_side
   - bottom_side
   - left_side
   - right_side
   - lm
   - close_length
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_technology_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'v_offset', None, None, ), # 5
    (6, TType.DOUBLE, 'h_offset', None, None, ), # 6
    (7, TType.DOUBLE, 'dp', None, None, ), # 7
    (8, TType.DOUBLE, 'gp', None, None, ), # 8
    (9, TType.DOUBLE, 'leading_dist', None, None, ), # 9
    (10, TType.DOUBLE, 'gbp', None, None, ), # 10
    (11, TType.DOUBLE, 'l_stripe', None, None, ), # 11
    (12, TType.DOUBLE, 'ls', None, None, ), # 12
    (13, TType.DOUBLE, 'ws', None, None, ), # 13
    (14, TType.DOUBLE, 'hs', None, None, ), # 14
    (15, TType.DOUBLE, 'gs', None, None, ), # 15
    (16, TType.DOUBLE, 'wd', None, None, ), # 16
    (17, TType.DOUBLE, 'hd', None, None, ), # 17
    (18, TType.DOUBLE, 'l1', None, None, ), # 18
    (19, TType.DOUBLE, 'l2', None, None, ), # 19
    (20, TType.DOUBLE, 'w', None, None, ), # 20
    (21, TType.DOUBLE, 'h', None, None, ), # 21
    (22, TType.DOUBLE, 'top_side', None, None, ), # 22
    (23, TType.DOUBLE, 'bottom_side', None, None, ), # 23
    (24, TType.DOUBLE, 'left_side', None, None, ), # 24
    (25, TType.DOUBLE, 'right_side', None, None, ), # 25
    (26, TType.DOUBLE, 'lm', None, None, ), # 26
    (27, TType.DOUBLE, 'close_length', None, None, ), # 27
  )

  def __init__(self, id=None, design_technology_id=None, name=None, comment=None, v_offset=None, h_offset=None, dp=None, gp=None, leading_dist=None, gbp=None, l_stripe=None, ls=None, ws=None, hs=None, gs=None, wd=None, hd=None, l1=None, l2=None, w=None, h=None, top_side=None, bottom_side=None, left_side=None, right_side=None, lm=None, close_length=None,):
    self.id = id
    self.design_technology_id = design_technology_id
    self.name = name
    self.comment = comment
    self.v_offset = v_offset
    self.h_offset = h_offset
    self.dp = dp
    self.gp = gp
    self.leading_dist = leading_dist
    self.gbp = gbp
    self.l_stripe = l_stripe
    self.ls = ls
    self.ws = ws
    self.hs = hs
    self.gs = gs
    self.wd = wd
    self.hd = hd
    self.l1 = l1
    self.l2 = l2
    self.w = w
    self.h = h
    self.top_side = top_side
    self.bottom_side = bottom_side
    self.left_side = left_side
    self.right_side = right_side
    self.lm = lm
    self.close_length = close_length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_technology_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.v_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.h_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.dp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.gp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.leading_dist = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.gbp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.l_stripe = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.ls = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.ws = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.hs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.gs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.wd = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.hd = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.w = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.top_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.bottom_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.left_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.right_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.lm = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.close_length = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignDrillingSurfTechnology')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_technology_id is not None:
      oprot.writeFieldBegin('design_technology_id', TType.I32, 2)
      oprot.writeI32(self.design_technology_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.v_offset is not None:
      oprot.writeFieldBegin('v_offset', TType.DOUBLE, 5)
      oprot.writeDouble(self.v_offset)
      oprot.writeFieldEnd()
    if self.h_offset is not None:
      oprot.writeFieldBegin('h_offset', TType.DOUBLE, 6)
      oprot.writeDouble(self.h_offset)
      oprot.writeFieldEnd()
    if self.dp is not None:
      oprot.writeFieldBegin('dp', TType.DOUBLE, 7)
      oprot.writeDouble(self.dp)
      oprot.writeFieldEnd()
    if self.gp is not None:
      oprot.writeFieldBegin('gp', TType.DOUBLE, 8)
      oprot.writeDouble(self.gp)
      oprot.writeFieldEnd()
    if self.leading_dist is not None:
      oprot.writeFieldBegin('leading_dist', TType.DOUBLE, 9)
      oprot.writeDouble(self.leading_dist)
      oprot.writeFieldEnd()
    if self.gbp is not None:
      oprot.writeFieldBegin('gbp', TType.DOUBLE, 10)
      oprot.writeDouble(self.gbp)
      oprot.writeFieldEnd()
    if self.l_stripe is not None:
      oprot.writeFieldBegin('l_stripe', TType.DOUBLE, 11)
      oprot.writeDouble(self.l_stripe)
      oprot.writeFieldEnd()
    if self.ls is not None:
      oprot.writeFieldBegin('ls', TType.DOUBLE, 12)
      oprot.writeDouble(self.ls)
      oprot.writeFieldEnd()
    if self.ws is not None:
      oprot.writeFieldBegin('ws', TType.DOUBLE, 13)
      oprot.writeDouble(self.ws)
      oprot.writeFieldEnd()
    if self.hs is not None:
      oprot.writeFieldBegin('hs', TType.DOUBLE, 14)
      oprot.writeDouble(self.hs)
      oprot.writeFieldEnd()
    if self.gs is not None:
      oprot.writeFieldBegin('gs', TType.DOUBLE, 15)
      oprot.writeDouble(self.gs)
      oprot.writeFieldEnd()
    if self.wd is not None:
      oprot.writeFieldBegin('wd', TType.DOUBLE, 16)
      oprot.writeDouble(self.wd)
      oprot.writeFieldEnd()
    if self.hd is not None:
      oprot.writeFieldBegin('hd', TType.DOUBLE, 17)
      oprot.writeDouble(self.hd)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 18)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 19)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.DOUBLE, 20)
      oprot.writeDouble(self.w)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 21)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.top_side is not None:
      oprot.writeFieldBegin('top_side', TType.DOUBLE, 22)
      oprot.writeDouble(self.top_side)
      oprot.writeFieldEnd()
    if self.bottom_side is not None:
      oprot.writeFieldBegin('bottom_side', TType.DOUBLE, 23)
      oprot.writeDouble(self.bottom_side)
      oprot.writeFieldEnd()
    if self.left_side is not None:
      oprot.writeFieldBegin('left_side', TType.DOUBLE, 24)
      oprot.writeDouble(self.left_side)
      oprot.writeFieldEnd()
    if self.right_side is not None:
      oprot.writeFieldBegin('right_side', TType.DOUBLE, 25)
      oprot.writeDouble(self.right_side)
      oprot.writeFieldEnd()
    if self.lm is not None:
      oprot.writeFieldBegin('lm', TType.DOUBLE, 26)
      oprot.writeDouble(self.lm)
      oprot.writeFieldEnd()
    if self.close_length is not None:
      oprot.writeFieldBegin('close_length', TType.DOUBLE, 27)
      oprot.writeDouble(self.close_length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_technology_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.v_offset)
    value = (value * 31) ^ hash(self.h_offset)
    value = (value * 31) ^ hash(self.dp)
    value = (value * 31) ^ hash(self.gp)
    value = (value * 31) ^ hash(self.leading_dist)
    value = (value * 31) ^ hash(self.gbp)
    value = (value * 31) ^ hash(self.l_stripe)
    value = (value * 31) ^ hash(self.ls)
    value = (value * 31) ^ hash(self.ws)
    value = (value * 31) ^ hash(self.hs)
    value = (value * 31) ^ hash(self.gs)
    value = (value * 31) ^ hash(self.wd)
    value = (value * 31) ^ hash(self.hd)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.w)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.top_side)
    value = (value * 31) ^ hash(self.bottom_side)
    value = (value * 31) ^ hash(self.left_side)
    value = (value * 31) ^ hash(self.right_side)
    value = (value * 31) ^ hash(self.lm)
    value = (value * 31) ^ hash(self.close_length)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignEvalUnit:
  """
  Attributes:
   - id
   - design_eval_unit_partition_id
   - name
   - comment
   - num
   - l
   - t
   - gap
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_eval_unit_partition_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.I32, 'num', None, None, ), # 5
    (6, TType.DOUBLE, 'l', None, None, ), # 6
    (7, TType.I32, 't', None, None, ), # 7
    (8, TType.DOUBLE, 'gap', None, None, ), # 8
  )

  def __init__(self, id=None, design_eval_unit_partition_id=None, name=None, comment=None, num=None, l=None, t=None, gap=None,):
    self.id = id
    self.design_eval_unit_partition_id = design_eval_unit_partition_id
    self.name = name
    self.comment = comment
    self.num = num
    self.l = l
    self.t = t
    self.gap = gap

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_eval_unit_partition_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.l = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.t = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.gap = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignEvalUnit')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_eval_unit_partition_id is not None:
      oprot.writeFieldBegin('design_eval_unit_partition_id', TType.I32, 2)
      oprot.writeI32(self.design_eval_unit_partition_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 5)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.l is not None:
      oprot.writeFieldBegin('l', TType.DOUBLE, 6)
      oprot.writeDouble(self.l)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.I32, 7)
      oprot.writeI32(self.t)
      oprot.writeFieldEnd()
    if self.gap is not None:
      oprot.writeFieldBegin('gap', TType.DOUBLE, 8)
      oprot.writeDouble(self.gap)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_eval_unit_partition_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.l)
    value = (value * 31) ^ hash(self.t)
    value = (value * 31) ^ hash(self.gap)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignEvalUnitPartition:
  """
  Attributes:
   - id
   - work_surf_id
   - name
   - comment
   - l2
   - l1
   - w
   - h
   - l
   - r
   - t
   - v
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_surf_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'l2', None, None, ), # 5
    (6, TType.DOUBLE, 'l1', None, None, ), # 6
    (7, TType.DOUBLE, 'w', None, None, ), # 7
    (8, TType.DOUBLE, 'h', None, None, ), # 8
    (9, TType.DOUBLE, 'l', None, None, ), # 9
    (10, TType.DOUBLE, 'r', None, None, ), # 10
    (11, TType.DOUBLE, 't', None, None, ), # 11
    (12, TType.DOUBLE, 'v', None, None, ), # 12
  )

  def __init__(self, id=None, work_surf_id=None, name=None, comment=None, l2=None, l1=None, w=None, h=None, l=None, r=None, t=None, v=None,):
    self.id = id
    self.work_surf_id = work_surf_id
    self.name = name
    self.comment = comment
    self.l2 = l2
    self.l1 = l1
    self.w = w
    self.h = h
    self.l = l
    self.r = r
    self.t = t
    self.v = v

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_surf_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.w = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.l = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.r = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.t = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.v = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignEvalUnitPartition')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_surf_id is not None:
      oprot.writeFieldBegin('work_surf_id', TType.I32, 2)
      oprot.writeI32(self.work_surf_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 5)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 6)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.DOUBLE, 7)
      oprot.writeDouble(self.w)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 8)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.l is not None:
      oprot.writeFieldBegin('l', TType.DOUBLE, 9)
      oprot.writeDouble(self.l)
      oprot.writeFieldEnd()
    if self.r is not None:
      oprot.writeFieldBegin('r', TType.DOUBLE, 10)
      oprot.writeDouble(self.r)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.DOUBLE, 11)
      oprot.writeDouble(self.t)
      oprot.writeFieldEnd()
    if self.v is not None:
      oprot.writeFieldBegin('v', TType.DOUBLE, 12)
      oprot.writeDouble(self.v)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_surf_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.w)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.l)
    value = (value * 31) ^ hash(self.r)
    value = (value * 31) ^ hash(self.t)
    value = (value * 31) ^ hash(self.v)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignGoafPore:
  """
  Attributes:
   - id
   - design_goaf_technology_id
   - name
   - h_offset
   - v_offset
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_goaf_technology_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'h_offset', None, None, ), # 4
    (5, TType.DOUBLE, 'v_offset', None, None, ), # 5
    (6, TType.STRING, 'comment', None, None, ), # 6
  )

  def __init__(self, id=None, design_goaf_technology_id=None, name=None, h_offset=None, v_offset=None, comment=None,):
    self.id = id
    self.design_goaf_technology_id = design_goaf_technology_id
    self.name = name
    self.h_offset = h_offset
    self.v_offset = v_offset
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_goaf_technology_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.h_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.v_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignGoafPore')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_goaf_technology_id is not None:
      oprot.writeFieldBegin('design_goaf_technology_id', TType.I32, 2)
      oprot.writeI32(self.design_goaf_technology_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.h_offset is not None:
      oprot.writeFieldBegin('h_offset', TType.DOUBLE, 4)
      oprot.writeDouble(self.h_offset)
      oprot.writeFieldEnd()
    if self.v_offset is not None:
      oprot.writeFieldBegin('v_offset', TType.DOUBLE, 5)
      oprot.writeDouble(self.v_offset)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 6)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_goaf_technology_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.h_offset)
    value = (value * 31) ^ hash(self.v_offset)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignGoafTechnology:
  """
  Attributes:
   - id
   - design_technology_id
   - name
   - comment
   - pore_stubble
   - dp
   - gs
   - ls
   - ws
   - hs
   - gp
   - pore_num
   - top_dist
   - h_offset
   - y_offset
   - l1
   - l2
   - w
   - h
   - close_length
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_technology_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'pore_stubble', None, None, ), # 5
    (6, TType.DOUBLE, 'dp', None, None, ), # 6
    (7, TType.DOUBLE, 'gs', None, None, ), # 7
    (8, TType.DOUBLE, 'ls', None, None, ), # 8
    (9, TType.DOUBLE, 'ws', None, None, ), # 9
    (10, TType.DOUBLE, 'hs', None, None, ), # 10
    (11, TType.DOUBLE, 'gp', None, None, ), # 11
    (12, TType.I32, 'pore_num', None, None, ), # 12
    (13, TType.DOUBLE, 'top_dist', None, None, ), # 13
    (14, TType.STRING, 'h_offset', None, None, ), # 14
    (15, TType.STRING, 'y_offset', None, None, ), # 15
    (16, TType.DOUBLE, 'l1', None, None, ), # 16
    (17, TType.DOUBLE, 'l2', None, None, ), # 17
    (18, TType.DOUBLE, 'w', None, None, ), # 18
    (19, TType.DOUBLE, 'h', None, None, ), # 19
    (20, TType.DOUBLE, 'close_length', None, None, ), # 20
  )

  def __init__(self, id=None, design_technology_id=None, name=None, comment=None, pore_stubble=None, dp=None, gs=None, ls=None, ws=None, hs=None, gp=None, pore_num=None, top_dist=None, h_offset=None, y_offset=None, l1=None, l2=None, w=None, h=None, close_length=None,):
    self.id = id
    self.design_technology_id = design_technology_id
    self.name = name
    self.comment = comment
    self.pore_stubble = pore_stubble
    self.dp = dp
    self.gs = gs
    self.ls = ls
    self.ws = ws
    self.hs = hs
    self.gp = gp
    self.pore_num = pore_num
    self.top_dist = top_dist
    self.h_offset = h_offset
    self.y_offset = y_offset
    self.l1 = l1
    self.l2 = l2
    self.w = w
    self.h = h
    self.close_length = close_length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_technology_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.pore_stubble = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.dp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.gs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.ls = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.ws = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.hs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.gp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.pore_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.top_dist = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.h_offset = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.y_offset = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.w = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.close_length = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignGoafTechnology')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_technology_id is not None:
      oprot.writeFieldBegin('design_technology_id', TType.I32, 2)
      oprot.writeI32(self.design_technology_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.pore_stubble is not None:
      oprot.writeFieldBegin('pore_stubble', TType.DOUBLE, 5)
      oprot.writeDouble(self.pore_stubble)
      oprot.writeFieldEnd()
    if self.dp is not None:
      oprot.writeFieldBegin('dp', TType.DOUBLE, 6)
      oprot.writeDouble(self.dp)
      oprot.writeFieldEnd()
    if self.gs is not None:
      oprot.writeFieldBegin('gs', TType.DOUBLE, 7)
      oprot.writeDouble(self.gs)
      oprot.writeFieldEnd()
    if self.ls is not None:
      oprot.writeFieldBegin('ls', TType.DOUBLE, 8)
      oprot.writeDouble(self.ls)
      oprot.writeFieldEnd()
    if self.ws is not None:
      oprot.writeFieldBegin('ws', TType.DOUBLE, 9)
      oprot.writeDouble(self.ws)
      oprot.writeFieldEnd()
    if self.hs is not None:
      oprot.writeFieldBegin('hs', TType.DOUBLE, 10)
      oprot.writeDouble(self.hs)
      oprot.writeFieldEnd()
    if self.gp is not None:
      oprot.writeFieldBegin('gp', TType.DOUBLE, 11)
      oprot.writeDouble(self.gp)
      oprot.writeFieldEnd()
    if self.pore_num is not None:
      oprot.writeFieldBegin('pore_num', TType.I32, 12)
      oprot.writeI32(self.pore_num)
      oprot.writeFieldEnd()
    if self.top_dist is not None:
      oprot.writeFieldBegin('top_dist', TType.DOUBLE, 13)
      oprot.writeDouble(self.top_dist)
      oprot.writeFieldEnd()
    if self.h_offset is not None:
      oprot.writeFieldBegin('h_offset', TType.STRING, 14)
      oprot.writeString(self.h_offset)
      oprot.writeFieldEnd()
    if self.y_offset is not None:
      oprot.writeFieldBegin('y_offset', TType.STRING, 15)
      oprot.writeString(self.y_offset)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 16)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 17)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.DOUBLE, 18)
      oprot.writeDouble(self.w)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 19)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.close_length is not None:
      oprot.writeFieldBegin('close_length', TType.DOUBLE, 20)
      oprot.writeDouble(self.close_length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_technology_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.pore_stubble)
    value = (value * 31) ^ hash(self.dp)
    value = (value * 31) ^ hash(self.gs)
    value = (value * 31) ^ hash(self.ls)
    value = (value * 31) ^ hash(self.ws)
    value = (value * 31) ^ hash(self.hs)
    value = (value * 31) ^ hash(self.gp)
    value = (value * 31) ^ hash(self.pore_num)
    value = (value * 31) ^ hash(self.top_dist)
    value = (value * 31) ^ hash(self.h_offset)
    value = (value * 31) ^ hash(self.y_offset)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.w)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.close_length)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignPore:
  """
  Attributes:
   - id
   - design_eval_unit_id
   - design_site_id
   - name
   - d
   - x1
   - y1
   - z1
   - x2
   - y2
   - z2
   - length
   - angle1
   - angle2
   - comment
   - t
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_eval_unit_id', None, None, ), # 2
    (3, TType.I32, 'design_site_id', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.DOUBLE, 'd', None, None, ), # 5
    (6, TType.DOUBLE, 'x1', None, None, ), # 6
    (7, TType.DOUBLE, 'y1', None, None, ), # 7
    (8, TType.DOUBLE, 'z1', None, None, ), # 8
    (9, TType.DOUBLE, 'x2', None, None, ), # 9
    (10, TType.DOUBLE, 'y2', None, None, ), # 10
    (11, TType.DOUBLE, 'z2', None, None, ), # 11
    (12, TType.DOUBLE, 'length', None, None, ), # 12
    (13, TType.DOUBLE, 'angle1', None, None, ), # 13
    (14, TType.DOUBLE, 'angle2', None, None, ), # 14
    (15, TType.STRING, 'comment', None, None, ), # 15
    (16, TType.I32, 't', None, None, ), # 16
  )

  def __init__(self, id=None, design_eval_unit_id=None, design_site_id=None, name=None, d=None, x1=None, y1=None, z1=None, x2=None, y2=None, z2=None, length=None, angle1=None, angle2=None, comment=None, t=None,):
    self.id = id
    self.design_eval_unit_id = design_eval_unit_id
    self.design_site_id = design_site_id
    self.name = name
    self.d = d
    self.x1 = x1
    self.y1 = y1
    self.z1 = z1
    self.x2 = x2
    self.y2 = y2
    self.z2 = z2
    self.length = length
    self.angle1 = angle1
    self.angle2 = angle2
    self.comment = comment
    self.t = t

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_eval_unit_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.design_site_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.d = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.x1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.y1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.z1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.x2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.y2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.z2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.length = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.angle1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.angle2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.t = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignPore')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_eval_unit_id is not None:
      oprot.writeFieldBegin('design_eval_unit_id', TType.I32, 2)
      oprot.writeI32(self.design_eval_unit_id)
      oprot.writeFieldEnd()
    if self.design_site_id is not None:
      oprot.writeFieldBegin('design_site_id', TType.I32, 3)
      oprot.writeI32(self.design_site_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.d is not None:
      oprot.writeFieldBegin('d', TType.DOUBLE, 5)
      oprot.writeDouble(self.d)
      oprot.writeFieldEnd()
    if self.x1 is not None:
      oprot.writeFieldBegin('x1', TType.DOUBLE, 6)
      oprot.writeDouble(self.x1)
      oprot.writeFieldEnd()
    if self.y1 is not None:
      oprot.writeFieldBegin('y1', TType.DOUBLE, 7)
      oprot.writeDouble(self.y1)
      oprot.writeFieldEnd()
    if self.z1 is not None:
      oprot.writeFieldBegin('z1', TType.DOUBLE, 8)
      oprot.writeDouble(self.z1)
      oprot.writeFieldEnd()
    if self.x2 is not None:
      oprot.writeFieldBegin('x2', TType.DOUBLE, 9)
      oprot.writeDouble(self.x2)
      oprot.writeFieldEnd()
    if self.y2 is not None:
      oprot.writeFieldBegin('y2', TType.DOUBLE, 10)
      oprot.writeDouble(self.y2)
      oprot.writeFieldEnd()
    if self.z2 is not None:
      oprot.writeFieldBegin('z2', TType.DOUBLE, 11)
      oprot.writeDouble(self.z2)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.DOUBLE, 12)
      oprot.writeDouble(self.length)
      oprot.writeFieldEnd()
    if self.angle1 is not None:
      oprot.writeFieldBegin('angle1', TType.DOUBLE, 13)
      oprot.writeDouble(self.angle1)
      oprot.writeFieldEnd()
    if self.angle2 is not None:
      oprot.writeFieldBegin('angle2', TType.DOUBLE, 14)
      oprot.writeDouble(self.angle2)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 15)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.I32, 16)
      oprot.writeI32(self.t)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_eval_unit_id)
    value = (value * 31) ^ hash(self.design_site_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.d)
    value = (value * 31) ^ hash(self.x1)
    value = (value * 31) ^ hash(self.y1)
    value = (value * 31) ^ hash(self.z1)
    value = (value * 31) ^ hash(self.x2)
    value = (value * 31) ^ hash(self.y2)
    value = (value * 31) ^ hash(self.z2)
    value = (value * 31) ^ hash(self.length)
    value = (value * 31) ^ hash(self.angle1)
    value = (value * 31) ^ hash(self.angle2)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.t)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignSite:
  """
  Attributes:
   - id
   - design_technology_id
   - name
   - w
   - h
   - x
   - y
   - z
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_technology_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'w', None, None, ), # 4
    (5, TType.DOUBLE, 'h', None, None, ), # 5
    (6, TType.DOUBLE, 'x', None, None, ), # 6
    (7, TType.DOUBLE, 'y', None, None, ), # 7
    (8, TType.DOUBLE, 'z', None, None, ), # 8
    (9, TType.STRING, 'comment', None, None, ), # 9
  )

  def __init__(self, id=None, design_technology_id=None, name=None, w=None, h=None, x=None, y=None, z=None, comment=None,):
    self.id = id
    self.design_technology_id = design_technology_id
    self.name = name
    self.w = w
    self.h = h
    self.x = x
    self.y = y
    self.z = z
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_technology_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.w = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.z = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignSite')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_technology_id is not None:
      oprot.writeFieldBegin('design_technology_id', TType.I32, 2)
      oprot.writeI32(self.design_technology_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.DOUBLE, 4)
      oprot.writeDouble(self.w)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 5)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 6)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 7)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    if self.z is not None:
      oprot.writeFieldBegin('z', TType.DOUBLE, 8)
      oprot.writeDouble(self.z)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 9)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_technology_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.w)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.z)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignTechnology:
  """
  Attributes:
   - id
   - coal_id
   - name
   - region
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'coal_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'region', None, None, ), # 4
    (5, TType.STRING, 'comment', None, None, ), # 5
  )

  def __init__(self, id=None, coal_id=None, name=None, region=None, comment=None,):
    self.id = id
    self.coal_id = coal_id
    self.name = name
    self.region = region
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.coal_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.region = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignTechnology')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.coal_id is not None:
      oprot.writeFieldBegin('coal_id', TType.I32, 2)
      oprot.writeI32(self.coal_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.region is not None:
      oprot.writeFieldBegin('region', TType.I32, 4)
      oprot.writeI32(self.region)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 5)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.coal_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.region)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignTunnelControlPoint:
  """
  Attributes:
   - id
   - design_eval_unit_partition_id
   - name
   - comment
   - x
   - y
   - z
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_eval_unit_partition_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'x', None, None, ), # 5
    (6, TType.DOUBLE, 'y', None, None, ), # 6
    (7, TType.DOUBLE, 'z', None, None, ), # 7
  )

  def __init__(self, id=None, design_eval_unit_partition_id=None, name=None, comment=None, x=None, y=None, z=None,):
    self.id = id
    self.design_eval_unit_partition_id = design_eval_unit_partition_id
    self.name = name
    self.comment = comment
    self.x = x
    self.y = y
    self.z = z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_eval_unit_partition_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.z = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignTunnelControlPoint')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_eval_unit_partition_id is not None:
      oprot.writeFieldBegin('design_eval_unit_partition_id', TType.I32, 2)
      oprot.writeI32(self.design_eval_unit_partition_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 5)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 6)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    if self.z is not None:
      oprot.writeFieldBegin('z', TType.DOUBLE, 7)
      oprot.writeDouble(self.z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_eval_unit_partition_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.z)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignWorkSurfControlPoint:
  """
  Attributes:
   - id
   - design_eval_unit_partition_id
   - name
   - comment
   - x
   - y
   - z
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_eval_unit_partition_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'x', None, None, ), # 5
    (6, TType.DOUBLE, 'y', None, None, ), # 6
    (7, TType.DOUBLE, 'z', None, None, ), # 7
  )

  def __init__(self, id=None, design_eval_unit_partition_id=None, name=None, comment=None, x=None, y=None, z=None,):
    self.id = id
    self.design_eval_unit_partition_id = design_eval_unit_partition_id
    self.name = name
    self.comment = comment
    self.x = x
    self.y = y
    self.z = z

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_eval_unit_partition_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.y = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.z = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignWorkSurfControlPoint')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_eval_unit_partition_id is not None:
      oprot.writeFieldBegin('design_eval_unit_partition_id', TType.I32, 2)
      oprot.writeI32(self.design_eval_unit_partition_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 5)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.y is not None:
      oprot.writeFieldBegin('y', TType.DOUBLE, 6)
      oprot.writeDouble(self.y)
      oprot.writeFieldEnd()
    if self.z is not None:
      oprot.writeFieldBegin('z', TType.DOUBLE, 7)
      oprot.writeDouble(self.z)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_eval_unit_partition_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.y)
    value = (value * 31) ^ hash(self.z)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DesignWorkSurfTechnology:
  """
  Attributes:
   - id
   - design_technology_id
   - name
   - comment
   - top_side
   - bottom_side
   - right_side
   - l1
   - w
   - h
   - l2
   - left_side
   - v_offset
   - h_offset
   - p_offset
   - wd
   - hd
   - lm
   - ws
   - ls
   - gs
   - hs
   - dp
   - gp
   - single_rock_tunnel
   - d_offset
   - pore_stubble
   - pore_angle
   - pore_type
   - close_length
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'design_technology_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
    (5, TType.DOUBLE, 'top_side', None, None, ), # 5
    (6, TType.DOUBLE, 'bottom_side', None, None, ), # 6
    (7, TType.DOUBLE, 'right_side', None, None, ), # 7
    (8, TType.DOUBLE, 'l1', None, None, ), # 8
    (9, TType.DOUBLE, 'w', None, None, ), # 9
    (10, TType.DOUBLE, 'h', None, None, ), # 10
    (11, TType.DOUBLE, 'l2', None, None, ), # 11
    (12, TType.DOUBLE, 'left_side', None, None, ), # 12
    (13, TType.DOUBLE, 'v_offset', None, None, ), # 13
    (14, TType.DOUBLE, 'h_offset', None, None, ), # 14
    (15, TType.DOUBLE, 'p_offset', None, None, ), # 15
    (16, TType.DOUBLE, 'wd', None, None, ), # 16
    (17, TType.DOUBLE, 'hd', None, None, ), # 17
    (18, TType.DOUBLE, 'lm', None, None, ), # 18
    (19, TType.DOUBLE, 'ws', None, None, ), # 19
    (20, TType.DOUBLE, 'ls', None, None, ), # 20
    (21, TType.DOUBLE, 'gs', None, None, ), # 21
    (22, TType.DOUBLE, 'hs', None, None, ), # 22
    (23, TType.DOUBLE, 'dp', None, None, ), # 23
    (24, TType.DOUBLE, 'gp', None, None, ), # 24
    (25, TType.I32, 'single_rock_tunnel', None, None, ), # 25
    (26, TType.DOUBLE, 'd_offset', None, None, ), # 26
    (27, TType.DOUBLE, 'pore_stubble', None, None, ), # 27
    (28, TType.DOUBLE, 'pore_angle', None, None, ), # 28
    (29, TType.I32, 'pore_type', None, None, ), # 29
    (30, TType.DOUBLE, 'close_length', None, None, ), # 30
  )

  def __init__(self, id=None, design_technology_id=None, name=None, comment=None, top_side=None, bottom_side=None, right_side=None, l1=None, w=None, h=None, l2=None, left_side=None, v_offset=None, h_offset=None, p_offset=None, wd=None, hd=None, lm=None, ws=None, ls=None, gs=None, hs=None, dp=None, gp=None, single_rock_tunnel=None, d_offset=None, pore_stubble=None, pore_angle=None, pore_type=None, close_length=None,):
    self.id = id
    self.design_technology_id = design_technology_id
    self.name = name
    self.comment = comment
    self.top_side = top_side
    self.bottom_side = bottom_side
    self.right_side = right_side
    self.l1 = l1
    self.w = w
    self.h = h
    self.l2 = l2
    self.left_side = left_side
    self.v_offset = v_offset
    self.h_offset = h_offset
    self.p_offset = p_offset
    self.wd = wd
    self.hd = hd
    self.lm = lm
    self.ws = ws
    self.ls = ls
    self.gs = gs
    self.hs = hs
    self.dp = dp
    self.gp = gp
    self.single_rock_tunnel = single_rock_tunnel
    self.d_offset = d_offset
    self.pore_stubble = pore_stubble
    self.pore_angle = pore_angle
    self.pore_type = pore_type
    self.close_length = close_length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.design_technology_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.top_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.bottom_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.right_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.w = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.left_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.v_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.h_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.p_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.wd = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.hd = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.lm = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.ws = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.ls = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.gs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.hs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.dp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.gp = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.single_rock_tunnel = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.d_offset = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.pore_stubble = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.pore_angle = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.pore_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.close_length = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DesignWorkSurfTechnology')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.design_technology_id is not None:
      oprot.writeFieldBegin('design_technology_id', TType.I32, 2)
      oprot.writeI32(self.design_technology_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.top_side is not None:
      oprot.writeFieldBegin('top_side', TType.DOUBLE, 5)
      oprot.writeDouble(self.top_side)
      oprot.writeFieldEnd()
    if self.bottom_side is not None:
      oprot.writeFieldBegin('bottom_side', TType.DOUBLE, 6)
      oprot.writeDouble(self.bottom_side)
      oprot.writeFieldEnd()
    if self.right_side is not None:
      oprot.writeFieldBegin('right_side', TType.DOUBLE, 7)
      oprot.writeDouble(self.right_side)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 8)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.w is not None:
      oprot.writeFieldBegin('w', TType.DOUBLE, 9)
      oprot.writeDouble(self.w)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 10)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 11)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.left_side is not None:
      oprot.writeFieldBegin('left_side', TType.DOUBLE, 12)
      oprot.writeDouble(self.left_side)
      oprot.writeFieldEnd()
    if self.v_offset is not None:
      oprot.writeFieldBegin('v_offset', TType.DOUBLE, 13)
      oprot.writeDouble(self.v_offset)
      oprot.writeFieldEnd()
    if self.h_offset is not None:
      oprot.writeFieldBegin('h_offset', TType.DOUBLE, 14)
      oprot.writeDouble(self.h_offset)
      oprot.writeFieldEnd()
    if self.p_offset is not None:
      oprot.writeFieldBegin('p_offset', TType.DOUBLE, 15)
      oprot.writeDouble(self.p_offset)
      oprot.writeFieldEnd()
    if self.wd is not None:
      oprot.writeFieldBegin('wd', TType.DOUBLE, 16)
      oprot.writeDouble(self.wd)
      oprot.writeFieldEnd()
    if self.hd is not None:
      oprot.writeFieldBegin('hd', TType.DOUBLE, 17)
      oprot.writeDouble(self.hd)
      oprot.writeFieldEnd()
    if self.lm is not None:
      oprot.writeFieldBegin('lm', TType.DOUBLE, 18)
      oprot.writeDouble(self.lm)
      oprot.writeFieldEnd()
    if self.ws is not None:
      oprot.writeFieldBegin('ws', TType.DOUBLE, 19)
      oprot.writeDouble(self.ws)
      oprot.writeFieldEnd()
    if self.ls is not None:
      oprot.writeFieldBegin('ls', TType.DOUBLE, 20)
      oprot.writeDouble(self.ls)
      oprot.writeFieldEnd()
    if self.gs is not None:
      oprot.writeFieldBegin('gs', TType.DOUBLE, 21)
      oprot.writeDouble(self.gs)
      oprot.writeFieldEnd()
    if self.hs is not None:
      oprot.writeFieldBegin('hs', TType.DOUBLE, 22)
      oprot.writeDouble(self.hs)
      oprot.writeFieldEnd()
    if self.dp is not None:
      oprot.writeFieldBegin('dp', TType.DOUBLE, 23)
      oprot.writeDouble(self.dp)
      oprot.writeFieldEnd()
    if self.gp is not None:
      oprot.writeFieldBegin('gp', TType.DOUBLE, 24)
      oprot.writeDouble(self.gp)
      oprot.writeFieldEnd()
    if self.single_rock_tunnel is not None:
      oprot.writeFieldBegin('single_rock_tunnel', TType.I32, 25)
      oprot.writeI32(self.single_rock_tunnel)
      oprot.writeFieldEnd()
    if self.d_offset is not None:
      oprot.writeFieldBegin('d_offset', TType.DOUBLE, 26)
      oprot.writeDouble(self.d_offset)
      oprot.writeFieldEnd()
    if self.pore_stubble is not None:
      oprot.writeFieldBegin('pore_stubble', TType.DOUBLE, 27)
      oprot.writeDouble(self.pore_stubble)
      oprot.writeFieldEnd()
    if self.pore_angle is not None:
      oprot.writeFieldBegin('pore_angle', TType.DOUBLE, 28)
      oprot.writeDouble(self.pore_angle)
      oprot.writeFieldEnd()
    if self.pore_type is not None:
      oprot.writeFieldBegin('pore_type', TType.I32, 29)
      oprot.writeI32(self.pore_type)
      oprot.writeFieldEnd()
    if self.close_length is not None:
      oprot.writeFieldBegin('close_length', TType.DOUBLE, 30)
      oprot.writeDouble(self.close_length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.design_technology_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.top_side)
    value = (value * 31) ^ hash(self.bottom_side)
    value = (value * 31) ^ hash(self.right_side)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.w)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.left_side)
    value = (value * 31) ^ hash(self.v_offset)
    value = (value * 31) ^ hash(self.h_offset)
    value = (value * 31) ^ hash(self.p_offset)
    value = (value * 31) ^ hash(self.wd)
    value = (value * 31) ^ hash(self.hd)
    value = (value * 31) ^ hash(self.lm)
    value = (value * 31) ^ hash(self.ws)
    value = (value * 31) ^ hash(self.ls)
    value = (value * 31) ^ hash(self.gs)
    value = (value * 31) ^ hash(self.hs)
    value = (value * 31) ^ hash(self.dp)
    value = (value * 31) ^ hash(self.gp)
    value = (value * 31) ^ hash(self.single_rock_tunnel)
    value = (value * 31) ^ hash(self.d_offset)
    value = (value * 31) ^ hash(self.pore_stubble)
    value = (value * 31) ^ hash(self.pore_angle)
    value = (value * 31) ^ hash(self.pore_type)
    value = (value * 31) ^ hash(self.close_length)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrillingRadiusParam:
  """
  Attributes:
   - id
   - coal_id
   - name
   - r
   - l
   - k1
   - rho
   - q0
   - a
   - t
   - qm
   - qsum
   - eta
   - r0
   - p0
   - r1
   - p1
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'coal_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'r', None, None, ), # 4
    (5, TType.DOUBLE, 'l', None, None, ), # 5
    (6, TType.DOUBLE, 'k1', None, None, ), # 6
    (7, TType.DOUBLE, 'rho', None, None, ), # 7
    (8, TType.DOUBLE, 'q0', None, None, ), # 8
    (9, TType.DOUBLE, 'a', None, None, ), # 9
    (10, TType.DOUBLE, 't', None, None, ), # 10
    (11, TType.DOUBLE, 'qm', None, None, ), # 11
    (12, TType.DOUBLE, 'qsum', None, None, ), # 12
    (13, TType.DOUBLE, 'eta', None, None, ), # 13
    (14, TType.DOUBLE, 'r0', None, None, ), # 14
    (15, TType.DOUBLE, 'p0', None, None, ), # 15
    (16, TType.DOUBLE, 'r1', None, None, ), # 16
    (17, TType.DOUBLE, 'p1', None, None, ), # 17
  )

  def __init__(self, id=None, coal_id=None, name=None, r=None, l=None, k1=None, rho=None, q0=None, a=None, t=None, qm=None, qsum=None, eta=None, r0=None, p0=None, r1=None, p1=None,):
    self.id = id
    self.coal_id = coal_id
    self.name = name
    self.r = r
    self.l = l
    self.k1 = k1
    self.rho = rho
    self.q0 = q0
    self.a = a
    self.t = t
    self.qm = qm
    self.qsum = qsum
    self.eta = eta
    self.r0 = r0
    self.p0 = p0
    self.r1 = r1
    self.p1 = p1

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.coal_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.r = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.l = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.k1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.rho = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.q0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.a = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.t = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.qm = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.qsum = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.eta = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.r0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.p0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.r1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.p1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrillingRadiusParam')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.coal_id is not None:
      oprot.writeFieldBegin('coal_id', TType.I32, 2)
      oprot.writeI32(self.coal_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.r is not None:
      oprot.writeFieldBegin('r', TType.DOUBLE, 4)
      oprot.writeDouble(self.r)
      oprot.writeFieldEnd()
    if self.l is not None:
      oprot.writeFieldBegin('l', TType.DOUBLE, 5)
      oprot.writeDouble(self.l)
      oprot.writeFieldEnd()
    if self.k1 is not None:
      oprot.writeFieldBegin('k1', TType.DOUBLE, 6)
      oprot.writeDouble(self.k1)
      oprot.writeFieldEnd()
    if self.rho is not None:
      oprot.writeFieldBegin('rho', TType.DOUBLE, 7)
      oprot.writeDouble(self.rho)
      oprot.writeFieldEnd()
    if self.q0 is not None:
      oprot.writeFieldBegin('q0', TType.DOUBLE, 8)
      oprot.writeDouble(self.q0)
      oprot.writeFieldEnd()
    if self.a is not None:
      oprot.writeFieldBegin('a', TType.DOUBLE, 9)
      oprot.writeDouble(self.a)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.DOUBLE, 10)
      oprot.writeDouble(self.t)
      oprot.writeFieldEnd()
    if self.qm is not None:
      oprot.writeFieldBegin('qm', TType.DOUBLE, 11)
      oprot.writeDouble(self.qm)
      oprot.writeFieldEnd()
    if self.qsum is not None:
      oprot.writeFieldBegin('qsum', TType.DOUBLE, 12)
      oprot.writeDouble(self.qsum)
      oprot.writeFieldEnd()
    if self.eta is not None:
      oprot.writeFieldBegin('eta', TType.DOUBLE, 13)
      oprot.writeDouble(self.eta)
      oprot.writeFieldEnd()
    if self.r0 is not None:
      oprot.writeFieldBegin('r0', TType.DOUBLE, 14)
      oprot.writeDouble(self.r0)
      oprot.writeFieldEnd()
    if self.p0 is not None:
      oprot.writeFieldBegin('p0', TType.DOUBLE, 15)
      oprot.writeDouble(self.p0)
      oprot.writeFieldEnd()
    if self.r1 is not None:
      oprot.writeFieldBegin('r1', TType.DOUBLE, 16)
      oprot.writeDouble(self.r1)
      oprot.writeFieldEnd()
    if self.p1 is not None:
      oprot.writeFieldBegin('p1', TType.DOUBLE, 17)
      oprot.writeDouble(self.p1)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.coal_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.r)
    value = (value * 31) ^ hash(self.l)
    value = (value * 31) ^ hash(self.k1)
    value = (value * 31) ^ hash(self.rho)
    value = (value * 31) ^ hash(self.q0)
    value = (value * 31) ^ hash(self.a)
    value = (value * 31) ^ hash(self.t)
    value = (value * 31) ^ hash(self.qm)
    value = (value * 31) ^ hash(self.qsum)
    value = (value * 31) ^ hash(self.eta)
    value = (value * 31) ^ hash(self.r0)
    value = (value * 31) ^ hash(self.p0)
    value = (value * 31) ^ hash(self.r1)
    value = (value * 31) ^ hash(self.p1)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrillingSurf:
  """
  Attributes:
   - id
   - work_area_id
   - tunnel_id
   - name
   - qr
   - qa
   - fore_qr
   - fore_qa
   - q4
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_area_id', None, None, ), # 2
    (3, TType.I32, 'tunnel_id', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.DOUBLE, 'qr', None, None, ), # 5
    (6, TType.DOUBLE, 'qa', None, None, ), # 6
    (7, TType.DOUBLE, 'fore_qr', None, None, ), # 7
    (8, TType.DOUBLE, 'fore_qa', None, None, ), # 8
    (9, TType.DOUBLE, 'q4', None, None, ), # 9
    (10, TType.STRING, 'comment', None, None, ), # 10
  )

  def __init__(self, id=None, work_area_id=None, tunnel_id=None, name=None, qr=None, qa=None, fore_qr=None, fore_qa=None, q4=None, comment=None,):
    self.id = id
    self.work_area_id = work_area_id
    self.tunnel_id = tunnel_id
    self.name = name
    self.qr = qr
    self.qa = qa
    self.fore_qr = fore_qr
    self.fore_qa = fore_qa
    self.q4 = q4
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tunnel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.fore_qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.fore_qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.q4 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrillingSurf')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_area_id is not None:
      oprot.writeFieldBegin('work_area_id', TType.I32, 2)
      oprot.writeI32(self.work_area_id)
      oprot.writeFieldEnd()
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I32, 3)
      oprot.writeI32(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.qr is not None:
      oprot.writeFieldBegin('qr', TType.DOUBLE, 5)
      oprot.writeDouble(self.qr)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 6)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    if self.fore_qr is not None:
      oprot.writeFieldBegin('fore_qr', TType.DOUBLE, 7)
      oprot.writeDouble(self.fore_qr)
      oprot.writeFieldEnd()
    if self.fore_qa is not None:
      oprot.writeFieldBegin('fore_qa', TType.DOUBLE, 8)
      oprot.writeDouble(self.fore_qa)
      oprot.writeFieldEnd()
    if self.q4 is not None:
      oprot.writeFieldBegin('q4', TType.DOUBLE, 9)
      oprot.writeDouble(self.q4)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 10)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_area_id)
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.qr)
    value = (value * 31) ^ hash(self.qa)
    value = (value * 31) ^ hash(self.fore_qr)
    value = (value * 31) ^ hash(self.fore_qa)
    value = (value * 31) ^ hash(self.q4)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HighDrillingPore:
  """
  Attributes:
   - id
   - high_drilling_pore_param_id
   - num
   - length
   - angle
   - pore_type
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'high_drilling_pore_param_id', None, None, ), # 2
    (3, TType.I32, 'num', None, None, ), # 3
    (4, TType.DOUBLE, 'length', None, None, ), # 4
    (5, TType.DOUBLE, 'angle', None, None, ), # 5
    (6, TType.I32, 'pore_type', None, None, ), # 6
    (7, TType.STRING, 'comment', None, None, ), # 7
  )

  def __init__(self, id=None, high_drilling_pore_param_id=None, num=None, length=None, angle=None, pore_type=None, comment=None,):
    self.id = id
    self.high_drilling_pore_param_id = high_drilling_pore_param_id
    self.num = num
    self.length = length
    self.angle = angle
    self.pore_type = pore_type
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.high_drilling_pore_param_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.length = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.angle = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.pore_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HighDrillingPore')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.high_drilling_pore_param_id is not None:
      oprot.writeFieldBegin('high_drilling_pore_param_id', TType.I32, 2)
      oprot.writeI32(self.high_drilling_pore_param_id)
      oprot.writeFieldEnd()
    if self.num is not None:
      oprot.writeFieldBegin('num', TType.I32, 3)
      oprot.writeI32(self.num)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.DOUBLE, 4)
      oprot.writeDouble(self.length)
      oprot.writeFieldEnd()
    if self.angle is not None:
      oprot.writeFieldBegin('angle', TType.DOUBLE, 5)
      oprot.writeDouble(self.angle)
      oprot.writeFieldEnd()
    if self.pore_type is not None:
      oprot.writeFieldBegin('pore_type', TType.I32, 6)
      oprot.writeI32(self.pore_type)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 7)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.high_drilling_pore_param_id)
    value = (value * 31) ^ hash(self.num)
    value = (value * 31) ^ hash(self.length)
    value = (value * 31) ^ hash(self.angle)
    value = (value * 31) ^ hash(self.pore_type)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HighDrillingPoreParam:
  """
  Attributes:
   - id
   - work_surf_id
   - name
   - lk
   - lc
   - lw
   - n1
   - n2
   - beta
   - ld
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_surf_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'lk', None, None, ), # 4
    (5, TType.DOUBLE, 'lc', None, None, ), # 5
    (6, TType.DOUBLE, 'lw', None, None, ), # 6
    (7, TType.I32, 'n1', None, None, ), # 7
    (8, TType.I32, 'n2', None, None, ), # 8
    (9, TType.DOUBLE, 'beta', None, None, ), # 9
    (10, TType.DOUBLE, 'ld', None, None, ), # 10
    (11, TType.STRING, 'comment', None, None, ), # 11
  )

  def __init__(self, id=None, work_surf_id=None, name=None, lk=None, lc=None, lw=None, n1=None, n2=None, beta=None, ld=None, comment=None,):
    self.id = id
    self.work_surf_id = work_surf_id
    self.name = name
    self.lk = lk
    self.lc = lc
    self.lw = lw
    self.n1 = n1
    self.n2 = n2
    self.beta = beta
    self.ld = ld
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_surf_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.lk = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.lc = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.lw = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.n1 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.n2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.beta = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.ld = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HighDrillingPoreParam')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_surf_id is not None:
      oprot.writeFieldBegin('work_surf_id', TType.I32, 2)
      oprot.writeI32(self.work_surf_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.lk is not None:
      oprot.writeFieldBegin('lk', TType.DOUBLE, 4)
      oprot.writeDouble(self.lk)
      oprot.writeFieldEnd()
    if self.lc is not None:
      oprot.writeFieldBegin('lc', TType.DOUBLE, 5)
      oprot.writeDouble(self.lc)
      oprot.writeFieldEnd()
    if self.lw is not None:
      oprot.writeFieldBegin('lw', TType.DOUBLE, 6)
      oprot.writeDouble(self.lw)
      oprot.writeFieldEnd()
    if self.n1 is not None:
      oprot.writeFieldBegin('n1', TType.I32, 7)
      oprot.writeI32(self.n1)
      oprot.writeFieldEnd()
    if self.n2 is not None:
      oprot.writeFieldBegin('n2', TType.I32, 8)
      oprot.writeI32(self.n2)
      oprot.writeFieldEnd()
    if self.beta is not None:
      oprot.writeFieldBegin('beta', TType.DOUBLE, 9)
      oprot.writeDouble(self.beta)
      oprot.writeFieldEnd()
    if self.ld is not None:
      oprot.writeFieldBegin('ld', TType.DOUBLE, 10)
      oprot.writeDouble(self.ld)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 11)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_surf_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.lk)
    value = (value * 31) ^ hash(self.lc)
    value = (value * 31) ^ hash(self.lw)
    value = (value * 31) ^ hash(self.n1)
    value = (value * 31) ^ hash(self.n2)
    value = (value * 31) ^ hash(self.beta)
    value = (value * 31) ^ hash(self.ld)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HighDrillingSiteParam:
  """
  Attributes:
   - id
   - work_surf_id
   - name
   - l1
   - l2
   - lg
   - hn
   - theta
   - q
   - rtn
   - hs
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_surf_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'l1', None, None, ), # 4
    (5, TType.DOUBLE, 'l2', None, None, ), # 5
    (6, TType.DOUBLE, 'lg', None, None, ), # 6
    (7, TType.DOUBLE, 'hn', None, None, ), # 7
    (8, TType.DOUBLE, 'theta', None, None, ), # 8
    (9, TType.DOUBLE, 'q', None, None, ), # 9
    (10, TType.DOUBLE, 'rtn', None, None, ), # 10
    (11, TType.DOUBLE, 'hs', None, None, ), # 11
    (12, TType.STRING, 'comment', None, None, ), # 12
  )

  def __init__(self, id=None, work_surf_id=None, name=None, l1=None, l2=None, lg=None, hn=None, theta=None, q=None, rtn=None, hs=None, comment=None,):
    self.id = id
    self.work_surf_id = work_surf_id
    self.name = name
    self.l1 = l1
    self.l2 = l2
    self.lg = lg
    self.hn = hn
    self.theta = theta
    self.q = q
    self.rtn = rtn
    self.hs = hs
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_surf_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.lg = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.hn = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.theta = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.q = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.rtn = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.hs = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HighDrillingSiteParam')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_surf_id is not None:
      oprot.writeFieldBegin('work_surf_id', TType.I32, 2)
      oprot.writeI32(self.work_surf_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 4)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 5)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.lg is not None:
      oprot.writeFieldBegin('lg', TType.DOUBLE, 6)
      oprot.writeDouble(self.lg)
      oprot.writeFieldEnd()
    if self.hn is not None:
      oprot.writeFieldBegin('hn', TType.DOUBLE, 7)
      oprot.writeDouble(self.hn)
      oprot.writeFieldEnd()
    if self.theta is not None:
      oprot.writeFieldBegin('theta', TType.DOUBLE, 8)
      oprot.writeDouble(self.theta)
      oprot.writeFieldEnd()
    if self.q is not None:
      oprot.writeFieldBegin('q', TType.DOUBLE, 9)
      oprot.writeDouble(self.q)
      oprot.writeFieldEnd()
    if self.rtn is not None:
      oprot.writeFieldBegin('rtn', TType.DOUBLE, 10)
      oprot.writeDouble(self.rtn)
      oprot.writeFieldEnd()
    if self.hs is not None:
      oprot.writeFieldBegin('hs', TType.DOUBLE, 11)
      oprot.writeDouble(self.hs)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 12)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_surf_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.lg)
    value = (value * 31) ^ hash(self.hn)
    value = (value * 31) ^ hash(self.theta)
    value = (value * 31) ^ hash(self.q)
    value = (value * 31) ^ hash(self.rtn)
    value = (value * 31) ^ hash(self.hs)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HighDrillingTunnel:
  """
  Attributes:
   - id
   - work_surf_id
   - name
   - k
   - rock
   - hz_min
   - hz_max
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_surf_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.DOUBLE, 'k', None, None, ), # 4
    (5, TType.I32, 'rock', None, None, ), # 5
    (6, TType.DOUBLE, 'hz_min', None, None, ), # 6
    (7, TType.DOUBLE, 'hz_max', None, None, ), # 7
    (8, TType.STRING, 'comment', None, None, ), # 8
  )

  def __init__(self, id=None, work_surf_id=None, name=None, k=None, rock=None, hz_min=None, hz_max=None, comment=None,):
    self.id = id
    self.work_surf_id = work_surf_id
    self.name = name
    self.k = k
    self.rock = rock
    self.hz_min = hz_min
    self.hz_max = hz_max
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_surf_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.rock = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.hz_min = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.hz_max = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HighDrillingTunnel')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_surf_id is not None:
      oprot.writeFieldBegin('work_surf_id', TType.I32, 2)
      oprot.writeI32(self.work_surf_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.DOUBLE, 4)
      oprot.writeDouble(self.k)
      oprot.writeFieldEnd()
    if self.rock is not None:
      oprot.writeFieldBegin('rock', TType.I32, 5)
      oprot.writeI32(self.rock)
      oprot.writeFieldEnd()
    if self.hz_min is not None:
      oprot.writeFieldBegin('hz_min', TType.DOUBLE, 6)
      oprot.writeDouble(self.hz_min)
      oprot.writeFieldEnd()
    if self.hz_max is not None:
      oprot.writeFieldBegin('hz_max', TType.DOUBLE, 7)
      oprot.writeDouble(self.hz_max)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 8)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_surf_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.rock)
    value = (value * 31) ^ hash(self.hz_min)
    value = (value * 31) ^ hash(self.hz_max)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HydrGeo:
  """
  Attributes:
   - id
   - name
   - x1
   - x2
   - x3
   - x4
   - x5
   - x6
   - x7
   - x8
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'x1', None, None, ), # 3
    (4, TType.I32, 'x2', None, None, ), # 4
    (5, TType.I32, 'x3', None, None, ), # 5
    (6, TType.DOUBLE, 'x4', None, None, ), # 6
    (7, TType.DOUBLE, 'x5', None, None, ), # 7
    (8, TType.DOUBLE, 'x6', None, None, ), # 8
    (9, TType.DOUBLE, 'x7', None, None, ), # 9
    (10, TType.STRING, 'x8', None, None, ), # 10
  )

  def __init__(self, id=None, name=None, x1=None, x2=None, x3=None, x4=None, x5=None, x6=None, x7=None, x8=None,):
    self.id = id
    self.name = name
    self.x1 = x1
    self.x2 = x2
    self.x3 = x3
    self.x4 = x4
    self.x5 = x5
    self.x6 = x6
    self.x7 = x7
    self.x8 = x8

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.x1 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.x2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.x3 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.x4 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.x5 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.x6 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.x7 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.x8 = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HydrGeo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.x1 is not None:
      oprot.writeFieldBegin('x1', TType.I32, 3)
      oprot.writeI32(self.x1)
      oprot.writeFieldEnd()
    if self.x2 is not None:
      oprot.writeFieldBegin('x2', TType.I32, 4)
      oprot.writeI32(self.x2)
      oprot.writeFieldEnd()
    if self.x3 is not None:
      oprot.writeFieldBegin('x3', TType.I32, 5)
      oprot.writeI32(self.x3)
      oprot.writeFieldEnd()
    if self.x4 is not None:
      oprot.writeFieldBegin('x4', TType.DOUBLE, 6)
      oprot.writeDouble(self.x4)
      oprot.writeFieldEnd()
    if self.x5 is not None:
      oprot.writeFieldBegin('x5', TType.DOUBLE, 7)
      oprot.writeDouble(self.x5)
      oprot.writeFieldEnd()
    if self.x6 is not None:
      oprot.writeFieldBegin('x6', TType.DOUBLE, 8)
      oprot.writeDouble(self.x6)
      oprot.writeFieldEnd()
    if self.x7 is not None:
      oprot.writeFieldBegin('x7', TType.DOUBLE, 9)
      oprot.writeDouble(self.x7)
      oprot.writeFieldEnd()
    if self.x8 is not None:
      oprot.writeFieldBegin('x8', TType.STRING, 10)
      oprot.writeString(self.x8)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.x1)
    value = (value * 31) ^ hash(self.x2)
    value = (value * 31) ^ hash(self.x3)
    value = (value * 31) ^ hash(self.x4)
    value = (value * 31) ^ hash(self.x5)
    value = (value * 31) ^ hash(self.x6)
    value = (value * 31) ^ hash(self.x7)
    value = (value * 31) ^ hash(self.x8)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Mine:
  """
  Attributes:
   - id
   - tech_mode_id
   - mine_region_id
   - account_id
   - name
   - province
   - city
   - capacity
   - topo_geo
   - hydr_geo
   - ground_condition
   - qr
   - qa
   - fore_qr
   - fore_qa
   - gas_k1
   - gas_k2
   - stereo_schem_diagram
   - rock_gas_k2
   - reserve_w1
   - reserve_w2
   - reserve_w3
   - gas_w0
   - gas_wc2
   - pump_k2
   - pump_k3
   - pump_k4
   - pump_k1
   - pump_k
   - pump_wc
   - reserve_gas
   - comment
   - protect_layer_condition
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'tech_mode_id', None, None, ), # 2
    (3, TType.I32, 'mine_region_id', None, None, ), # 3
    (4, TType.I32, 'account_id', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'province', None, None, ), # 6
    (7, TType.STRING, 'city', None, None, ), # 7
    (8, TType.DOUBLE, 'capacity', None, None, ), # 8
    (9, TType.I32, 'topo_geo', None, None, ), # 9
    (10, TType.I32, 'hydr_geo', None, None, ), # 10
    (11, TType.I32, 'ground_condition', None, None, ), # 11
    (12, TType.DOUBLE, 'qr', None, None, ), # 12
    (13, TType.DOUBLE, 'qa', None, None, ), # 13
    (14, TType.DOUBLE, 'fore_qr', None, None, ), # 14
    (15, TType.DOUBLE, 'fore_qa', None, None, ), # 15
    (16, TType.DOUBLE, 'gas_k1', None, None, ), # 16
    (17, TType.DOUBLE, 'gas_k2', None, None, ), # 17
    (18, TType.STRING, 'stereo_schem_diagram', None, None, ), # 18
    (19, TType.DOUBLE, 'rock_gas_k2', None, None, ), # 19
    (20, TType.DOUBLE, 'reserve_w1', None, None, ), # 20
    (21, TType.DOUBLE, 'reserve_w2', None, None, ), # 21
    (22, TType.DOUBLE, 'reserve_w3', None, None, ), # 22
    (23, TType.DOUBLE, 'gas_w0', None, None, ), # 23
    (24, TType.DOUBLE, 'gas_wc2', None, None, ), # 24
    (25, TType.DOUBLE, 'pump_k2', None, None, ), # 25
    (26, TType.DOUBLE, 'pump_k3', None, None, ), # 26
    (27, TType.DOUBLE, 'pump_k4', None, None, ), # 27
    (28, TType.DOUBLE, 'pump_k1', None, None, ), # 28
    (29, TType.DOUBLE, 'pump_k', None, None, ), # 29
    (30, TType.DOUBLE, 'pump_wc', None, None, ), # 30
    (31, TType.DOUBLE, 'reserve_gas', None, None, ), # 31
    (32, TType.STRING, 'comment', None, None, ), # 32
    (33, TType.I32, 'protect_layer_condition', None, None, ), # 33
  )

  def __init__(self, id=None, tech_mode_id=None, mine_region_id=None, account_id=None, name=None, province=None, city=None, capacity=None, topo_geo=None, hydr_geo=None, ground_condition=None, qr=None, qa=None, fore_qr=None, fore_qa=None, gas_k1=None, gas_k2=None, stereo_schem_diagram=None, rock_gas_k2=None, reserve_w1=None, reserve_w2=None, reserve_w3=None, gas_w0=None, gas_wc2=None, pump_k2=None, pump_k3=None, pump_k4=None, pump_k1=None, pump_k=None, pump_wc=None, reserve_gas=None, comment=None, protect_layer_condition=None,):
    self.id = id
    self.tech_mode_id = tech_mode_id
    self.mine_region_id = mine_region_id
    self.account_id = account_id
    self.name = name
    self.province = province
    self.city = city
    self.capacity = capacity
    self.topo_geo = topo_geo
    self.hydr_geo = hydr_geo
    self.ground_condition = ground_condition
    self.qr = qr
    self.qa = qa
    self.fore_qr = fore_qr
    self.fore_qa = fore_qa
    self.gas_k1 = gas_k1
    self.gas_k2 = gas_k2
    self.stereo_schem_diagram = stereo_schem_diagram
    self.rock_gas_k2 = rock_gas_k2
    self.reserve_w1 = reserve_w1
    self.reserve_w2 = reserve_w2
    self.reserve_w3 = reserve_w3
    self.gas_w0 = gas_w0
    self.gas_wc2 = gas_wc2
    self.pump_k2 = pump_k2
    self.pump_k3 = pump_k3
    self.pump_k4 = pump_k4
    self.pump_k1 = pump_k1
    self.pump_k = pump_k
    self.pump_wc = pump_wc
    self.reserve_gas = reserve_gas
    self.comment = comment
    self.protect_layer_condition = protect_layer_condition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tech_mode_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.mine_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.account_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.province = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.city = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.capacity = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.topo_geo = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.hydr_geo = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.ground_condition = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.fore_qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.fore_qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.gas_k1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.gas_k2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.stereo_schem_diagram = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.rock_gas_k2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.reserve_w1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.reserve_w2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.reserve_w3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.gas_w0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.DOUBLE:
          self.gas_wc2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.DOUBLE:
          self.pump_k2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.DOUBLE:
          self.pump_k3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.pump_k4 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.pump_k1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.pump_k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.pump_wc = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.reserve_gas = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.protect_layer_condition = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Mine')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.tech_mode_id is not None:
      oprot.writeFieldBegin('tech_mode_id', TType.I32, 2)
      oprot.writeI32(self.tech_mode_id)
      oprot.writeFieldEnd()
    if self.mine_region_id is not None:
      oprot.writeFieldBegin('mine_region_id', TType.I32, 3)
      oprot.writeI32(self.mine_region_id)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 4)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.province is not None:
      oprot.writeFieldBegin('province', TType.STRING, 6)
      oprot.writeString(self.province)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 7)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.capacity is not None:
      oprot.writeFieldBegin('capacity', TType.DOUBLE, 8)
      oprot.writeDouble(self.capacity)
      oprot.writeFieldEnd()
    if self.topo_geo is not None:
      oprot.writeFieldBegin('topo_geo', TType.I32, 9)
      oprot.writeI32(self.topo_geo)
      oprot.writeFieldEnd()
    if self.hydr_geo is not None:
      oprot.writeFieldBegin('hydr_geo', TType.I32, 10)
      oprot.writeI32(self.hydr_geo)
      oprot.writeFieldEnd()
    if self.ground_condition is not None:
      oprot.writeFieldBegin('ground_condition', TType.I32, 11)
      oprot.writeI32(self.ground_condition)
      oprot.writeFieldEnd()
    if self.qr is not None:
      oprot.writeFieldBegin('qr', TType.DOUBLE, 12)
      oprot.writeDouble(self.qr)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 13)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    if self.fore_qr is not None:
      oprot.writeFieldBegin('fore_qr', TType.DOUBLE, 14)
      oprot.writeDouble(self.fore_qr)
      oprot.writeFieldEnd()
    if self.fore_qa is not None:
      oprot.writeFieldBegin('fore_qa', TType.DOUBLE, 15)
      oprot.writeDouble(self.fore_qa)
      oprot.writeFieldEnd()
    if self.gas_k1 is not None:
      oprot.writeFieldBegin('gas_k1', TType.DOUBLE, 16)
      oprot.writeDouble(self.gas_k1)
      oprot.writeFieldEnd()
    if self.gas_k2 is not None:
      oprot.writeFieldBegin('gas_k2', TType.DOUBLE, 17)
      oprot.writeDouble(self.gas_k2)
      oprot.writeFieldEnd()
    if self.stereo_schem_diagram is not None:
      oprot.writeFieldBegin('stereo_schem_diagram', TType.STRING, 18)
      oprot.writeString(self.stereo_schem_diagram)
      oprot.writeFieldEnd()
    if self.rock_gas_k2 is not None:
      oprot.writeFieldBegin('rock_gas_k2', TType.DOUBLE, 19)
      oprot.writeDouble(self.rock_gas_k2)
      oprot.writeFieldEnd()
    if self.reserve_w1 is not None:
      oprot.writeFieldBegin('reserve_w1', TType.DOUBLE, 20)
      oprot.writeDouble(self.reserve_w1)
      oprot.writeFieldEnd()
    if self.reserve_w2 is not None:
      oprot.writeFieldBegin('reserve_w2', TType.DOUBLE, 21)
      oprot.writeDouble(self.reserve_w2)
      oprot.writeFieldEnd()
    if self.reserve_w3 is not None:
      oprot.writeFieldBegin('reserve_w3', TType.DOUBLE, 22)
      oprot.writeDouble(self.reserve_w3)
      oprot.writeFieldEnd()
    if self.gas_w0 is not None:
      oprot.writeFieldBegin('gas_w0', TType.DOUBLE, 23)
      oprot.writeDouble(self.gas_w0)
      oprot.writeFieldEnd()
    if self.gas_wc2 is not None:
      oprot.writeFieldBegin('gas_wc2', TType.DOUBLE, 24)
      oprot.writeDouble(self.gas_wc2)
      oprot.writeFieldEnd()
    if self.pump_k2 is not None:
      oprot.writeFieldBegin('pump_k2', TType.DOUBLE, 25)
      oprot.writeDouble(self.pump_k2)
      oprot.writeFieldEnd()
    if self.pump_k3 is not None:
      oprot.writeFieldBegin('pump_k3', TType.DOUBLE, 26)
      oprot.writeDouble(self.pump_k3)
      oprot.writeFieldEnd()
    if self.pump_k4 is not None:
      oprot.writeFieldBegin('pump_k4', TType.DOUBLE, 27)
      oprot.writeDouble(self.pump_k4)
      oprot.writeFieldEnd()
    if self.pump_k1 is not None:
      oprot.writeFieldBegin('pump_k1', TType.DOUBLE, 28)
      oprot.writeDouble(self.pump_k1)
      oprot.writeFieldEnd()
    if self.pump_k is not None:
      oprot.writeFieldBegin('pump_k', TType.DOUBLE, 29)
      oprot.writeDouble(self.pump_k)
      oprot.writeFieldEnd()
    if self.pump_wc is not None:
      oprot.writeFieldBegin('pump_wc', TType.DOUBLE, 30)
      oprot.writeDouble(self.pump_wc)
      oprot.writeFieldEnd()
    if self.reserve_gas is not None:
      oprot.writeFieldBegin('reserve_gas', TType.DOUBLE, 31)
      oprot.writeDouble(self.reserve_gas)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 32)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.protect_layer_condition is not None:
      oprot.writeFieldBegin('protect_layer_condition', TType.I32, 33)
      oprot.writeI32(self.protect_layer_condition)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.tech_mode_id)
    value = (value * 31) ^ hash(self.mine_region_id)
    value = (value * 31) ^ hash(self.account_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.province)
    value = (value * 31) ^ hash(self.city)
    value = (value * 31) ^ hash(self.capacity)
    value = (value * 31) ^ hash(self.topo_geo)
    value = (value * 31) ^ hash(self.hydr_geo)
    value = (value * 31) ^ hash(self.ground_condition)
    value = (value * 31) ^ hash(self.qr)
    value = (value * 31) ^ hash(self.qa)
    value = (value * 31) ^ hash(self.fore_qr)
    value = (value * 31) ^ hash(self.fore_qa)
    value = (value * 31) ^ hash(self.gas_k1)
    value = (value * 31) ^ hash(self.gas_k2)
    value = (value * 31) ^ hash(self.stereo_schem_diagram)
    value = (value * 31) ^ hash(self.rock_gas_k2)
    value = (value * 31) ^ hash(self.reserve_w1)
    value = (value * 31) ^ hash(self.reserve_w2)
    value = (value * 31) ^ hash(self.reserve_w3)
    value = (value * 31) ^ hash(self.gas_w0)
    value = (value * 31) ^ hash(self.gas_wc2)
    value = (value * 31) ^ hash(self.pump_k2)
    value = (value * 31) ^ hash(self.pump_k3)
    value = (value * 31) ^ hash(self.pump_k4)
    value = (value * 31) ^ hash(self.pump_k1)
    value = (value * 31) ^ hash(self.pump_k)
    value = (value * 31) ^ hash(self.pump_wc)
    value = (value * 31) ^ hash(self.reserve_gas)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.protect_layer_condition)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MineBase:
  """
  Attributes:
   - id
   - name
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'comment', None, None, ), # 3
  )

  def __init__(self, id=None, name=None, comment=None,):
    self.id = id
    self.name = name
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MineBase')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 3)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MineRegion:
  """
  Attributes:
   - id
   - mine_base_id
   - name
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'mine_base_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, id=None, mine_base_id=None, name=None, comment=None,):
    self.id = id
    self.mine_base_id = mine_base_id
    self.name = name
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mine_base_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MineRegion')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.mine_base_id is not None:
      oprot.writeFieldBegin('mine_base_id', TType.I32, 2)
      oprot.writeI32(self.mine_base_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.mine_base_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PoreFlow:
  """
  Attributes:
   - id
   - name
   - t
   - a0
   - d
   - d1
   - m
   - k
   - delta_t
   - x
   - p_test
   - p_cur
   - b
   - pt
   - delta_p
   - dh
   - q_hun
   - q_chun
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 't', None, None, ), # 3
    (4, TType.DOUBLE, 'a0', None, None, ), # 4
    (5, TType.DOUBLE, 'd', None, None, ), # 5
    (6, TType.DOUBLE, 'd1', None, None, ), # 6
    (7, TType.DOUBLE, 'm', None, None, ), # 7
    (8, TType.DOUBLE, 'k', None, None, ), # 8
    (9, TType.DOUBLE, 'delta_t', None, None, ), # 9
    (10, TType.DOUBLE, 'x', None, None, ), # 10
    (11, TType.DOUBLE, 'p_test', None, None, ), # 11
    (12, TType.DOUBLE, 'p_cur', None, None, ), # 12
    (13, TType.DOUBLE, 'b', None, None, ), # 13
    (14, TType.DOUBLE, 'pt', None, None, ), # 14
    (15, TType.DOUBLE, 'delta_p', None, None, ), # 15
    (16, TType.DOUBLE, 'dh', None, None, ), # 16
    (17, TType.DOUBLE, 'q_hun', None, None, ), # 17
    (18, TType.DOUBLE, 'q_chun', None, None, ), # 18
  )

  def __init__(self, id=None, name=None, t=None, a0=None, d=None, d1=None, m=None, k=None, delta_t=None, x=None, p_test=None, p_cur=None, b=None, pt=None, delta_p=None, dh=None, q_hun=None, q_chun=None,):
    self.id = id
    self.name = name
    self.t = t
    self.a0 = a0
    self.d = d
    self.d1 = d1
    self.m = m
    self.k = k
    self.delta_t = delta_t
    self.x = x
    self.p_test = p_test
    self.p_cur = p_cur
    self.b = b
    self.pt = pt
    self.delta_p = delta_p
    self.dh = dh
    self.q_hun = q_hun
    self.q_chun = q_chun

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.t = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.a0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.d = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.d1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.m = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.k = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.delta_t = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.x = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.p_test = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.p_cur = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.b = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.pt = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.delta_p = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.dh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.q_hun = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.q_chun = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PoreFlow')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.t is not None:
      oprot.writeFieldBegin('t', TType.DOUBLE, 3)
      oprot.writeDouble(self.t)
      oprot.writeFieldEnd()
    if self.a0 is not None:
      oprot.writeFieldBegin('a0', TType.DOUBLE, 4)
      oprot.writeDouble(self.a0)
      oprot.writeFieldEnd()
    if self.d is not None:
      oprot.writeFieldBegin('d', TType.DOUBLE, 5)
      oprot.writeDouble(self.d)
      oprot.writeFieldEnd()
    if self.d1 is not None:
      oprot.writeFieldBegin('d1', TType.DOUBLE, 6)
      oprot.writeDouble(self.d1)
      oprot.writeFieldEnd()
    if self.m is not None:
      oprot.writeFieldBegin('m', TType.DOUBLE, 7)
      oprot.writeDouble(self.m)
      oprot.writeFieldEnd()
    if self.k is not None:
      oprot.writeFieldBegin('k', TType.DOUBLE, 8)
      oprot.writeDouble(self.k)
      oprot.writeFieldEnd()
    if self.delta_t is not None:
      oprot.writeFieldBegin('delta_t', TType.DOUBLE, 9)
      oprot.writeDouble(self.delta_t)
      oprot.writeFieldEnd()
    if self.x is not None:
      oprot.writeFieldBegin('x', TType.DOUBLE, 10)
      oprot.writeDouble(self.x)
      oprot.writeFieldEnd()
    if self.p_test is not None:
      oprot.writeFieldBegin('p_test', TType.DOUBLE, 11)
      oprot.writeDouble(self.p_test)
      oprot.writeFieldEnd()
    if self.p_cur is not None:
      oprot.writeFieldBegin('p_cur', TType.DOUBLE, 12)
      oprot.writeDouble(self.p_cur)
      oprot.writeFieldEnd()
    if self.b is not None:
      oprot.writeFieldBegin('b', TType.DOUBLE, 13)
      oprot.writeDouble(self.b)
      oprot.writeFieldEnd()
    if self.pt is not None:
      oprot.writeFieldBegin('pt', TType.DOUBLE, 14)
      oprot.writeDouble(self.pt)
      oprot.writeFieldEnd()
    if self.delta_p is not None:
      oprot.writeFieldBegin('delta_p', TType.DOUBLE, 15)
      oprot.writeDouble(self.delta_p)
      oprot.writeFieldEnd()
    if self.dh is not None:
      oprot.writeFieldBegin('dh', TType.DOUBLE, 16)
      oprot.writeDouble(self.dh)
      oprot.writeFieldEnd()
    if self.q_hun is not None:
      oprot.writeFieldBegin('q_hun', TType.DOUBLE, 17)
      oprot.writeDouble(self.q_hun)
      oprot.writeFieldEnd()
    if self.q_chun is not None:
      oprot.writeFieldBegin('q_chun', TType.DOUBLE, 18)
      oprot.writeDouble(self.q_chun)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.t)
    value = (value * 31) ^ hash(self.a0)
    value = (value * 31) ^ hash(self.d)
    value = (value * 31) ^ hash(self.d1)
    value = (value * 31) ^ hash(self.m)
    value = (value * 31) ^ hash(self.k)
    value = (value * 31) ^ hash(self.delta_t)
    value = (value * 31) ^ hash(self.x)
    value = (value * 31) ^ hash(self.p_test)
    value = (value * 31) ^ hash(self.p_cur)
    value = (value * 31) ^ hash(self.b)
    value = (value * 31) ^ hash(self.pt)
    value = (value * 31) ^ hash(self.delta_p)
    value = (value * 31) ^ hash(self.dh)
    value = (value * 31) ^ hash(self.q_hun)
    value = (value * 31) ^ hash(self.q_chun)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PoreSize:
  """
  Attributes:
   - id
   - name
   - q
   - v
   - d
   - p
   - sigma
   - delta
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'q', None, None, ), # 3
    (4, TType.DOUBLE, 'v', None, None, ), # 4
    (5, TType.DOUBLE, 'd', None, None, ), # 5
    (6, TType.DOUBLE, 'p', None, None, ), # 6
    (7, TType.DOUBLE, 'sigma', None, None, ), # 7
    (8, TType.DOUBLE, 'delta', None, None, ), # 8
    (9, TType.STRING, 'comment', None, None, ), # 9
  )

  def __init__(self, id=None, name=None, q=None, v=None, d=None, p=None, sigma=None, delta=None, comment=None,):
    self.id = id
    self.name = name
    self.q = q
    self.v = v
    self.d = d
    self.p = p
    self.sigma = sigma
    self.delta = delta
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.q = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.v = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.d = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.p = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.sigma = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.delta = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PoreSize')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.q is not None:
      oprot.writeFieldBegin('q', TType.DOUBLE, 3)
      oprot.writeDouble(self.q)
      oprot.writeFieldEnd()
    if self.v is not None:
      oprot.writeFieldBegin('v', TType.DOUBLE, 4)
      oprot.writeDouble(self.v)
      oprot.writeFieldEnd()
    if self.d is not None:
      oprot.writeFieldBegin('d', TType.DOUBLE, 5)
      oprot.writeDouble(self.d)
      oprot.writeFieldEnd()
    if self.p is not None:
      oprot.writeFieldBegin('p', TType.DOUBLE, 6)
      oprot.writeDouble(self.p)
      oprot.writeFieldEnd()
    if self.sigma is not None:
      oprot.writeFieldBegin('sigma', TType.DOUBLE, 7)
      oprot.writeDouble(self.sigma)
      oprot.writeFieldEnd()
    if self.delta is not None:
      oprot.writeFieldBegin('delta', TType.DOUBLE, 8)
      oprot.writeDouble(self.delta)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 9)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.q)
    value = (value * 31) ^ hash(self.v)
    value = (value * 31) ^ hash(self.d)
    value = (value * 31) ^ hash(self.p)
    value = (value * 31) ^ hash(self.sigma)
    value = (value * 31) ^ hash(self.delta)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ResAbundance:
  """
  Attributes:
   - id
   - name
   - min_abundance
   - max_abundance
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'min_abundance', None, None, ), # 3
    (4, TType.DOUBLE, 'max_abundance', None, None, ), # 4
  )

  def __init__(self, id=None, name=None, min_abundance=None, max_abundance=None,):
    self.id = id
    self.name = name
    self.min_abundance = min_abundance
    self.max_abundance = max_abundance

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.min_abundance = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.max_abundance = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ResAbundance')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.min_abundance is not None:
      oprot.writeFieldBegin('min_abundance', TType.DOUBLE, 3)
      oprot.writeDouble(self.min_abundance)
      oprot.writeFieldEnd()
    if self.max_abundance is not None:
      oprot.writeFieldBegin('max_abundance', TType.DOUBLE, 4)
      oprot.writeDouble(self.max_abundance)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.min_abundance)
    value = (value * 31) ^ hash(self.max_abundance)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rock:
  """
  Attributes:
   - id
   - name
   - a
   - b
   - c
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'a', None, None, ), # 3
    (4, TType.DOUBLE, 'b', None, None, ), # 4
    (5, TType.DOUBLE, 'c', None, None, ), # 5
    (6, TType.STRING, 'comment', None, None, ), # 6
  )

  def __init__(self, id=None, name=None, a=None, b=None, c=None, comment=None,):
    self.id = id
    self.name = name
    self.a = a
    self.b = b
    self.c = c
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.a = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.b = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.c = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rock')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.a is not None:
      oprot.writeFieldBegin('a', TType.DOUBLE, 3)
      oprot.writeDouble(self.a)
      oprot.writeFieldEnd()
    if self.b is not None:
      oprot.writeFieldBegin('b', TType.DOUBLE, 4)
      oprot.writeDouble(self.b)
      oprot.writeFieldEnd()
    if self.c is not None:
      oprot.writeFieldBegin('c', TType.DOUBLE, 5)
      oprot.writeDouble(self.c)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 6)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.a)
    value = (value * 31) ^ hash(self.b)
    value = (value * 31) ^ hash(self.c)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SysInfo:
  """
  Attributes:
   - id
   - account_id
   - last_login_time
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'account_id', None, None, ), # 2
    (3, TType.STRING, 'last_login_time', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, id=None, account_id=None, last_login_time=None, comment=None,):
    self.id = id
    self.account_id = account_id
    self.last_login_time = last_login_time
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.account_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.last_login_time = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SysInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.account_id is not None:
      oprot.writeFieldBegin('account_id', TType.I32, 2)
      oprot.writeI32(self.account_id)
      oprot.writeFieldEnd()
    if self.last_login_time is not None:
      oprot.writeFieldBegin('last_login_time', TType.STRING, 3)
      oprot.writeString(self.last_login_time)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.account_id)
    value = (value * 31) ^ hash(self.last_login_time)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechMode:
  """
  Attributes:
   - id
   - mine_region_id
   - name
   - mode_type
   - c1
   - c2
   - c3
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'mine_region_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'mode_type', None, None, ), # 4
    (5, TType.I32, 'c1', None, None, ), # 5
    (6, TType.I32, 'c2', None, None, ), # 6
    (7, TType.I32, 'c3', None, None, ), # 7
    (8, TType.STRING, 'comment', None, None, ), # 8
  )

  def __init__(self, id=None, mine_region_id=None, name=None, mode_type=None, c1=None, c2=None, c3=None, comment=None,):
    self.id = id
    self.mine_region_id = mine_region_id
    self.name = name
    self.mode_type = mode_type
    self.c1 = c1
    self.c2 = c2
    self.c3 = c3
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mine_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.mode_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.c1 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.c2 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.c3 = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechMode')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.mine_region_id is not None:
      oprot.writeFieldBegin('mine_region_id', TType.I32, 2)
      oprot.writeI32(self.mine_region_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.mode_type is not None:
      oprot.writeFieldBegin('mode_type', TType.I32, 4)
      oprot.writeI32(self.mode_type)
      oprot.writeFieldEnd()
    if self.c1 is not None:
      oprot.writeFieldBegin('c1', TType.I32, 5)
      oprot.writeI32(self.c1)
      oprot.writeFieldEnd()
    if self.c2 is not None:
      oprot.writeFieldBegin('c2', TType.I32, 6)
      oprot.writeI32(self.c2)
      oprot.writeFieldEnd()
    if self.c3 is not None:
      oprot.writeFieldBegin('c3', TType.I32, 7)
      oprot.writeI32(self.c3)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 8)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.mine_region_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.mode_type)
    value = (value * 31) ^ hash(self.c1)
    value = (value * 31) ^ hash(self.c2)
    value = (value * 31) ^ hash(self.c3)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Technology:
  """
  Attributes:
   - id
   - mine_region_id
   - name
   - iskey
   - doc
   - video
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'mine_region_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'iskey', None, None, ), # 4
    (5, TType.STRING, 'doc', None, None, ), # 5
    (6, TType.STRING, 'video', None, None, ), # 6
    (7, TType.STRING, 'comment', None, None, ), # 7
  )

  def __init__(self, id=None, mine_region_id=None, name=None, iskey=None, doc=None, video=None, comment=None,):
    self.id = id
    self.mine_region_id = mine_region_id
    self.name = name
    self.iskey = iskey
    self.doc = doc
    self.video = video
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.mine_region_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.iskey = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.doc = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.video = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Technology')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.mine_region_id is not None:
      oprot.writeFieldBegin('mine_region_id', TType.I32, 2)
      oprot.writeI32(self.mine_region_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.iskey is not None:
      oprot.writeFieldBegin('iskey', TType.I32, 4)
      oprot.writeI32(self.iskey)
      oprot.writeFieldEnd()
    if self.doc is not None:
      oprot.writeFieldBegin('doc', TType.STRING, 5)
      oprot.writeString(self.doc)
      oprot.writeFieldEnd()
    if self.video is not None:
      oprot.writeFieldBegin('video', TType.STRING, 6)
      oprot.writeString(self.video)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 7)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.mine_region_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.iskey)
    value = (value * 31) ^ hash(self.doc)
    value = (value * 31) ^ hash(self.video)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TopoGeo:
  """
  Attributes:
   - id
   - name
   - feature
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'feature', None, None, ), # 3
    (4, TType.STRING, 'comment', None, None, ), # 4
  )

  def __init__(self, id=None, name=None, feature=None, comment=None,):
    self.id = id
    self.name = name
    self.feature = feature
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.feature = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TopoGeo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.feature is not None:
      oprot.writeFieldBegin('feature', TType.STRING, 3)
      oprot.writeString(self.feature)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 4)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.feature)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tunnel:
  """
  Attributes:
   - id
   - name
   - b
   - h
   - l
   - s
   - d
   - wh
   - v
   - q3
   - q0
   - comment
   - tunnel_type
   - top_side
   - bottom_side
   - left_side
   - right_side
   - x1
   - y1
   - z1
   - x2
   - y2
   - z2
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.DOUBLE, 'b', None, None, ), # 3
    (4, TType.DOUBLE, 'h', None, None, ), # 4
    (5, TType.DOUBLE, 'l', None, None, ), # 5
    (6, TType.DOUBLE, 's', None, None, ), # 6
    (7, TType.DOUBLE, 'd', None, None, ), # 7
    (8, TType.DOUBLE, 'wh', None, None, ), # 8
    (9, TType.DOUBLE, 'v', None, None, ), # 9
    (10, TType.DOUBLE, 'q3', None, None, ), # 10
    (11, TType.DOUBLE, 'q0', None, None, ), # 11
    (12, TType.STRING, 'comment', None, None, ), # 12
    (13, TType.I32, 'tunnel_type', None, None, ), # 13
    (14, TType.DOUBLE, 'top_side', None, None, ), # 14
    (15, TType.DOUBLE, 'bottom_side', None, None, ), # 15
    (16, TType.DOUBLE, 'left_side', None, None, ), # 16
    (17, TType.DOUBLE, 'right_side', None, None, ), # 17
    (18, TType.DOUBLE, 'x1', None, None, ), # 18
    (19, TType.DOUBLE, 'y1', None, None, ), # 19
    (20, TType.DOUBLE, 'z1', None, None, ), # 20
    (21, TType.DOUBLE, 'x2', None, None, ), # 21
    (22, TType.DOUBLE, 'y2', None, None, ), # 22
    (23, TType.DOUBLE, 'z2', None, None, ), # 23
  )

  def __init__(self, id=None, name=None, b=None, h=None, l=None, s=None, d=None, wh=None, v=None, q3=None, q0=None, comment=None, tunnel_type=None, top_side=None, bottom_side=None, left_side=None, right_side=None, x1=None, y1=None, z1=None, x2=None, y2=None, z2=None,):
    self.id = id
    self.name = name
    self.b = b
    self.h = h
    self.l = l
    self.s = s
    self.d = d
    self.wh = wh
    self.v = v
    self.q3 = q3
    self.q0 = q0
    self.comment = comment
    self.tunnel_type = tunnel_type
    self.top_side = top_side
    self.bottom_side = bottom_side
    self.left_side = left_side
    self.right_side = right_side
    self.x1 = x1
    self.y1 = y1
    self.z1 = z1
    self.x2 = x2
    self.y2 = y2
    self.z2 = z2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.b = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.h = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.l = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.s = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.d = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.wh = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.v = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.q3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.q0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.tunnel_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.top_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.bottom_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.left_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.right_side = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.x1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.y1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.z1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.x2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.y2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.z2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tunnel')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.b is not None:
      oprot.writeFieldBegin('b', TType.DOUBLE, 3)
      oprot.writeDouble(self.b)
      oprot.writeFieldEnd()
    if self.h is not None:
      oprot.writeFieldBegin('h', TType.DOUBLE, 4)
      oprot.writeDouble(self.h)
      oprot.writeFieldEnd()
    if self.l is not None:
      oprot.writeFieldBegin('l', TType.DOUBLE, 5)
      oprot.writeDouble(self.l)
      oprot.writeFieldEnd()
    if self.s is not None:
      oprot.writeFieldBegin('s', TType.DOUBLE, 6)
      oprot.writeDouble(self.s)
      oprot.writeFieldEnd()
    if self.d is not None:
      oprot.writeFieldBegin('d', TType.DOUBLE, 7)
      oprot.writeDouble(self.d)
      oprot.writeFieldEnd()
    if self.wh is not None:
      oprot.writeFieldBegin('wh', TType.DOUBLE, 8)
      oprot.writeDouble(self.wh)
      oprot.writeFieldEnd()
    if self.v is not None:
      oprot.writeFieldBegin('v', TType.DOUBLE, 9)
      oprot.writeDouble(self.v)
      oprot.writeFieldEnd()
    if self.q3 is not None:
      oprot.writeFieldBegin('q3', TType.DOUBLE, 10)
      oprot.writeDouble(self.q3)
      oprot.writeFieldEnd()
    if self.q0 is not None:
      oprot.writeFieldBegin('q0', TType.DOUBLE, 11)
      oprot.writeDouble(self.q0)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 12)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    if self.tunnel_type is not None:
      oprot.writeFieldBegin('tunnel_type', TType.I32, 13)
      oprot.writeI32(self.tunnel_type)
      oprot.writeFieldEnd()
    if self.top_side is not None:
      oprot.writeFieldBegin('top_side', TType.DOUBLE, 14)
      oprot.writeDouble(self.top_side)
      oprot.writeFieldEnd()
    if self.bottom_side is not None:
      oprot.writeFieldBegin('bottom_side', TType.DOUBLE, 15)
      oprot.writeDouble(self.bottom_side)
      oprot.writeFieldEnd()
    if self.left_side is not None:
      oprot.writeFieldBegin('left_side', TType.DOUBLE, 16)
      oprot.writeDouble(self.left_side)
      oprot.writeFieldEnd()
    if self.right_side is not None:
      oprot.writeFieldBegin('right_side', TType.DOUBLE, 17)
      oprot.writeDouble(self.right_side)
      oprot.writeFieldEnd()
    if self.x1 is not None:
      oprot.writeFieldBegin('x1', TType.DOUBLE, 18)
      oprot.writeDouble(self.x1)
      oprot.writeFieldEnd()
    if self.y1 is not None:
      oprot.writeFieldBegin('y1', TType.DOUBLE, 19)
      oprot.writeDouble(self.y1)
      oprot.writeFieldEnd()
    if self.z1 is not None:
      oprot.writeFieldBegin('z1', TType.DOUBLE, 20)
      oprot.writeDouble(self.z1)
      oprot.writeFieldEnd()
    if self.x2 is not None:
      oprot.writeFieldBegin('x2', TType.DOUBLE, 21)
      oprot.writeDouble(self.x2)
      oprot.writeFieldEnd()
    if self.y2 is not None:
      oprot.writeFieldBegin('y2', TType.DOUBLE, 22)
      oprot.writeDouble(self.y2)
      oprot.writeFieldEnd()
    if self.z2 is not None:
      oprot.writeFieldBegin('z2', TType.DOUBLE, 23)
      oprot.writeDouble(self.z2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.b)
    value = (value * 31) ^ hash(self.h)
    value = (value * 31) ^ hash(self.l)
    value = (value * 31) ^ hash(self.s)
    value = (value * 31) ^ hash(self.d)
    value = (value * 31) ^ hash(self.wh)
    value = (value * 31) ^ hash(self.v)
    value = (value * 31) ^ hash(self.q3)
    value = (value * 31) ^ hash(self.q0)
    value = (value * 31) ^ hash(self.comment)
    value = (value * 31) ^ hash(self.tunnel_type)
    value = (value * 31) ^ hash(self.top_side)
    value = (value * 31) ^ hash(self.bottom_side)
    value = (value * 31) ^ hash(self.left_side)
    value = (value * 31) ^ hash(self.right_side)
    value = (value * 31) ^ hash(self.x1)
    value = (value * 31) ^ hash(self.y1)
    value = (value * 31) ^ hash(self.z1)
    value = (value * 31) ^ hash(self.x2)
    value = (value * 31) ^ hash(self.y2)
    value = (value * 31) ^ hash(self.z2)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkArea:
  """
  Attributes:
   - id
   - coal_id
   - name
   - mode
   - a
   - qr
   - qa
   - fore_qr
   - fore_qa
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'coal_id', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I32, 'mode', None, None, ), # 4
    (5, TType.DOUBLE, 'a', None, None, ), # 5
    (6, TType.DOUBLE, 'qr', None, None, ), # 6
    (7, TType.DOUBLE, 'qa', None, None, ), # 7
    (8, TType.DOUBLE, 'fore_qr', None, None, ), # 8
    (9, TType.DOUBLE, 'fore_qa', None, None, ), # 9
    (10, TType.STRING, 'comment', None, None, ), # 10
  )

  def __init__(self, id=None, coal_id=None, name=None, mode=None, a=None, qr=None, qa=None, fore_qr=None, fore_qa=None, comment=None,):
    self.id = id
    self.coal_id = coal_id
    self.name = name
    self.mode = mode
    self.a = a
    self.qr = qr
    self.qa = qa
    self.fore_qr = fore_qr
    self.fore_qa = fore_qa
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.coal_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.mode = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.a = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.fore_qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.fore_qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkArea')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.coal_id is not None:
      oprot.writeFieldBegin('coal_id', TType.I32, 2)
      oprot.writeI32(self.coal_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 4)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.a is not None:
      oprot.writeFieldBegin('a', TType.DOUBLE, 5)
      oprot.writeDouble(self.a)
      oprot.writeFieldEnd()
    if self.qr is not None:
      oprot.writeFieldBegin('qr', TType.DOUBLE, 6)
      oprot.writeDouble(self.qr)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 7)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    if self.fore_qr is not None:
      oprot.writeFieldBegin('fore_qr', TType.DOUBLE, 8)
      oprot.writeDouble(self.fore_qr)
      oprot.writeFieldEnd()
    if self.fore_qa is not None:
      oprot.writeFieldBegin('fore_qa', TType.DOUBLE, 9)
      oprot.writeDouble(self.fore_qa)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 10)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.coal_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.mode)
    value = (value * 31) ^ hash(self.a)
    value = (value * 31) ^ hash(self.qr)
    value = (value * 31) ^ hash(self.qa)
    value = (value * 31) ^ hash(self.fore_qr)
    value = (value * 31) ^ hash(self.fore_qa)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkSurf:
  """
  Attributes:
   - id
   - work_area_id
   - tunnel_id
   - name
   - a
   - qr
   - qa
   - fore_qr
   - fore_qa
   - l1
   - l2
   - layerable
   - k1
   - k2
   - k3
   - kf
   - method
   - last_t
   - qr1
   - qr2
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'work_area_id', None, None, ), # 2
    (3, TType.I32, 'tunnel_id', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.DOUBLE, 'a', None, None, ), # 5
    (6, TType.DOUBLE, 'qr', None, None, ), # 6
    (7, TType.DOUBLE, 'qa', None, None, ), # 7
    (8, TType.DOUBLE, 'fore_qr', None, None, ), # 8
    (9, TType.DOUBLE, 'fore_qa', None, None, ), # 9
    (10, TType.DOUBLE, 'l1', None, None, ), # 10
    (11, TType.DOUBLE, 'l2', None, None, ), # 11
    (12, TType.I32, 'layerable', None, None, ), # 12
    (13, TType.DOUBLE, 'k1', None, None, ), # 13
    (14, TType.DOUBLE, 'k2', None, None, ), # 14
    (15, TType.DOUBLE, 'k3', None, None, ), # 15
    (16, TType.DOUBLE, 'kf', None, None, ), # 16
    (17, TType.I32, 'method', None, None, ), # 17
    (18, TType.DOUBLE, 'last_t', None, None, ), # 18
    (19, TType.DOUBLE, 'qr1', None, None, ), # 19
    (20, TType.DOUBLE, 'qr2', None, None, ), # 20
    (21, TType.STRING, 'comment', None, None, ), # 21
  )

  def __init__(self, id=None, work_area_id=None, tunnel_id=None, name=None, a=None, qr=None, qa=None, fore_qr=None, fore_qa=None, l1=None, l2=None, layerable=None, k1=None, k2=None, k3=None, kf=None, method=None, last_t=None, qr1=None, qr2=None, comment=None,):
    self.id = id
    self.work_area_id = work_area_id
    self.tunnel_id = tunnel_id
    self.name = name
    self.a = a
    self.qr = qr
    self.qa = qa
    self.fore_qr = fore_qr
    self.fore_qa = fore_qa
    self.l1 = l1
    self.l2 = l2
    self.layerable = layerable
    self.k1 = k1
    self.k2 = k2
    self.k3 = k3
    self.kf = kf
    self.method = method
    self.last_t = last_t
    self.qr1 = qr1
    self.qr2 = qr2
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.work_area_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tunnel_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.a = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.fore_qr = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.fore_qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.l1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.l2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.layerable = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.k1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.k2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.k3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.kf = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.method = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.last_t = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.qr1 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.DOUBLE:
          self.qr2 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.STRING:
          self.comment = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkSurf')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.work_area_id is not None:
      oprot.writeFieldBegin('work_area_id', TType.I32, 2)
      oprot.writeI32(self.work_area_id)
      oprot.writeFieldEnd()
    if self.tunnel_id is not None:
      oprot.writeFieldBegin('tunnel_id', TType.I32, 3)
      oprot.writeI32(self.tunnel_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.a is not None:
      oprot.writeFieldBegin('a', TType.DOUBLE, 5)
      oprot.writeDouble(self.a)
      oprot.writeFieldEnd()
    if self.qr is not None:
      oprot.writeFieldBegin('qr', TType.DOUBLE, 6)
      oprot.writeDouble(self.qr)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 7)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    if self.fore_qr is not None:
      oprot.writeFieldBegin('fore_qr', TType.DOUBLE, 8)
      oprot.writeDouble(self.fore_qr)
      oprot.writeFieldEnd()
    if self.fore_qa is not None:
      oprot.writeFieldBegin('fore_qa', TType.DOUBLE, 9)
      oprot.writeDouble(self.fore_qa)
      oprot.writeFieldEnd()
    if self.l1 is not None:
      oprot.writeFieldBegin('l1', TType.DOUBLE, 10)
      oprot.writeDouble(self.l1)
      oprot.writeFieldEnd()
    if self.l2 is not None:
      oprot.writeFieldBegin('l2', TType.DOUBLE, 11)
      oprot.writeDouble(self.l2)
      oprot.writeFieldEnd()
    if self.layerable is not None:
      oprot.writeFieldBegin('layerable', TType.I32, 12)
      oprot.writeI32(self.layerable)
      oprot.writeFieldEnd()
    if self.k1 is not None:
      oprot.writeFieldBegin('k1', TType.DOUBLE, 13)
      oprot.writeDouble(self.k1)
      oprot.writeFieldEnd()
    if self.k2 is not None:
      oprot.writeFieldBegin('k2', TType.DOUBLE, 14)
      oprot.writeDouble(self.k2)
      oprot.writeFieldEnd()
    if self.k3 is not None:
      oprot.writeFieldBegin('k3', TType.DOUBLE, 15)
      oprot.writeDouble(self.k3)
      oprot.writeFieldEnd()
    if self.kf is not None:
      oprot.writeFieldBegin('kf', TType.DOUBLE, 16)
      oprot.writeDouble(self.kf)
      oprot.writeFieldEnd()
    if self.method is not None:
      oprot.writeFieldBegin('method', TType.I32, 17)
      oprot.writeI32(self.method)
      oprot.writeFieldEnd()
    if self.last_t is not None:
      oprot.writeFieldBegin('last_t', TType.DOUBLE, 18)
      oprot.writeDouble(self.last_t)
      oprot.writeFieldEnd()
    if self.qr1 is not None:
      oprot.writeFieldBegin('qr1', TType.DOUBLE, 19)
      oprot.writeDouble(self.qr1)
      oprot.writeFieldEnd()
    if self.qr2 is not None:
      oprot.writeFieldBegin('qr2', TType.DOUBLE, 20)
      oprot.writeDouble(self.qr2)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRING, 21)
      oprot.writeString(self.comment)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.work_area_id)
    value = (value * 31) ^ hash(self.tunnel_id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.a)
    value = (value * 31) ^ hash(self.qr)
    value = (value * 31) ^ hash(self.qa)
    value = (value * 31) ^ hash(self.fore_qr)
    value = (value * 31) ^ hash(self.fore_qa)
    value = (value * 31) ^ hash(self.l1)
    value = (value * 31) ^ hash(self.l2)
    value = (value * 31) ^ hash(self.layerable)
    value = (value * 31) ^ hash(self.k1)
    value = (value * 31) ^ hash(self.k2)
    value = (value * 31) ^ hash(self.k3)
    value = (value * 31) ^ hash(self.kf)
    value = (value * 31) ^ hash(self.method)
    value = (value * 31) ^ hash(self.last_t)
    value = (value * 31) ^ hash(self.qr1)
    value = (value * 31) ^ hash(self.qr2)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DrillingSurfGasFlowResult:
  """
  Attributes:
   - q0
   - q3
   - q4
   - qa
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'q0', None, None, ), # 1
    (2, TType.DOUBLE, 'q3', None, None, ), # 2
    (3, TType.DOUBLE, 'q4', None, None, ), # 3
    (4, TType.DOUBLE, 'qa', None, None, ), # 4
  )

  def __init__(self, q0=None, q3=None, q4=None, qa=None,):
    self.q0 = q0
    self.q3 = q3
    self.q4 = q4
    self.qa = qa

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.q0 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.q3 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.q4 = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.qa = iprot.readDouble()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DrillingSurfGasFlowResult')
    if self.q0 is not None:
      oprot.writeFieldBegin('q0', TType.DOUBLE, 1)
      oprot.writeDouble(self.q0)
      oprot.writeFieldEnd()
    if self.q3 is not None:
      oprot.writeFieldBegin('q3', TType.DOUBLE, 2)
      oprot.writeDouble(self.q3)
      oprot.writeFieldEnd()
    if self.q4 is not None:
      oprot.writeFieldBegin('q4', TType.DOUBLE, 3)
      oprot.writeDouble(self.q4)
      oprot.writeFieldEnd()
    if self.qa is not None:
      oprot.writeFieldBegin('qa', TType.DOUBLE, 4)
      oprot.writeDouble(self.qa)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.q0)
    value = (value * 31) ^ hash(self.q3)
    value = (value * 31) ^ hash(self.q4)
    value = (value * 31) ^ hash(self.qa)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
