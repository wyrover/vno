<?php
namespace cbm;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class Account {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $username = null;
  /**
   * @var string
   */
  public $password = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'username',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'password',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['username'])) {
        $this->username = $vals['username'];
      }
      if (isset($vals['password'])) {
        $this->password = $vals['password'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'Account';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->username);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->password);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Account');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->username !== null) {
      $xfer += $output->writeFieldBegin('username', TType::STRING, 2);
      $xfer += $output->writeString($this->username);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->password !== null) {
      $xfer += $output->writeFieldBegin('password', TType::STRING, 3);
      $xfer += $output->writeString($this->password);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class AdjLayer {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_surf_id = null;
  /**
   * @var int
   */
  public $coal_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $hp = null;
  /**
   * @var int
   */
  public $in_cz = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_surf_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'coal_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'hp',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'in_cz',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_surf_id'])) {
        $this->work_surf_id = $vals['work_surf_id'];
      }
      if (isset($vals['coal_id'])) {
        $this->coal_id = $vals['coal_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['hp'])) {
        $this->hp = $vals['hp'];
      }
      if (isset($vals['in_cz'])) {
        $this->in_cz = $vals['in_cz'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'AdjLayer';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_surf_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coal_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->in_cz);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdjLayer');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_surf_id !== null) {
      $xfer += $output->writeFieldBegin('work_surf_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_surf_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coal_id !== null) {
      $xfer += $output->writeFieldBegin('coal_id', TType::I32, 3);
      $xfer += $output->writeI32($this->coal_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 5);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hp !== null) {
      $xfer += $output->writeFieldBegin('hp', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->hp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->in_cz !== null) {
      $xfer += $output->writeFieldBegin('in_cz', TType::I32, 8);
      $xfer += $output->writeI32($this->in_cz);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 9);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Coal {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $mine_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $minable = null;
  /**
   * @var double
   */
  public $thick = null;
  /**
   * @var double
   */
  public $hw = null;
  /**
   * @var double
   */
  public $qa = null;
  /**
   * @var double
   */
  public $qr = null;
  /**
   * @var double
   */
  public $fore_qr = null;
  /**
   * @var double
   */
  public $fore_qa = null;
  /**
   * @var int
   */
  public $rank = null;
  /**
   * @var int
   */
  public $quality = null;
  /**
   * @var double
   */
  public $pressure = null;
  /**
   * @var double
   */
  public $gas_content = null;
  /**
   * @var double
   */
  public $f_value = null;
  /**
   * @var int
   */
  public $res_abundance = null;
  /**
   * @var int
   */
  public $complexity = null;
  /**
   * @var double
   */
  public $mine_index = null;
  /**
   * @var double
   */
  public $var_coeff = null;
  /**
   * @var int
   */
  public $stability = null;
  /**
   * @var double
   */
  public $dip_angle = null;
  /**
   * @var double
   */
  public $czh = null;
  /**
   * @var double
   */
  public $czk = null;
  /**
   * @var double
   */
  public $czw = null;
  /**
   * @var double
   */
  public $hw_sum = null;
  /**
   * @var int
   */
  public $rock = null;
  /**
   * @var double
   */
  public $hhh = null;
  /**
   * @var double
   */
  public $layer_gap = null;
  /**
   * @var double
   */
  public $influence_factor = null;
  /**
   * @var double
   */
  public $res_a1 = null;
  /**
   * @var double
   */
  public $gas_x1 = null;
  /**
   * @var double
   */
  public $res_a2 = null;
  /**
   * @var double
   */
  public $gas_x2 = null;
  /**
   * @var double
   */
  public $pump_wc = null;
  /**
   * @var double
   */
  public $pump_k = null;
  /**
   * @var double
   */
  public $pump_k2 = null;
  /**
   * @var double
   */
  public $pump_k3 = null;
  /**
   * @var double
   */
  public $pump_k4 = null;
  /**
   * @var double
   */
  public $pump_k1 = null;
  /**
   * @var string
   */
  public $pore_datas = null;
  /**
   * @var double
   */
  public $rho = null;
  /**
   * @var double
   */
  public $vr = null;
  /**
   * @var double
   */
  public $gas_w0 = null;
  /**
   * @var double
   */
  public $gas_wc2 = null;
  /**
   * @var double
   */
  public $gas_wc3 = null;
  /**
   * @var double
   */
  public $gas_eta = null;
  /**
   * @var double
   */
  public $q0 = null;
  /**
   * @var int
   */
  public $eval_method = null;
  /**
   * @var double
   */
  public $q0_alpha = null;
  /**
   * @var double
   */
  public $qt_alpha = null;
  /**
   * @var double
   */
  public $t_alpha = null;
  /**
   * @var double
   */
  public $q_lambda = null;
  /**
   * @var double
   */
  public $r_lambda = null;
  /**
   * @var double
   */
  public $p0_lambda = null;
  /**
   * @var double
   */
  public $p1_lambda = null;
  /**
   * @var double
   */
  public $t_lambda = null;
  /**
   * @var double
   */
  public $a_lambda = null;
  /**
   * @var double
   */
  public $p1_k = null;
  /**
   * @var double
   */
  public $p2_k = null;
  /**
   * @var double
   */
  public $gas_q = null;
  /**
   * @var double
   */
  public $core_height = null;
  /**
   * @var double
   */
  public $core_area = null;
  /**
   * @var double
   */
  public $gas_viscosity = null;
  /**
   * @var double
   */
  public $decay_alpha = null;
  /**
   * @var double
   */
  public $permeability_lambda = null;
  /**
   * @var double
   */
  public $permeability_k = null;
  /**
   * @var int
   */
  public $eval_difficult = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $relative_layer_gap = null;
  /**
   * @var int
   */
  public $is_protectable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mine_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'minable',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'thick',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'hw',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'qr',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'fore_qr',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'fore_qa',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'rank',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'quality',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'pressure',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'gas_content',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'f_value',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'res_abundance',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'complexity',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'mine_index',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'var_coeff',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'stability',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'dip_angle',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'czh',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'czk',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'czw',
          'type' => TType::DOUBLE,
          ),
        25 => array(
          'var' => 'hw_sum',
          'type' => TType::DOUBLE,
          ),
        26 => array(
          'var' => 'rock',
          'type' => TType::I32,
          ),
        27 => array(
          'var' => 'hhh',
          'type' => TType::DOUBLE,
          ),
        28 => array(
          'var' => 'layer_gap',
          'type' => TType::DOUBLE,
          ),
        29 => array(
          'var' => 'influence_factor',
          'type' => TType::DOUBLE,
          ),
        30 => array(
          'var' => 'res_a1',
          'type' => TType::DOUBLE,
          ),
        31 => array(
          'var' => 'gas_x1',
          'type' => TType::DOUBLE,
          ),
        32 => array(
          'var' => 'res_a2',
          'type' => TType::DOUBLE,
          ),
        33 => array(
          'var' => 'gas_x2',
          'type' => TType::DOUBLE,
          ),
        34 => array(
          'var' => 'pump_wc',
          'type' => TType::DOUBLE,
          ),
        35 => array(
          'var' => 'pump_k',
          'type' => TType::DOUBLE,
          ),
        36 => array(
          'var' => 'pump_k2',
          'type' => TType::DOUBLE,
          ),
        37 => array(
          'var' => 'pump_k3',
          'type' => TType::DOUBLE,
          ),
        38 => array(
          'var' => 'pump_k4',
          'type' => TType::DOUBLE,
          ),
        39 => array(
          'var' => 'pump_k1',
          'type' => TType::DOUBLE,
          ),
        40 => array(
          'var' => 'pore_datas',
          'type' => TType::STRING,
          ),
        41 => array(
          'var' => 'rho',
          'type' => TType::DOUBLE,
          ),
        42 => array(
          'var' => 'vr',
          'type' => TType::DOUBLE,
          ),
        43 => array(
          'var' => 'gas_w0',
          'type' => TType::DOUBLE,
          ),
        44 => array(
          'var' => 'gas_wc2',
          'type' => TType::DOUBLE,
          ),
        45 => array(
          'var' => 'gas_wc3',
          'type' => TType::DOUBLE,
          ),
        46 => array(
          'var' => 'gas_eta',
          'type' => TType::DOUBLE,
          ),
        47 => array(
          'var' => 'q0',
          'type' => TType::DOUBLE,
          ),
        48 => array(
          'var' => 'eval_method',
          'type' => TType::I32,
          ),
        49 => array(
          'var' => 'q0_alpha',
          'type' => TType::DOUBLE,
          ),
        50 => array(
          'var' => 'qt_alpha',
          'type' => TType::DOUBLE,
          ),
        51 => array(
          'var' => 't_alpha',
          'type' => TType::DOUBLE,
          ),
        52 => array(
          'var' => 'q_lambda',
          'type' => TType::DOUBLE,
          ),
        53 => array(
          'var' => 'r_lambda',
          'type' => TType::DOUBLE,
          ),
        54 => array(
          'var' => 'p0_lambda',
          'type' => TType::DOUBLE,
          ),
        55 => array(
          'var' => 'p1_lambda',
          'type' => TType::DOUBLE,
          ),
        56 => array(
          'var' => 't_lambda',
          'type' => TType::DOUBLE,
          ),
        57 => array(
          'var' => 'a_lambda',
          'type' => TType::DOUBLE,
          ),
        58 => array(
          'var' => 'p1_k',
          'type' => TType::DOUBLE,
          ),
        59 => array(
          'var' => 'p2_k',
          'type' => TType::DOUBLE,
          ),
        60 => array(
          'var' => 'gas_q',
          'type' => TType::DOUBLE,
          ),
        61 => array(
          'var' => 'core_height',
          'type' => TType::DOUBLE,
          ),
        62 => array(
          'var' => 'core_area',
          'type' => TType::DOUBLE,
          ),
        63 => array(
          'var' => 'gas_viscosity',
          'type' => TType::DOUBLE,
          ),
        64 => array(
          'var' => 'decay_alpha',
          'type' => TType::DOUBLE,
          ),
        65 => array(
          'var' => 'permeability_lambda',
          'type' => TType::DOUBLE,
          ),
        66 => array(
          'var' => 'permeability_k',
          'type' => TType::DOUBLE,
          ),
        67 => array(
          'var' => 'eval_difficult',
          'type' => TType::I32,
          ),
        68 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        69 => array(
          'var' => 'relative_layer_gap',
          'type' => TType::DOUBLE,
          ),
        70 => array(
          'var' => 'is_protectable',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mine_id'])) {
        $this->mine_id = $vals['mine_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['minable'])) {
        $this->minable = $vals['minable'];
      }
      if (isset($vals['thick'])) {
        $this->thick = $vals['thick'];
      }
      if (isset($vals['hw'])) {
        $this->hw = $vals['hw'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
      if (isset($vals['qr'])) {
        $this->qr = $vals['qr'];
      }
      if (isset($vals['fore_qr'])) {
        $this->fore_qr = $vals['fore_qr'];
      }
      if (isset($vals['fore_qa'])) {
        $this->fore_qa = $vals['fore_qa'];
      }
      if (isset($vals['rank'])) {
        $this->rank = $vals['rank'];
      }
      if (isset($vals['quality'])) {
        $this->quality = $vals['quality'];
      }
      if (isset($vals['pressure'])) {
        $this->pressure = $vals['pressure'];
      }
      if (isset($vals['gas_content'])) {
        $this->gas_content = $vals['gas_content'];
      }
      if (isset($vals['f_value'])) {
        $this->f_value = $vals['f_value'];
      }
      if (isset($vals['res_abundance'])) {
        $this->res_abundance = $vals['res_abundance'];
      }
      if (isset($vals['complexity'])) {
        $this->complexity = $vals['complexity'];
      }
      if (isset($vals['mine_index'])) {
        $this->mine_index = $vals['mine_index'];
      }
      if (isset($vals['var_coeff'])) {
        $this->var_coeff = $vals['var_coeff'];
      }
      if (isset($vals['stability'])) {
        $this->stability = $vals['stability'];
      }
      if (isset($vals['dip_angle'])) {
        $this->dip_angle = $vals['dip_angle'];
      }
      if (isset($vals['czh'])) {
        $this->czh = $vals['czh'];
      }
      if (isset($vals['czk'])) {
        $this->czk = $vals['czk'];
      }
      if (isset($vals['czw'])) {
        $this->czw = $vals['czw'];
      }
      if (isset($vals['hw_sum'])) {
        $this->hw_sum = $vals['hw_sum'];
      }
      if (isset($vals['rock'])) {
        $this->rock = $vals['rock'];
      }
      if (isset($vals['hhh'])) {
        $this->hhh = $vals['hhh'];
      }
      if (isset($vals['layer_gap'])) {
        $this->layer_gap = $vals['layer_gap'];
      }
      if (isset($vals['influence_factor'])) {
        $this->influence_factor = $vals['influence_factor'];
      }
      if (isset($vals['res_a1'])) {
        $this->res_a1 = $vals['res_a1'];
      }
      if (isset($vals['gas_x1'])) {
        $this->gas_x1 = $vals['gas_x1'];
      }
      if (isset($vals['res_a2'])) {
        $this->res_a2 = $vals['res_a2'];
      }
      if (isset($vals['gas_x2'])) {
        $this->gas_x2 = $vals['gas_x2'];
      }
      if (isset($vals['pump_wc'])) {
        $this->pump_wc = $vals['pump_wc'];
      }
      if (isset($vals['pump_k'])) {
        $this->pump_k = $vals['pump_k'];
      }
      if (isset($vals['pump_k2'])) {
        $this->pump_k2 = $vals['pump_k2'];
      }
      if (isset($vals['pump_k3'])) {
        $this->pump_k3 = $vals['pump_k3'];
      }
      if (isset($vals['pump_k4'])) {
        $this->pump_k4 = $vals['pump_k4'];
      }
      if (isset($vals['pump_k1'])) {
        $this->pump_k1 = $vals['pump_k1'];
      }
      if (isset($vals['pore_datas'])) {
        $this->pore_datas = $vals['pore_datas'];
      }
      if (isset($vals['rho'])) {
        $this->rho = $vals['rho'];
      }
      if (isset($vals['vr'])) {
        $this->vr = $vals['vr'];
      }
      if (isset($vals['gas_w0'])) {
        $this->gas_w0 = $vals['gas_w0'];
      }
      if (isset($vals['gas_wc2'])) {
        $this->gas_wc2 = $vals['gas_wc2'];
      }
      if (isset($vals['gas_wc3'])) {
        $this->gas_wc3 = $vals['gas_wc3'];
      }
      if (isset($vals['gas_eta'])) {
        $this->gas_eta = $vals['gas_eta'];
      }
      if (isset($vals['q0'])) {
        $this->q0 = $vals['q0'];
      }
      if (isset($vals['eval_method'])) {
        $this->eval_method = $vals['eval_method'];
      }
      if (isset($vals['q0_alpha'])) {
        $this->q0_alpha = $vals['q0_alpha'];
      }
      if (isset($vals['qt_alpha'])) {
        $this->qt_alpha = $vals['qt_alpha'];
      }
      if (isset($vals['t_alpha'])) {
        $this->t_alpha = $vals['t_alpha'];
      }
      if (isset($vals['q_lambda'])) {
        $this->q_lambda = $vals['q_lambda'];
      }
      if (isset($vals['r_lambda'])) {
        $this->r_lambda = $vals['r_lambda'];
      }
      if (isset($vals['p0_lambda'])) {
        $this->p0_lambda = $vals['p0_lambda'];
      }
      if (isset($vals['p1_lambda'])) {
        $this->p1_lambda = $vals['p1_lambda'];
      }
      if (isset($vals['t_lambda'])) {
        $this->t_lambda = $vals['t_lambda'];
      }
      if (isset($vals['a_lambda'])) {
        $this->a_lambda = $vals['a_lambda'];
      }
      if (isset($vals['p1_k'])) {
        $this->p1_k = $vals['p1_k'];
      }
      if (isset($vals['p2_k'])) {
        $this->p2_k = $vals['p2_k'];
      }
      if (isset($vals['gas_q'])) {
        $this->gas_q = $vals['gas_q'];
      }
      if (isset($vals['core_height'])) {
        $this->core_height = $vals['core_height'];
      }
      if (isset($vals['core_area'])) {
        $this->core_area = $vals['core_area'];
      }
      if (isset($vals['gas_viscosity'])) {
        $this->gas_viscosity = $vals['gas_viscosity'];
      }
      if (isset($vals['decay_alpha'])) {
        $this->decay_alpha = $vals['decay_alpha'];
      }
      if (isset($vals['permeability_lambda'])) {
        $this->permeability_lambda = $vals['permeability_lambda'];
      }
      if (isset($vals['permeability_k'])) {
        $this->permeability_k = $vals['permeability_k'];
      }
      if (isset($vals['eval_difficult'])) {
        $this->eval_difficult = $vals['eval_difficult'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['relative_layer_gap'])) {
        $this->relative_layer_gap = $vals['relative_layer_gap'];
      }
      if (isset($vals['is_protectable'])) {
        $this->is_protectable = $vals['is_protectable'];
      }
    }
  }

  public function getName() {
    return 'Coal';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mine_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->thick);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rank);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->quality);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pressure);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->f_value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->res_abundance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->complexity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->mine_index);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->var_coeff);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->stability);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dip_angle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->czh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->czk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->czw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hw_sum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hhh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->layer_gap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->influence_factor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->res_a1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_x1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->res_a2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_x2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 34:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_wc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 35:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 36:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 37:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 38:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 39:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 40:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pore_datas);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 41:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 42:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->vr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 43:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_w0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 44:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_wc2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 45:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_wc3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 46:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_eta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 47:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 48:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eval_method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 49:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q0_alpha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 50:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qt_alpha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 51:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->t_alpha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 52:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 53:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->r_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 54:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p0_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 55:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p1_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 56:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->t_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 57:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 58:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p1_k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 59:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p2_k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 60:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_q);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 61:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->core_height);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 62:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->core_area);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 63:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_viscosity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 64:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->decay_alpha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 65:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->permeability_lambda);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 66:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->permeability_k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 67:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->eval_difficult);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 68:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 69:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->relative_layer_gap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 70:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->is_protectable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Coal');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_id !== null) {
      $xfer += $output->writeFieldBegin('mine_id', TType::I32, 2);
      $xfer += $output->writeI32($this->mine_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minable !== null) {
      $xfer += $output->writeFieldBegin('minable', TType::I32, 4);
      $xfer += $output->writeI32($this->minable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->thick !== null) {
      $xfer += $output->writeFieldBegin('thick', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->thick);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hw !== null) {
      $xfer += $output->writeFieldBegin('hw', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->hw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr !== null) {
      $xfer += $output->writeFieldBegin('qr', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qr !== null) {
      $xfer += $output->writeFieldBegin('fore_qr', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->fore_qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qa !== null) {
      $xfer += $output->writeFieldBegin('fore_qa', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->fore_qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rank !== null) {
      $xfer += $output->writeFieldBegin('rank', TType::I32, 11);
      $xfer += $output->writeI32($this->rank);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->quality !== null) {
      $xfer += $output->writeFieldBegin('quality', TType::I32, 12);
      $xfer += $output->writeI32($this->quality);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pressure !== null) {
      $xfer += $output->writeFieldBegin('pressure', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->pressure);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_content !== null) {
      $xfer += $output->writeFieldBegin('gas_content', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->gas_content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->f_value !== null) {
      $xfer += $output->writeFieldBegin('f_value', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->f_value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res_abundance !== null) {
      $xfer += $output->writeFieldBegin('res_abundance', TType::I32, 16);
      $xfer += $output->writeI32($this->res_abundance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->complexity !== null) {
      $xfer += $output->writeFieldBegin('complexity', TType::I32, 17);
      $xfer += $output->writeI32($this->complexity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_index !== null) {
      $xfer += $output->writeFieldBegin('mine_index', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->mine_index);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->var_coeff !== null) {
      $xfer += $output->writeFieldBegin('var_coeff', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->var_coeff);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stability !== null) {
      $xfer += $output->writeFieldBegin('stability', TType::I32, 20);
      $xfer += $output->writeI32($this->stability);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dip_angle !== null) {
      $xfer += $output->writeFieldBegin('dip_angle', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->dip_angle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->czh !== null) {
      $xfer += $output->writeFieldBegin('czh', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->czh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->czk !== null) {
      $xfer += $output->writeFieldBegin('czk', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->czk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->czw !== null) {
      $xfer += $output->writeFieldBegin('czw', TType::DOUBLE, 24);
      $xfer += $output->writeDouble($this->czw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hw_sum !== null) {
      $xfer += $output->writeFieldBegin('hw_sum', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->hw_sum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rock !== null) {
      $xfer += $output->writeFieldBegin('rock', TType::I32, 26);
      $xfer += $output->writeI32($this->rock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hhh !== null) {
      $xfer += $output->writeFieldBegin('hhh', TType::DOUBLE, 27);
      $xfer += $output->writeDouble($this->hhh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->layer_gap !== null) {
      $xfer += $output->writeFieldBegin('layer_gap', TType::DOUBLE, 28);
      $xfer += $output->writeDouble($this->layer_gap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->influence_factor !== null) {
      $xfer += $output->writeFieldBegin('influence_factor', TType::DOUBLE, 29);
      $xfer += $output->writeDouble($this->influence_factor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res_a1 !== null) {
      $xfer += $output->writeFieldBegin('res_a1', TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->res_a1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_x1 !== null) {
      $xfer += $output->writeFieldBegin('gas_x1', TType::DOUBLE, 31);
      $xfer += $output->writeDouble($this->gas_x1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->res_a2 !== null) {
      $xfer += $output->writeFieldBegin('res_a2', TType::DOUBLE, 32);
      $xfer += $output->writeDouble($this->res_a2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_x2 !== null) {
      $xfer += $output->writeFieldBegin('gas_x2', TType::DOUBLE, 33);
      $xfer += $output->writeDouble($this->gas_x2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_wc !== null) {
      $xfer += $output->writeFieldBegin('pump_wc', TType::DOUBLE, 34);
      $xfer += $output->writeDouble($this->pump_wc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k !== null) {
      $xfer += $output->writeFieldBegin('pump_k', TType::DOUBLE, 35);
      $xfer += $output->writeDouble($this->pump_k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k2 !== null) {
      $xfer += $output->writeFieldBegin('pump_k2', TType::DOUBLE, 36);
      $xfer += $output->writeDouble($this->pump_k2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k3 !== null) {
      $xfer += $output->writeFieldBegin('pump_k3', TType::DOUBLE, 37);
      $xfer += $output->writeDouble($this->pump_k3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k4 !== null) {
      $xfer += $output->writeFieldBegin('pump_k4', TType::DOUBLE, 38);
      $xfer += $output->writeDouble($this->pump_k4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k1 !== null) {
      $xfer += $output->writeFieldBegin('pump_k1', TType::DOUBLE, 39);
      $xfer += $output->writeDouble($this->pump_k1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_datas !== null) {
      $xfer += $output->writeFieldBegin('pore_datas', TType::STRING, 40);
      $xfer += $output->writeString($this->pore_datas);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rho !== null) {
      $xfer += $output->writeFieldBegin('rho', TType::DOUBLE, 41);
      $xfer += $output->writeDouble($this->rho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->vr !== null) {
      $xfer += $output->writeFieldBegin('vr', TType::DOUBLE, 42);
      $xfer += $output->writeDouble($this->vr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_w0 !== null) {
      $xfer += $output->writeFieldBegin('gas_w0', TType::DOUBLE, 43);
      $xfer += $output->writeDouble($this->gas_w0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_wc2 !== null) {
      $xfer += $output->writeFieldBegin('gas_wc2', TType::DOUBLE, 44);
      $xfer += $output->writeDouble($this->gas_wc2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_wc3 !== null) {
      $xfer += $output->writeFieldBegin('gas_wc3', TType::DOUBLE, 45);
      $xfer += $output->writeDouble($this->gas_wc3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_eta !== null) {
      $xfer += $output->writeFieldBegin('gas_eta', TType::DOUBLE, 46);
      $xfer += $output->writeDouble($this->gas_eta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q0 !== null) {
      $xfer += $output->writeFieldBegin('q0', TType::DOUBLE, 47);
      $xfer += $output->writeDouble($this->q0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eval_method !== null) {
      $xfer += $output->writeFieldBegin('eval_method', TType::I32, 48);
      $xfer += $output->writeI32($this->eval_method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q0_alpha !== null) {
      $xfer += $output->writeFieldBegin('q0_alpha', TType::DOUBLE, 49);
      $xfer += $output->writeDouble($this->q0_alpha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qt_alpha !== null) {
      $xfer += $output->writeFieldBegin('qt_alpha', TType::DOUBLE, 50);
      $xfer += $output->writeDouble($this->qt_alpha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t_alpha !== null) {
      $xfer += $output->writeFieldBegin('t_alpha', TType::DOUBLE, 51);
      $xfer += $output->writeDouble($this->t_alpha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q_lambda !== null) {
      $xfer += $output->writeFieldBegin('q_lambda', TType::DOUBLE, 52);
      $xfer += $output->writeDouble($this->q_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->r_lambda !== null) {
      $xfer += $output->writeFieldBegin('r_lambda', TType::DOUBLE, 53);
      $xfer += $output->writeDouble($this->r_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p0_lambda !== null) {
      $xfer += $output->writeFieldBegin('p0_lambda', TType::DOUBLE, 54);
      $xfer += $output->writeDouble($this->p0_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p1_lambda !== null) {
      $xfer += $output->writeFieldBegin('p1_lambda', TType::DOUBLE, 55);
      $xfer += $output->writeDouble($this->p1_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t_lambda !== null) {
      $xfer += $output->writeFieldBegin('t_lambda', TType::DOUBLE, 56);
      $xfer += $output->writeDouble($this->t_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a_lambda !== null) {
      $xfer += $output->writeFieldBegin('a_lambda', TType::DOUBLE, 57);
      $xfer += $output->writeDouble($this->a_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p1_k !== null) {
      $xfer += $output->writeFieldBegin('p1_k', TType::DOUBLE, 58);
      $xfer += $output->writeDouble($this->p1_k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p2_k !== null) {
      $xfer += $output->writeFieldBegin('p2_k', TType::DOUBLE, 59);
      $xfer += $output->writeDouble($this->p2_k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_q !== null) {
      $xfer += $output->writeFieldBegin('gas_q', TType::DOUBLE, 60);
      $xfer += $output->writeDouble($this->gas_q);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->core_height !== null) {
      $xfer += $output->writeFieldBegin('core_height', TType::DOUBLE, 61);
      $xfer += $output->writeDouble($this->core_height);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->core_area !== null) {
      $xfer += $output->writeFieldBegin('core_area', TType::DOUBLE, 62);
      $xfer += $output->writeDouble($this->core_area);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_viscosity !== null) {
      $xfer += $output->writeFieldBegin('gas_viscosity', TType::DOUBLE, 63);
      $xfer += $output->writeDouble($this->gas_viscosity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->decay_alpha !== null) {
      $xfer += $output->writeFieldBegin('decay_alpha', TType::DOUBLE, 64);
      $xfer += $output->writeDouble($this->decay_alpha);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permeability_lambda !== null) {
      $xfer += $output->writeFieldBegin('permeability_lambda', TType::DOUBLE, 65);
      $xfer += $output->writeDouble($this->permeability_lambda);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->permeability_k !== null) {
      $xfer += $output->writeFieldBegin('permeability_k', TType::DOUBLE, 66);
      $xfer += $output->writeDouble($this->permeability_k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eval_difficult !== null) {
      $xfer += $output->writeFieldBegin('eval_difficult', TType::I32, 67);
      $xfer += $output->writeI32($this->eval_difficult);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 68);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relative_layer_gap !== null) {
      $xfer += $output->writeFieldBegin('relative_layer_gap', TType::DOUBLE, 69);
      $xfer += $output->writeDouble($this->relative_layer_gap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_protectable !== null) {
      $xfer += $output->writeFieldBegin('is_protectable', TType::I32, 70);
      $xfer += $output->writeI32($this->is_protectable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Complexity {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $details = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'details',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['details'])) {
        $this->details = $vals['details'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'Complexity';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->details);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Complexity');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->details !== null) {
      $xfer += $output->writeFieldBegin('details', TType::STRING, 3);
      $xfer += $output->writeString($this->details);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignDrillingSurfTechnology {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_technology_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $v_offset = null;
  /**
   * @var double
   */
  public $h_offset = null;
  /**
   * @var double
   */
  public $dp = null;
  /**
   * @var double
   */
  public $gp = null;
  /**
   * @var double
   */
  public $leading_dist = null;
  /**
   * @var double
   */
  public $gbp = null;
  /**
   * @var double
   */
  public $l_stripe = null;
  /**
   * @var double
   */
  public $ls = null;
  /**
   * @var double
   */
  public $ws = null;
  /**
   * @var double
   */
  public $hs = null;
  /**
   * @var double
   */
  public $gs = null;
  /**
   * @var double
   */
  public $wd = null;
  /**
   * @var double
   */
  public $hd = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var double
   */
  public $w = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $top_side = null;
  /**
   * @var double
   */
  public $bottom_side = null;
  /**
   * @var double
   */
  public $left_side = null;
  /**
   * @var double
   */
  public $right_side = null;
  /**
   * @var double
   */
  public $lm = null;
  /**
   * @var double
   */
  public $close_length = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_technology_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'v_offset',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'h_offset',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'dp',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'gp',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'leading_dist',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'gbp',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'l_stripe',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'ls',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'ws',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'hs',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'gs',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'wd',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'hd',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'w',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'top_side',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'bottom_side',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'left_side',
          'type' => TType::DOUBLE,
          ),
        25 => array(
          'var' => 'right_side',
          'type' => TType::DOUBLE,
          ),
        26 => array(
          'var' => 'lm',
          'type' => TType::DOUBLE,
          ),
        27 => array(
          'var' => 'close_length',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_technology_id'])) {
        $this->design_technology_id = $vals['design_technology_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['v_offset'])) {
        $this->v_offset = $vals['v_offset'];
      }
      if (isset($vals['h_offset'])) {
        $this->h_offset = $vals['h_offset'];
      }
      if (isset($vals['dp'])) {
        $this->dp = $vals['dp'];
      }
      if (isset($vals['gp'])) {
        $this->gp = $vals['gp'];
      }
      if (isset($vals['leading_dist'])) {
        $this->leading_dist = $vals['leading_dist'];
      }
      if (isset($vals['gbp'])) {
        $this->gbp = $vals['gbp'];
      }
      if (isset($vals['l_stripe'])) {
        $this->l_stripe = $vals['l_stripe'];
      }
      if (isset($vals['ls'])) {
        $this->ls = $vals['ls'];
      }
      if (isset($vals['ws'])) {
        $this->ws = $vals['ws'];
      }
      if (isset($vals['hs'])) {
        $this->hs = $vals['hs'];
      }
      if (isset($vals['gs'])) {
        $this->gs = $vals['gs'];
      }
      if (isset($vals['wd'])) {
        $this->wd = $vals['wd'];
      }
      if (isset($vals['hd'])) {
        $this->hd = $vals['hd'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['top_side'])) {
        $this->top_side = $vals['top_side'];
      }
      if (isset($vals['bottom_side'])) {
        $this->bottom_side = $vals['bottom_side'];
      }
      if (isset($vals['left_side'])) {
        $this->left_side = $vals['left_side'];
      }
      if (isset($vals['right_side'])) {
        $this->right_side = $vals['right_side'];
      }
      if (isset($vals['lm'])) {
        $this->lm = $vals['lm'];
      }
      if (isset($vals['close_length'])) {
        $this->close_length = $vals['close_length'];
      }
    }
  }

  public function getName() {
    return 'DesignDrillingSurfTechnology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_technology_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->leading_dist);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gbp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l_stripe);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ls);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ws);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->wd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->w);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->top_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bottom_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->left_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->right_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->close_length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignDrillingSurfTechnology');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_technology_id !== null) {
      $xfer += $output->writeFieldBegin('design_technology_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_technology_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v_offset !== null) {
      $xfer += $output->writeFieldBegin('v_offset', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->v_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h_offset !== null) {
      $xfer += $output->writeFieldBegin('h_offset', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->h_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dp !== null) {
      $xfer += $output->writeFieldBegin('dp', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->dp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gp !== null) {
      $xfer += $output->writeFieldBegin('gp', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->gp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->leading_dist !== null) {
      $xfer += $output->writeFieldBegin('leading_dist', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->leading_dist);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gbp !== null) {
      $xfer += $output->writeFieldBegin('gbp', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->gbp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l_stripe !== null) {
      $xfer += $output->writeFieldBegin('l_stripe', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->l_stripe);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ls !== null) {
      $xfer += $output->writeFieldBegin('ls', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->ls);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ws !== null) {
      $xfer += $output->writeFieldBegin('ws', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->ws);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hs !== null) {
      $xfer += $output->writeFieldBegin('hs', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->hs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gs !== null) {
      $xfer += $output->writeFieldBegin('gs', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->gs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wd !== null) {
      $xfer += $output->writeFieldBegin('wd', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->wd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hd !== null) {
      $xfer += $output->writeFieldBegin('hd', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->hd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      $xfer += $output->writeFieldBegin('w', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->w);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->top_side !== null) {
      $xfer += $output->writeFieldBegin('top_side', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->top_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bottom_side !== null) {
      $xfer += $output->writeFieldBegin('bottom_side', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->bottom_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left_side !== null) {
      $xfer += $output->writeFieldBegin('left_side', TType::DOUBLE, 24);
      $xfer += $output->writeDouble($this->left_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->right_side !== null) {
      $xfer += $output->writeFieldBegin('right_side', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->right_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lm !== null) {
      $xfer += $output->writeFieldBegin('lm', TType::DOUBLE, 26);
      $xfer += $output->writeDouble($this->lm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_length !== null) {
      $xfer += $output->writeFieldBegin('close_length', TType::DOUBLE, 27);
      $xfer += $output->writeDouble($this->close_length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignEvalUnit {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_eval_unit_partition_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var double
   */
  public $l = null;
  /**
   * @var int
   */
  public $t = null;
  /**
   * @var double
   */
  public $gap = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_eval_unit_partition_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'l',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 't',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'gap',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_eval_unit_partition_id'])) {
        $this->design_eval_unit_partition_id = $vals['design_eval_unit_partition_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['l'])) {
        $this->l = $vals['l'];
      }
      if (isset($vals['t'])) {
        $this->t = $vals['t'];
      }
      if (isset($vals['gap'])) {
        $this->gap = $vals['gap'];
      }
    }
  }

  public function getName() {
    return 'DesignEvalUnit';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_eval_unit_partition_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignEvalUnit');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_eval_unit_partition_id !== null) {
      $xfer += $output->writeFieldBegin('design_eval_unit_partition_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_eval_unit_partition_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 5);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l !== null) {
      $xfer += $output->writeFieldBegin('l', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->l);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t !== null) {
      $xfer += $output->writeFieldBegin('t', TType::I32, 7);
      $xfer += $output->writeI32($this->t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gap !== null) {
      $xfer += $output->writeFieldBegin('gap', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->gap);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignEvalUnitPartition {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_surf_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $w = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $l = null;
  /**
   * @var double
   */
  public $r = null;
  /**
   * @var double
   */
  public $t = null;
  /**
   * @var double
   */
  public $v = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_surf_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'w',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'l',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'r',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 't',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'v',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_surf_id'])) {
        $this->work_surf_id = $vals['work_surf_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['l'])) {
        $this->l = $vals['l'];
      }
      if (isset($vals['r'])) {
        $this->r = $vals['r'];
      }
      if (isset($vals['t'])) {
        $this->t = $vals['t'];
      }
      if (isset($vals['v'])) {
        $this->v = $vals['v'];
      }
    }
  }

  public function getName() {
    return 'DesignEvalUnitPartition';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_surf_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->w);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->r);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignEvalUnitPartition');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_surf_id !== null) {
      $xfer += $output->writeFieldBegin('work_surf_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_surf_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      $xfer += $output->writeFieldBegin('w', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->w);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l !== null) {
      $xfer += $output->writeFieldBegin('l', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->l);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->r !== null) {
      $xfer += $output->writeFieldBegin('r', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->r);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t !== null) {
      $xfer += $output->writeFieldBegin('t', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v !== null) {
      $xfer += $output->writeFieldBegin('v', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->v);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignGoafPore {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_goaf_technology_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $h_offset = null;
  /**
   * @var double
   */
  public $v_offset = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_goaf_technology_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'h_offset',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'v_offset',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_goaf_technology_id'])) {
        $this->design_goaf_technology_id = $vals['design_goaf_technology_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['h_offset'])) {
        $this->h_offset = $vals['h_offset'];
      }
      if (isset($vals['v_offset'])) {
        $this->v_offset = $vals['v_offset'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'DesignGoafPore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_goaf_technology_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignGoafPore');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_goaf_technology_id !== null) {
      $xfer += $output->writeFieldBegin('design_goaf_technology_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_goaf_technology_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h_offset !== null) {
      $xfer += $output->writeFieldBegin('h_offset', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->h_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v_offset !== null) {
      $xfer += $output->writeFieldBegin('v_offset', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->v_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 6);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignGoafTechnology {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_technology_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $pore_stubble = null;
  /**
   * @var double
   */
  public $dp = null;
  /**
   * @var double
   */
  public $gs = null;
  /**
   * @var double
   */
  public $ls = null;
  /**
   * @var double
   */
  public $ws = null;
  /**
   * @var double
   */
  public $hs = null;
  /**
   * @var double
   */
  public $gp = null;
  /**
   * @var int
   */
  public $pore_num = null;
  /**
   * @var double
   */
  public $top_dist = null;
  /**
   * @var string
   */
  public $h_offset = null;
  /**
   * @var string
   */
  public $y_offset = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var double
   */
  public $w = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $close_length = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_technology_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'pore_stubble',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'dp',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'gs',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'ls',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'ws',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'hs',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'gp',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'pore_num',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'top_dist',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'h_offset',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'y_offset',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'w',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'close_length',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_technology_id'])) {
        $this->design_technology_id = $vals['design_technology_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['pore_stubble'])) {
        $this->pore_stubble = $vals['pore_stubble'];
      }
      if (isset($vals['dp'])) {
        $this->dp = $vals['dp'];
      }
      if (isset($vals['gs'])) {
        $this->gs = $vals['gs'];
      }
      if (isset($vals['ls'])) {
        $this->ls = $vals['ls'];
      }
      if (isset($vals['ws'])) {
        $this->ws = $vals['ws'];
      }
      if (isset($vals['hs'])) {
        $this->hs = $vals['hs'];
      }
      if (isset($vals['gp'])) {
        $this->gp = $vals['gp'];
      }
      if (isset($vals['pore_num'])) {
        $this->pore_num = $vals['pore_num'];
      }
      if (isset($vals['top_dist'])) {
        $this->top_dist = $vals['top_dist'];
      }
      if (isset($vals['h_offset'])) {
        $this->h_offset = $vals['h_offset'];
      }
      if (isset($vals['y_offset'])) {
        $this->y_offset = $vals['y_offset'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['close_length'])) {
        $this->close_length = $vals['close_length'];
      }
    }
  }

  public function getName() {
    return 'DesignGoafTechnology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_technology_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pore_stubble);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ls);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ws);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pore_num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->top_dist);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->h_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->y_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->w);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->close_length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignGoafTechnology');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_technology_id !== null) {
      $xfer += $output->writeFieldBegin('design_technology_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_technology_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_stubble !== null) {
      $xfer += $output->writeFieldBegin('pore_stubble', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->pore_stubble);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dp !== null) {
      $xfer += $output->writeFieldBegin('dp', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->dp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gs !== null) {
      $xfer += $output->writeFieldBegin('gs', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->gs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ls !== null) {
      $xfer += $output->writeFieldBegin('ls', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->ls);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ws !== null) {
      $xfer += $output->writeFieldBegin('ws', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->ws);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hs !== null) {
      $xfer += $output->writeFieldBegin('hs', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->hs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gp !== null) {
      $xfer += $output->writeFieldBegin('gp', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->gp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_num !== null) {
      $xfer += $output->writeFieldBegin('pore_num', TType::I32, 12);
      $xfer += $output->writeI32($this->pore_num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->top_dist !== null) {
      $xfer += $output->writeFieldBegin('top_dist', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->top_dist);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h_offset !== null) {
      $xfer += $output->writeFieldBegin('h_offset', TType::STRING, 14);
      $xfer += $output->writeString($this->h_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y_offset !== null) {
      $xfer += $output->writeFieldBegin('y_offset', TType::STRING, 15);
      $xfer += $output->writeString($this->y_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      $xfer += $output->writeFieldBegin('w', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->w);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_length !== null) {
      $xfer += $output->writeFieldBegin('close_length', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->close_length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignPore {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_eval_unit_id = null;
  /**
   * @var int
   */
  public $design_site_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $d = null;
  /**
   * @var double
   */
  public $x1 = null;
  /**
   * @var double
   */
  public $y1 = null;
  /**
   * @var double
   */
  public $z1 = null;
  /**
   * @var double
   */
  public $x2 = null;
  /**
   * @var double
   */
  public $y2 = null;
  /**
   * @var double
   */
  public $z2 = null;
  /**
   * @var double
   */
  public $length = null;
  /**
   * @var double
   */
  public $angle1 = null;
  /**
   * @var double
   */
  public $angle2 = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var int
   */
  public $t = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_eval_unit_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'design_site_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'd',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'x1',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'y1',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'z1',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'x2',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'y2',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'z2',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'length',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'angle1',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'angle2',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 't',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_eval_unit_id'])) {
        $this->design_eval_unit_id = $vals['design_eval_unit_id'];
      }
      if (isset($vals['design_site_id'])) {
        $this->design_site_id = $vals['design_site_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['d'])) {
        $this->d = $vals['d'];
      }
      if (isset($vals['x1'])) {
        $this->x1 = $vals['x1'];
      }
      if (isset($vals['y1'])) {
        $this->y1 = $vals['y1'];
      }
      if (isset($vals['z1'])) {
        $this->z1 = $vals['z1'];
      }
      if (isset($vals['x2'])) {
        $this->x2 = $vals['x2'];
      }
      if (isset($vals['y2'])) {
        $this->y2 = $vals['y2'];
      }
      if (isset($vals['z2'])) {
        $this->z2 = $vals['z2'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
      if (isset($vals['angle1'])) {
        $this->angle1 = $vals['angle1'];
      }
      if (isset($vals['angle2'])) {
        $this->angle2 = $vals['angle2'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['t'])) {
        $this->t = $vals['t'];
      }
    }
  }

  public function getName() {
    return 'DesignPore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_eval_unit_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_site_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->angle1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->angle2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignPore');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_eval_unit_id !== null) {
      $xfer += $output->writeFieldBegin('design_eval_unit_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_eval_unit_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_site_id !== null) {
      $xfer += $output->writeFieldBegin('design_site_id', TType::I32, 3);
      $xfer += $output->writeI32($this->design_site_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d !== null) {
      $xfer += $output->writeFieldBegin('d', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->d);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x1 !== null) {
      $xfer += $output->writeFieldBegin('x1', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->x1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y1 !== null) {
      $xfer += $output->writeFieldBegin('y1', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->y1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z1 !== null) {
      $xfer += $output->writeFieldBegin('z1', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->z1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x2 !== null) {
      $xfer += $output->writeFieldBegin('x2', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->x2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y2 !== null) {
      $xfer += $output->writeFieldBegin('y2', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->y2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z2 !== null) {
      $xfer += $output->writeFieldBegin('z2', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->z2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->angle1 !== null) {
      $xfer += $output->writeFieldBegin('angle1', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->angle1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->angle2 !== null) {
      $xfer += $output->writeFieldBegin('angle2', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->angle2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 15);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t !== null) {
      $xfer += $output->writeFieldBegin('t', TType::I32, 16);
      $xfer += $output->writeI32($this->t);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignSite {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_technology_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $w = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $x = null;
  /**
   * @var double
   */
  public $y = null;
  /**
   * @var double
   */
  public $z = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_technology_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'w',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'y',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'z',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_technology_id'])) {
        $this->design_technology_id = $vals['design_technology_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
      if (isset($vals['z'])) {
        $this->z = $vals['z'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'DesignSite';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_technology_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->w);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignSite');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_technology_id !== null) {
      $xfer += $output->writeFieldBegin('design_technology_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_technology_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      $xfer += $output->writeFieldBegin('w', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->w);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->y);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z !== null) {
      $xfer += $output->writeFieldBegin('z', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->z);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 9);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignTechnology {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $coal_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $region = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'coal_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'region',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['coal_id'])) {
        $this->coal_id = $vals['coal_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['region'])) {
        $this->region = $vals['region'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'DesignTechnology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coal_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignTechnology');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coal_id !== null) {
      $xfer += $output->writeFieldBegin('coal_id', TType::I32, 2);
      $xfer += $output->writeI32($this->coal_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->region !== null) {
      $xfer += $output->writeFieldBegin('region', TType::I32, 4);
      $xfer += $output->writeI32($this->region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 5);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignTunnelControlPoint {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_eval_unit_partition_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $x = null;
  /**
   * @var double
   */
  public $y = null;
  /**
   * @var double
   */
  public $z = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_eval_unit_partition_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'y',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'z',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_eval_unit_partition_id'])) {
        $this->design_eval_unit_partition_id = $vals['design_eval_unit_partition_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
      if (isset($vals['z'])) {
        $this->z = $vals['z'];
      }
    }
  }

  public function getName() {
    return 'DesignTunnelControlPoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_eval_unit_partition_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignTunnelControlPoint');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_eval_unit_partition_id !== null) {
      $xfer += $output->writeFieldBegin('design_eval_unit_partition_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_eval_unit_partition_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->y);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z !== null) {
      $xfer += $output->writeFieldBegin('z', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->z);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignWorkSurfControlPoint {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_eval_unit_partition_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $x = null;
  /**
   * @var double
   */
  public $y = null;
  /**
   * @var double
   */
  public $z = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_eval_unit_partition_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'y',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'z',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_eval_unit_partition_id'])) {
        $this->design_eval_unit_partition_id = $vals['design_eval_unit_partition_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['y'])) {
        $this->y = $vals['y'];
      }
      if (isset($vals['z'])) {
        $this->z = $vals['z'];
      }
    }
  }

  public function getName() {
    return 'DesignWorkSurfControlPoint';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_eval_unit_partition_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignWorkSurfControlPoint');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_eval_unit_partition_id !== null) {
      $xfer += $output->writeFieldBegin('design_eval_unit_partition_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_eval_unit_partition_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y !== null) {
      $xfer += $output->writeFieldBegin('y', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->y);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z !== null) {
      $xfer += $output->writeFieldBegin('z', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->z);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DesignWorkSurfTechnology {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $design_technology_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var double
   */
  public $top_side = null;
  /**
   * @var double
   */
  public $bottom_side = null;
  /**
   * @var double
   */
  public $right_side = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $w = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var double
   */
  public $left_side = null;
  /**
   * @var double
   */
  public $v_offset = null;
  /**
   * @var double
   */
  public $h_offset = null;
  /**
   * @var double
   */
  public $p_offset = null;
  /**
   * @var double
   */
  public $wd = null;
  /**
   * @var double
   */
  public $hd = null;
  /**
   * @var double
   */
  public $lm = null;
  /**
   * @var double
   */
  public $ws = null;
  /**
   * @var double
   */
  public $ls = null;
  /**
   * @var double
   */
  public $gs = null;
  /**
   * @var double
   */
  public $hs = null;
  /**
   * @var double
   */
  public $dp = null;
  /**
   * @var double
   */
  public $gp = null;
  /**
   * @var int
   */
  public $single_rock_tunnel = null;
  /**
   * @var double
   */
  public $d_offset = null;
  /**
   * @var double
   */
  public $pore_stubble = null;
  /**
   * @var double
   */
  public $pore_angle = null;
  /**
   * @var int
   */
  public $pore_type = null;
  /**
   * @var double
   */
  public $close_length = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'design_technology_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'top_side',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'bottom_side',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'right_side',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'w',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'left_side',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'v_offset',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'h_offset',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'p_offset',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'wd',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'hd',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'lm',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'ws',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'ls',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'gs',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'hs',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'dp',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'gp',
          'type' => TType::DOUBLE,
          ),
        25 => array(
          'var' => 'single_rock_tunnel',
          'type' => TType::I32,
          ),
        26 => array(
          'var' => 'd_offset',
          'type' => TType::DOUBLE,
          ),
        27 => array(
          'var' => 'pore_stubble',
          'type' => TType::DOUBLE,
          ),
        28 => array(
          'var' => 'pore_angle',
          'type' => TType::DOUBLE,
          ),
        29 => array(
          'var' => 'pore_type',
          'type' => TType::I32,
          ),
        30 => array(
          'var' => 'close_length',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['design_technology_id'])) {
        $this->design_technology_id = $vals['design_technology_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['top_side'])) {
        $this->top_side = $vals['top_side'];
      }
      if (isset($vals['bottom_side'])) {
        $this->bottom_side = $vals['bottom_side'];
      }
      if (isset($vals['right_side'])) {
        $this->right_side = $vals['right_side'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['w'])) {
        $this->w = $vals['w'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['left_side'])) {
        $this->left_side = $vals['left_side'];
      }
      if (isset($vals['v_offset'])) {
        $this->v_offset = $vals['v_offset'];
      }
      if (isset($vals['h_offset'])) {
        $this->h_offset = $vals['h_offset'];
      }
      if (isset($vals['p_offset'])) {
        $this->p_offset = $vals['p_offset'];
      }
      if (isset($vals['wd'])) {
        $this->wd = $vals['wd'];
      }
      if (isset($vals['hd'])) {
        $this->hd = $vals['hd'];
      }
      if (isset($vals['lm'])) {
        $this->lm = $vals['lm'];
      }
      if (isset($vals['ws'])) {
        $this->ws = $vals['ws'];
      }
      if (isset($vals['ls'])) {
        $this->ls = $vals['ls'];
      }
      if (isset($vals['gs'])) {
        $this->gs = $vals['gs'];
      }
      if (isset($vals['hs'])) {
        $this->hs = $vals['hs'];
      }
      if (isset($vals['dp'])) {
        $this->dp = $vals['dp'];
      }
      if (isset($vals['gp'])) {
        $this->gp = $vals['gp'];
      }
      if (isset($vals['single_rock_tunnel'])) {
        $this->single_rock_tunnel = $vals['single_rock_tunnel'];
      }
      if (isset($vals['d_offset'])) {
        $this->d_offset = $vals['d_offset'];
      }
      if (isset($vals['pore_stubble'])) {
        $this->pore_stubble = $vals['pore_stubble'];
      }
      if (isset($vals['pore_angle'])) {
        $this->pore_angle = $vals['pore_angle'];
      }
      if (isset($vals['pore_type'])) {
        $this->pore_type = $vals['pore_type'];
      }
      if (isset($vals['close_length'])) {
        $this->close_length = $vals['close_length'];
      }
    }
  }

  public function getName() {
    return 'DesignWorkSurfTechnology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->design_technology_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->top_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bottom_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->right_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->w);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->left_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->wd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ws);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ls);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->single_rock_tunnel);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d_offset);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pore_stubble);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pore_angle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pore_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->close_length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DesignWorkSurfTechnology');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->design_technology_id !== null) {
      $xfer += $output->writeFieldBegin('design_technology_id', TType::I32, 2);
      $xfer += $output->writeI32($this->design_technology_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->top_side !== null) {
      $xfer += $output->writeFieldBegin('top_side', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->top_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bottom_side !== null) {
      $xfer += $output->writeFieldBegin('bottom_side', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->bottom_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->right_side !== null) {
      $xfer += $output->writeFieldBegin('right_side', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->right_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->w !== null) {
      $xfer += $output->writeFieldBegin('w', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->w);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left_side !== null) {
      $xfer += $output->writeFieldBegin('left_side', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->left_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v_offset !== null) {
      $xfer += $output->writeFieldBegin('v_offset', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->v_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h_offset !== null) {
      $xfer += $output->writeFieldBegin('h_offset', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->h_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p_offset !== null) {
      $xfer += $output->writeFieldBegin('p_offset', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->p_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wd !== null) {
      $xfer += $output->writeFieldBegin('wd', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->wd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hd !== null) {
      $xfer += $output->writeFieldBegin('hd', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->hd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lm !== null) {
      $xfer += $output->writeFieldBegin('lm', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->lm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ws !== null) {
      $xfer += $output->writeFieldBegin('ws', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->ws);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ls !== null) {
      $xfer += $output->writeFieldBegin('ls', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->ls);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gs !== null) {
      $xfer += $output->writeFieldBegin('gs', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->gs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hs !== null) {
      $xfer += $output->writeFieldBegin('hs', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->hs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dp !== null) {
      $xfer += $output->writeFieldBegin('dp', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->dp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gp !== null) {
      $xfer += $output->writeFieldBegin('gp', TType::DOUBLE, 24);
      $xfer += $output->writeDouble($this->gp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->single_rock_tunnel !== null) {
      $xfer += $output->writeFieldBegin('single_rock_tunnel', TType::I32, 25);
      $xfer += $output->writeI32($this->single_rock_tunnel);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d_offset !== null) {
      $xfer += $output->writeFieldBegin('d_offset', TType::DOUBLE, 26);
      $xfer += $output->writeDouble($this->d_offset);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_stubble !== null) {
      $xfer += $output->writeFieldBegin('pore_stubble', TType::DOUBLE, 27);
      $xfer += $output->writeDouble($this->pore_stubble);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_angle !== null) {
      $xfer += $output->writeFieldBegin('pore_angle', TType::DOUBLE, 28);
      $xfer += $output->writeDouble($this->pore_angle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_type !== null) {
      $xfer += $output->writeFieldBegin('pore_type', TType::I32, 29);
      $xfer += $output->writeI32($this->pore_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->close_length !== null) {
      $xfer += $output->writeFieldBegin('close_length', TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->close_length);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrillingRadiusParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $coal_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $r = null;
  /**
   * @var double
   */
  public $l = null;
  /**
   * @var double
   */
  public $k1 = null;
  /**
   * @var double
   */
  public $rho = null;
  /**
   * @var double
   */
  public $q0 = null;
  /**
   * @var double
   */
  public $a = null;
  /**
   * @var double
   */
  public $t = null;
  /**
   * @var double
   */
  public $qm = null;
  /**
   * @var double
   */
  public $qsum = null;
  /**
   * @var double
   */
  public $eta = null;
  /**
   * @var double
   */
  public $r0 = null;
  /**
   * @var double
   */
  public $p0 = null;
  /**
   * @var double
   */
  public $r1 = null;
  /**
   * @var double
   */
  public $p1 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'coal_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'r',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'l',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'k1',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'rho',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'q0',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'a',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 't',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'qm',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'qsum',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'eta',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'r0',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'p0',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'r1',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'p1',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['coal_id'])) {
        $this->coal_id = $vals['coal_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['r'])) {
        $this->r = $vals['r'];
      }
      if (isset($vals['l'])) {
        $this->l = $vals['l'];
      }
      if (isset($vals['k1'])) {
        $this->k1 = $vals['k1'];
      }
      if (isset($vals['rho'])) {
        $this->rho = $vals['rho'];
      }
      if (isset($vals['q0'])) {
        $this->q0 = $vals['q0'];
      }
      if (isset($vals['a'])) {
        $this->a = $vals['a'];
      }
      if (isset($vals['t'])) {
        $this->t = $vals['t'];
      }
      if (isset($vals['qm'])) {
        $this->qm = $vals['qm'];
      }
      if (isset($vals['qsum'])) {
        $this->qsum = $vals['qsum'];
      }
      if (isset($vals['eta'])) {
        $this->eta = $vals['eta'];
      }
      if (isset($vals['r0'])) {
        $this->r0 = $vals['r0'];
      }
      if (isset($vals['p0'])) {
        $this->p0 = $vals['p0'];
      }
      if (isset($vals['r1'])) {
        $this->r1 = $vals['r1'];
      }
      if (isset($vals['p1'])) {
        $this->p1 = $vals['p1'];
      }
    }
  }

  public function getName() {
    return 'DrillingRadiusParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coal_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->r);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rho);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qm);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qsum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->eta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->r0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->r1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrillingRadiusParam');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coal_id !== null) {
      $xfer += $output->writeFieldBegin('coal_id', TType::I32, 2);
      $xfer += $output->writeI32($this->coal_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->r !== null) {
      $xfer += $output->writeFieldBegin('r', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->r);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l !== null) {
      $xfer += $output->writeFieldBegin('l', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->l);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k1 !== null) {
      $xfer += $output->writeFieldBegin('k1', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->k1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rho !== null) {
      $xfer += $output->writeFieldBegin('rho', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->rho);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q0 !== null) {
      $xfer += $output->writeFieldBegin('q0', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->q0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a !== null) {
      $xfer += $output->writeFieldBegin('a', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->a);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t !== null) {
      $xfer += $output->writeFieldBegin('t', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qm !== null) {
      $xfer += $output->writeFieldBegin('qm', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->qm);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qsum !== null) {
      $xfer += $output->writeFieldBegin('qsum', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->qsum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eta !== null) {
      $xfer += $output->writeFieldBegin('eta', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->eta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->r0 !== null) {
      $xfer += $output->writeFieldBegin('r0', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->r0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p0 !== null) {
      $xfer += $output->writeFieldBegin('p0', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->p0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->r1 !== null) {
      $xfer += $output->writeFieldBegin('r1', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->r1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p1 !== null) {
      $xfer += $output->writeFieldBegin('p1', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->p1);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrillingSurf {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_area_id = null;
  /**
   * @var int
   */
  public $tunnel_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $qr = null;
  /**
   * @var double
   */
  public $qa = null;
  /**
   * @var double
   */
  public $fore_qr = null;
  /**
   * @var double
   */
  public $fore_qa = null;
  /**
   * @var double
   */
  public $q4 = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_area_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'tunnel_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'qr',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'fore_qr',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'fore_qa',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'q4',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_area_id'])) {
        $this->work_area_id = $vals['work_area_id'];
      }
      if (isset($vals['tunnel_id'])) {
        $this->tunnel_id = $vals['tunnel_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['qr'])) {
        $this->qr = $vals['qr'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
      if (isset($vals['fore_qr'])) {
        $this->fore_qr = $vals['fore_qr'];
      }
      if (isset($vals['fore_qa'])) {
        $this->fore_qa = $vals['fore_qa'];
      }
      if (isset($vals['q4'])) {
        $this->q4 = $vals['q4'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'DrillingSurf';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_area_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tunnel_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrillingSurf');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_area_id !== null) {
      $xfer += $output->writeFieldBegin('work_area_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_area_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tunnel_id !== null) {
      $xfer += $output->writeFieldBegin('tunnel_id', TType::I32, 3);
      $xfer += $output->writeI32($this->tunnel_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr !== null) {
      $xfer += $output->writeFieldBegin('qr', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qr !== null) {
      $xfer += $output->writeFieldBegin('fore_qr', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->fore_qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qa !== null) {
      $xfer += $output->writeFieldBegin('fore_qa', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->fore_qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q4 !== null) {
      $xfer += $output->writeFieldBegin('q4', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->q4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 10);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HighDrillingPore {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $high_drilling_pore_param_id = null;
  /**
   * @var int
   */
  public $num = null;
  /**
   * @var double
   */
  public $length = null;
  /**
   * @var double
   */
  public $angle = null;
  /**
   * @var int
   */
  public $pore_type = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'high_drilling_pore_param_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'num',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'length',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'angle',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'pore_type',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['high_drilling_pore_param_id'])) {
        $this->high_drilling_pore_param_id = $vals['high_drilling_pore_param_id'];
      }
      if (isset($vals['num'])) {
        $this->num = $vals['num'];
      }
      if (isset($vals['length'])) {
        $this->length = $vals['length'];
      }
      if (isset($vals['angle'])) {
        $this->angle = $vals['angle'];
      }
      if (isset($vals['pore_type'])) {
        $this->pore_type = $vals['pore_type'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'HighDrillingPore';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->high_drilling_pore_param_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->length);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->angle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pore_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HighDrillingPore');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->high_drilling_pore_param_id !== null) {
      $xfer += $output->writeFieldBegin('high_drilling_pore_param_id', TType::I32, 2);
      $xfer += $output->writeI32($this->high_drilling_pore_param_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num !== null) {
      $xfer += $output->writeFieldBegin('num', TType::I32, 3);
      $xfer += $output->writeI32($this->num);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->length !== null) {
      $xfer += $output->writeFieldBegin('length', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->length);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->angle !== null) {
      $xfer += $output->writeFieldBegin('angle', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->angle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pore_type !== null) {
      $xfer += $output->writeFieldBegin('pore_type', TType::I32, 6);
      $xfer += $output->writeI32($this->pore_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 7);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HighDrillingPoreParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_surf_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $lk = null;
  /**
   * @var double
   */
  public $lc = null;
  /**
   * @var double
   */
  public $lw = null;
  /**
   * @var int
   */
  public $n1 = null;
  /**
   * @var int
   */
  public $n2 = null;
  /**
   * @var double
   */
  public $beta = null;
  /**
   * @var double
   */
  public $ld = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_surf_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'lk',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'lc',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'lw',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'n1',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'n2',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'beta',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'ld',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_surf_id'])) {
        $this->work_surf_id = $vals['work_surf_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['lk'])) {
        $this->lk = $vals['lk'];
      }
      if (isset($vals['lc'])) {
        $this->lc = $vals['lc'];
      }
      if (isset($vals['lw'])) {
        $this->lw = $vals['lw'];
      }
      if (isset($vals['n1'])) {
        $this->n1 = $vals['n1'];
      }
      if (isset($vals['n2'])) {
        $this->n2 = $vals['n2'];
      }
      if (isset($vals['beta'])) {
        $this->beta = $vals['beta'];
      }
      if (isset($vals['ld'])) {
        $this->ld = $vals['ld'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'HighDrillingPoreParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_surf_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lk);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lw);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->n1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->n2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->beta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->ld);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HighDrillingPoreParam');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_surf_id !== null) {
      $xfer += $output->writeFieldBegin('work_surf_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_surf_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lk !== null) {
      $xfer += $output->writeFieldBegin('lk', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->lk);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lc !== null) {
      $xfer += $output->writeFieldBegin('lc', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->lc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lw !== null) {
      $xfer += $output->writeFieldBegin('lw', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->lw);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->n1 !== null) {
      $xfer += $output->writeFieldBegin('n1', TType::I32, 7);
      $xfer += $output->writeI32($this->n1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->n2 !== null) {
      $xfer += $output->writeFieldBegin('n2', TType::I32, 8);
      $xfer += $output->writeI32($this->n2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beta !== null) {
      $xfer += $output->writeFieldBegin('beta', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->beta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ld !== null) {
      $xfer += $output->writeFieldBegin('ld', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->ld);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 11);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HighDrillingSiteParam {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_surf_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var double
   */
  public $lg = null;
  /**
   * @var double
   */
  public $hn = null;
  /**
   * @var double
   */
  public $theta = null;
  /**
   * @var double
   */
  public $q = null;
  /**
   * @var double
   */
  public $rtn = null;
  /**
   * @var double
   */
  public $hs = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_surf_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'lg',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'hn',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'theta',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'q',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'rtn',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'hs',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_surf_id'])) {
        $this->work_surf_id = $vals['work_surf_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['lg'])) {
        $this->lg = $vals['lg'];
      }
      if (isset($vals['hn'])) {
        $this->hn = $vals['hn'];
      }
      if (isset($vals['theta'])) {
        $this->theta = $vals['theta'];
      }
      if (isset($vals['q'])) {
        $this->q = $vals['q'];
      }
      if (isset($vals['rtn'])) {
        $this->rtn = $vals['rtn'];
      }
      if (isset($vals['hs'])) {
        $this->hs = $vals['hs'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'HighDrillingSiteParam';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_surf_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->lg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->theta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rtn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HighDrillingSiteParam');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_surf_id !== null) {
      $xfer += $output->writeFieldBegin('work_surf_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_surf_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lg !== null) {
      $xfer += $output->writeFieldBegin('lg', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->lg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hn !== null) {
      $xfer += $output->writeFieldBegin('hn', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->hn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->theta !== null) {
      $xfer += $output->writeFieldBegin('theta', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->theta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q !== null) {
      $xfer += $output->writeFieldBegin('q', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->q);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rtn !== null) {
      $xfer += $output->writeFieldBegin('rtn', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->rtn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hs !== null) {
      $xfer += $output->writeFieldBegin('hs', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->hs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 12);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HighDrillingTunnel {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_surf_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $k = null;
  /**
   * @var int
   */
  public $rock = null;
  /**
   * @var double
   */
  public $hz_min = null;
  /**
   * @var double
   */
  public $hz_max = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_surf_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'k',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'rock',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'hz_min',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'hz_max',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_surf_id'])) {
        $this->work_surf_id = $vals['work_surf_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['k'])) {
        $this->k = $vals['k'];
      }
      if (isset($vals['rock'])) {
        $this->rock = $vals['rock'];
      }
      if (isset($vals['hz_min'])) {
        $this->hz_min = $vals['hz_min'];
      }
      if (isset($vals['hz_max'])) {
        $this->hz_max = $vals['hz_max'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'HighDrillingTunnel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_surf_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rock);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hz_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->hz_max);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HighDrillingTunnel');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_surf_id !== null) {
      $xfer += $output->writeFieldBegin('work_surf_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_surf_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k !== null) {
      $xfer += $output->writeFieldBegin('k', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rock !== null) {
      $xfer += $output->writeFieldBegin('rock', TType::I32, 5);
      $xfer += $output->writeI32($this->rock);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hz_min !== null) {
      $xfer += $output->writeFieldBegin('hz_min', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->hz_min);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hz_max !== null) {
      $xfer += $output->writeFieldBegin('hz_max', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->hz_max);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 8);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class HydrGeo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $x1 = null;
  /**
   * @var int
   */
  public $x2 = null;
  /**
   * @var int
   */
  public $x3 = null;
  /**
   * @var double
   */
  public $x4 = null;
  /**
   * @var double
   */
  public $x5 = null;
  /**
   * @var double
   */
  public $x6 = null;
  /**
   * @var double
   */
  public $x7 = null;
  /**
   * @var string
   */
  public $x8 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'x1',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'x2',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'x3',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'x4',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'x5',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'x6',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'x7',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'x8',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['x1'])) {
        $this->x1 = $vals['x1'];
      }
      if (isset($vals['x2'])) {
        $this->x2 = $vals['x2'];
      }
      if (isset($vals['x3'])) {
        $this->x3 = $vals['x3'];
      }
      if (isset($vals['x4'])) {
        $this->x4 = $vals['x4'];
      }
      if (isset($vals['x5'])) {
        $this->x5 = $vals['x5'];
      }
      if (isset($vals['x6'])) {
        $this->x6 = $vals['x6'];
      }
      if (isset($vals['x7'])) {
        $this->x7 = $vals['x7'];
      }
      if (isset($vals['x8'])) {
        $this->x8 = $vals['x8'];
      }
    }
  }

  public function getName() {
    return 'HydrGeo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->x1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->x2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->x3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x5);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x6);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x7);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->x8);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('HydrGeo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x1 !== null) {
      $xfer += $output->writeFieldBegin('x1', TType::I32, 3);
      $xfer += $output->writeI32($this->x1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x2 !== null) {
      $xfer += $output->writeFieldBegin('x2', TType::I32, 4);
      $xfer += $output->writeI32($this->x2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x3 !== null) {
      $xfer += $output->writeFieldBegin('x3', TType::I32, 5);
      $xfer += $output->writeI32($this->x3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x4 !== null) {
      $xfer += $output->writeFieldBegin('x4', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->x4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x5 !== null) {
      $xfer += $output->writeFieldBegin('x5', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->x5);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x6 !== null) {
      $xfer += $output->writeFieldBegin('x6', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->x6);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x7 !== null) {
      $xfer += $output->writeFieldBegin('x7', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->x7);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x8 !== null) {
      $xfer += $output->writeFieldBegin('x8', TType::STRING, 10);
      $xfer += $output->writeString($this->x8);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Mine {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $tech_mode_id = null;
  /**
   * @var int
   */
  public $mine_region_id = null;
  /**
   * @var int
   */
  public $account_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $province = null;
  /**
   * @var string
   */
  public $city = null;
  /**
   * @var double
   */
  public $capacity = null;
  /**
   * @var int
   */
  public $topo_geo = null;
  /**
   * @var int
   */
  public $hydr_geo = null;
  /**
   * @var int
   */
  public $ground_condition = null;
  /**
   * @var double
   */
  public $qr = null;
  /**
   * @var double
   */
  public $qa = null;
  /**
   * @var double
   */
  public $fore_qr = null;
  /**
   * @var double
   */
  public $fore_qa = null;
  /**
   * @var double
   */
  public $gas_k1 = null;
  /**
   * @var double
   */
  public $gas_k2 = null;
  /**
   * @var string
   */
  public $stereo_schem_diagram = null;
  /**
   * @var double
   */
  public $rock_gas_k2 = null;
  /**
   * @var double
   */
  public $reserve_w1 = null;
  /**
   * @var double
   */
  public $reserve_w2 = null;
  /**
   * @var double
   */
  public $reserve_w3 = null;
  /**
   * @var double
   */
  public $gas_w0 = null;
  /**
   * @var double
   */
  public $gas_wc2 = null;
  /**
   * @var double
   */
  public $pump_k2 = null;
  /**
   * @var double
   */
  public $pump_k3 = null;
  /**
   * @var double
   */
  public $pump_k4 = null;
  /**
   * @var double
   */
  public $pump_k1 = null;
  /**
   * @var double
   */
  public $pump_k = null;
  /**
   * @var double
   */
  public $pump_wc = null;
  /**
   * @var double
   */
  public $reserve_gas = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var int
   */
  public $protect_layer_condition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'tech_mode_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'mine_region_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'account_id',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'province',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'city',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'capacity',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'topo_geo',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'hydr_geo',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'ground_condition',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'qr',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'fore_qr',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'fore_qa',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'gas_k1',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'gas_k2',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'stereo_schem_diagram',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'rock_gas_k2',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'reserve_w1',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'reserve_w2',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'reserve_w3',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'gas_w0',
          'type' => TType::DOUBLE,
          ),
        24 => array(
          'var' => 'gas_wc2',
          'type' => TType::DOUBLE,
          ),
        25 => array(
          'var' => 'pump_k2',
          'type' => TType::DOUBLE,
          ),
        26 => array(
          'var' => 'pump_k3',
          'type' => TType::DOUBLE,
          ),
        27 => array(
          'var' => 'pump_k4',
          'type' => TType::DOUBLE,
          ),
        28 => array(
          'var' => 'pump_k1',
          'type' => TType::DOUBLE,
          ),
        29 => array(
          'var' => 'pump_k',
          'type' => TType::DOUBLE,
          ),
        30 => array(
          'var' => 'pump_wc',
          'type' => TType::DOUBLE,
          ),
        31 => array(
          'var' => 'reserve_gas',
          'type' => TType::DOUBLE,
          ),
        32 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        33 => array(
          'var' => 'protect_layer_condition',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['tech_mode_id'])) {
        $this->tech_mode_id = $vals['tech_mode_id'];
      }
      if (isset($vals['mine_region_id'])) {
        $this->mine_region_id = $vals['mine_region_id'];
      }
      if (isset($vals['account_id'])) {
        $this->account_id = $vals['account_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['province'])) {
        $this->province = $vals['province'];
      }
      if (isset($vals['city'])) {
        $this->city = $vals['city'];
      }
      if (isset($vals['capacity'])) {
        $this->capacity = $vals['capacity'];
      }
      if (isset($vals['topo_geo'])) {
        $this->topo_geo = $vals['topo_geo'];
      }
      if (isset($vals['hydr_geo'])) {
        $this->hydr_geo = $vals['hydr_geo'];
      }
      if (isset($vals['ground_condition'])) {
        $this->ground_condition = $vals['ground_condition'];
      }
      if (isset($vals['qr'])) {
        $this->qr = $vals['qr'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
      if (isset($vals['fore_qr'])) {
        $this->fore_qr = $vals['fore_qr'];
      }
      if (isset($vals['fore_qa'])) {
        $this->fore_qa = $vals['fore_qa'];
      }
      if (isset($vals['gas_k1'])) {
        $this->gas_k1 = $vals['gas_k1'];
      }
      if (isset($vals['gas_k2'])) {
        $this->gas_k2 = $vals['gas_k2'];
      }
      if (isset($vals['stereo_schem_diagram'])) {
        $this->stereo_schem_diagram = $vals['stereo_schem_diagram'];
      }
      if (isset($vals['rock_gas_k2'])) {
        $this->rock_gas_k2 = $vals['rock_gas_k2'];
      }
      if (isset($vals['reserve_w1'])) {
        $this->reserve_w1 = $vals['reserve_w1'];
      }
      if (isset($vals['reserve_w2'])) {
        $this->reserve_w2 = $vals['reserve_w2'];
      }
      if (isset($vals['reserve_w3'])) {
        $this->reserve_w3 = $vals['reserve_w3'];
      }
      if (isset($vals['gas_w0'])) {
        $this->gas_w0 = $vals['gas_w0'];
      }
      if (isset($vals['gas_wc2'])) {
        $this->gas_wc2 = $vals['gas_wc2'];
      }
      if (isset($vals['pump_k2'])) {
        $this->pump_k2 = $vals['pump_k2'];
      }
      if (isset($vals['pump_k3'])) {
        $this->pump_k3 = $vals['pump_k3'];
      }
      if (isset($vals['pump_k4'])) {
        $this->pump_k4 = $vals['pump_k4'];
      }
      if (isset($vals['pump_k1'])) {
        $this->pump_k1 = $vals['pump_k1'];
      }
      if (isset($vals['pump_k'])) {
        $this->pump_k = $vals['pump_k'];
      }
      if (isset($vals['pump_wc'])) {
        $this->pump_wc = $vals['pump_wc'];
      }
      if (isset($vals['reserve_gas'])) {
        $this->reserve_gas = $vals['reserve_gas'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['protect_layer_condition'])) {
        $this->protect_layer_condition = $vals['protect_layer_condition'];
      }
    }
  }

  public function getName() {
    return 'Mine';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tech_mode_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mine_region_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->account_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->province);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->city);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->capacity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->topo_geo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hydr_geo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ground_condition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_k1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_k2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stereo_schem_diagram);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->rock_gas_k2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reserve_w1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reserve_w2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reserve_w3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_w0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->gas_wc2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 26:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 27:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 28:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 29:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 30:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pump_wc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 31:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->reserve_gas);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 32:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 33:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->protect_layer_condition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Mine');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tech_mode_id !== null) {
      $xfer += $output->writeFieldBegin('tech_mode_id', TType::I32, 2);
      $xfer += $output->writeI32($this->tech_mode_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_region_id !== null) {
      $xfer += $output->writeFieldBegin('mine_region_id', TType::I32, 3);
      $xfer += $output->writeI32($this->mine_region_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account_id !== null) {
      $xfer += $output->writeFieldBegin('account_id', TType::I32, 4);
      $xfer += $output->writeI32($this->account_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->province !== null) {
      $xfer += $output->writeFieldBegin('province', TType::STRING, 6);
      $xfer += $output->writeString($this->province);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->city !== null) {
      $xfer += $output->writeFieldBegin('city', TType::STRING, 7);
      $xfer += $output->writeString($this->city);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->capacity !== null) {
      $xfer += $output->writeFieldBegin('capacity', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->capacity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->topo_geo !== null) {
      $xfer += $output->writeFieldBegin('topo_geo', TType::I32, 9);
      $xfer += $output->writeI32($this->topo_geo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hydr_geo !== null) {
      $xfer += $output->writeFieldBegin('hydr_geo', TType::I32, 10);
      $xfer += $output->writeI32($this->hydr_geo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ground_condition !== null) {
      $xfer += $output->writeFieldBegin('ground_condition', TType::I32, 11);
      $xfer += $output->writeI32($this->ground_condition);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr !== null) {
      $xfer += $output->writeFieldBegin('qr', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qr !== null) {
      $xfer += $output->writeFieldBegin('fore_qr', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->fore_qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qa !== null) {
      $xfer += $output->writeFieldBegin('fore_qa', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->fore_qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_k1 !== null) {
      $xfer += $output->writeFieldBegin('gas_k1', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->gas_k1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_k2 !== null) {
      $xfer += $output->writeFieldBegin('gas_k2', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->gas_k2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stereo_schem_diagram !== null) {
      $xfer += $output->writeFieldBegin('stereo_schem_diagram', TType::STRING, 18);
      $xfer += $output->writeString($this->stereo_schem_diagram);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rock_gas_k2 !== null) {
      $xfer += $output->writeFieldBegin('rock_gas_k2', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->rock_gas_k2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reserve_w1 !== null) {
      $xfer += $output->writeFieldBegin('reserve_w1', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->reserve_w1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reserve_w2 !== null) {
      $xfer += $output->writeFieldBegin('reserve_w2', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->reserve_w2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reserve_w3 !== null) {
      $xfer += $output->writeFieldBegin('reserve_w3', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->reserve_w3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_w0 !== null) {
      $xfer += $output->writeFieldBegin('gas_w0', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->gas_w0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gas_wc2 !== null) {
      $xfer += $output->writeFieldBegin('gas_wc2', TType::DOUBLE, 24);
      $xfer += $output->writeDouble($this->gas_wc2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k2 !== null) {
      $xfer += $output->writeFieldBegin('pump_k2', TType::DOUBLE, 25);
      $xfer += $output->writeDouble($this->pump_k2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k3 !== null) {
      $xfer += $output->writeFieldBegin('pump_k3', TType::DOUBLE, 26);
      $xfer += $output->writeDouble($this->pump_k3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k4 !== null) {
      $xfer += $output->writeFieldBegin('pump_k4', TType::DOUBLE, 27);
      $xfer += $output->writeDouble($this->pump_k4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k1 !== null) {
      $xfer += $output->writeFieldBegin('pump_k1', TType::DOUBLE, 28);
      $xfer += $output->writeDouble($this->pump_k1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_k !== null) {
      $xfer += $output->writeFieldBegin('pump_k', TType::DOUBLE, 29);
      $xfer += $output->writeDouble($this->pump_k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pump_wc !== null) {
      $xfer += $output->writeFieldBegin('pump_wc', TType::DOUBLE, 30);
      $xfer += $output->writeDouble($this->pump_wc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reserve_gas !== null) {
      $xfer += $output->writeFieldBegin('reserve_gas', TType::DOUBLE, 31);
      $xfer += $output->writeDouble($this->reserve_gas);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 32);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->protect_layer_condition !== null) {
      $xfer += $output->writeFieldBegin('protect_layer_condition', TType::I32, 33);
      $xfer += $output->writeI32($this->protect_layer_condition);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MineBase {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'MineBase';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MineBase');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 3);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MineRegion {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $mine_base_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mine_base_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mine_base_id'])) {
        $this->mine_base_id = $vals['mine_base_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'MineRegion';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mine_base_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MineRegion');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_base_id !== null) {
      $xfer += $output->writeFieldBegin('mine_base_id', TType::I32, 2);
      $xfer += $output->writeI32($this->mine_base_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PoreFlow {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $t = null;
  /**
   * @var double
   */
  public $a0 = null;
  /**
   * @var double
   */
  public $d = null;
  /**
   * @var double
   */
  public $d1 = null;
  /**
   * @var double
   */
  public $m = null;
  /**
   * @var double
   */
  public $k = null;
  /**
   * @var double
   */
  public $delta_t = null;
  /**
   * @var double
   */
  public $x = null;
  /**
   * @var double
   */
  public $p_test = null;
  /**
   * @var double
   */
  public $p_cur = null;
  /**
   * @var double
   */
  public $b = null;
  /**
   * @var double
   */
  public $pt = null;
  /**
   * @var double
   */
  public $delta_p = null;
  /**
   * @var double
   */
  public $dh = null;
  /**
   * @var double
   */
  public $q_hun = null;
  /**
   * @var double
   */
  public $q_chun = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 't',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'a0',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'd',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'd1',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'm',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'k',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'delta_t',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'x',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'p_test',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'p_cur',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'b',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'pt',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'delta_p',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'dh',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'q_hun',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'q_chun',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['t'])) {
        $this->t = $vals['t'];
      }
      if (isset($vals['a0'])) {
        $this->a0 = $vals['a0'];
      }
      if (isset($vals['d'])) {
        $this->d = $vals['d'];
      }
      if (isset($vals['d1'])) {
        $this->d1 = $vals['d1'];
      }
      if (isset($vals['m'])) {
        $this->m = $vals['m'];
      }
      if (isset($vals['k'])) {
        $this->k = $vals['k'];
      }
      if (isset($vals['delta_t'])) {
        $this->delta_t = $vals['delta_t'];
      }
      if (isset($vals['x'])) {
        $this->x = $vals['x'];
      }
      if (isset($vals['p_test'])) {
        $this->p_test = $vals['p_test'];
      }
      if (isset($vals['p_cur'])) {
        $this->p_cur = $vals['p_cur'];
      }
      if (isset($vals['b'])) {
        $this->b = $vals['b'];
      }
      if (isset($vals['pt'])) {
        $this->pt = $vals['pt'];
      }
      if (isset($vals['delta_p'])) {
        $this->delta_p = $vals['delta_p'];
      }
      if (isset($vals['dh'])) {
        $this->dh = $vals['dh'];
      }
      if (isset($vals['q_hun'])) {
        $this->q_hun = $vals['q_hun'];
      }
      if (isset($vals['q_chun'])) {
        $this->q_chun = $vals['q_chun'];
      }
    }
  }

  public function getName() {
    return 'PoreFlow';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->m);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->delta_t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p_test);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p_cur);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->b);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->pt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->delta_p);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->dh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q_hun);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q_chun);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PoreFlow');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->t !== null) {
      $xfer += $output->writeFieldBegin('t', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a0 !== null) {
      $xfer += $output->writeFieldBegin('a0', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->a0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d !== null) {
      $xfer += $output->writeFieldBegin('d', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->d);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d1 !== null) {
      $xfer += $output->writeFieldBegin('d1', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->d1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->m !== null) {
      $xfer += $output->writeFieldBegin('m', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->m);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k !== null) {
      $xfer += $output->writeFieldBegin('k', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->k);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delta_t !== null) {
      $xfer += $output->writeFieldBegin('delta_t', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->delta_t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x !== null) {
      $xfer += $output->writeFieldBegin('x', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->x);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p_test !== null) {
      $xfer += $output->writeFieldBegin('p_test', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->p_test);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p_cur !== null) {
      $xfer += $output->writeFieldBegin('p_cur', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->p_cur);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->b !== null) {
      $xfer += $output->writeFieldBegin('b', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->b);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pt !== null) {
      $xfer += $output->writeFieldBegin('pt', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->pt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delta_p !== null) {
      $xfer += $output->writeFieldBegin('delta_p', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->delta_p);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dh !== null) {
      $xfer += $output->writeFieldBegin('dh', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->dh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q_hun !== null) {
      $xfer += $output->writeFieldBegin('q_hun', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->q_hun);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q_chun !== null) {
      $xfer += $output->writeFieldBegin('q_chun', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->q_chun);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class PoreSize {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $q = null;
  /**
   * @var double
   */
  public $v = null;
  /**
   * @var double
   */
  public $d = null;
  /**
   * @var double
   */
  public $p = null;
  /**
   * @var double
   */
  public $sigma = null;
  /**
   * @var double
   */
  public $delta = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'q',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'v',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'd',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'p',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'sigma',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'delta',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['q'])) {
        $this->q = $vals['q'];
      }
      if (isset($vals['v'])) {
        $this->v = $vals['v'];
      }
      if (isset($vals['d'])) {
        $this->d = $vals['d'];
      }
      if (isset($vals['p'])) {
        $this->p = $vals['p'];
      }
      if (isset($vals['sigma'])) {
        $this->sigma = $vals['sigma'];
      }
      if (isset($vals['delta'])) {
        $this->delta = $vals['delta'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'PoreSize';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->p);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->sigma);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->delta);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('PoreSize');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q !== null) {
      $xfer += $output->writeFieldBegin('q', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->q);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v !== null) {
      $xfer += $output->writeFieldBegin('v', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->v);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d !== null) {
      $xfer += $output->writeFieldBegin('d', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->d);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->p !== null) {
      $xfer += $output->writeFieldBegin('p', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->p);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sigma !== null) {
      $xfer += $output->writeFieldBegin('sigma', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->sigma);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delta !== null) {
      $xfer += $output->writeFieldBegin('delta', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->delta);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 9);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ResAbundance {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $min_abundance = null;
  /**
   * @var double
   */
  public $max_abundance = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'min_abundance',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'max_abundance',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['min_abundance'])) {
        $this->min_abundance = $vals['min_abundance'];
      }
      if (isset($vals['max_abundance'])) {
        $this->max_abundance = $vals['max_abundance'];
      }
    }
  }

  public function getName() {
    return 'ResAbundance';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->min_abundance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->max_abundance);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ResAbundance');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->min_abundance !== null) {
      $xfer += $output->writeFieldBegin('min_abundance', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->min_abundance);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->max_abundance !== null) {
      $xfer += $output->writeFieldBegin('max_abundance', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->max_abundance);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Rock {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $a = null;
  /**
   * @var double
   */
  public $b = null;
  /**
   * @var double
   */
  public $c = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'a',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'b',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'c',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['a'])) {
        $this->a = $vals['a'];
      }
      if (isset($vals['b'])) {
        $this->b = $vals['b'];
      }
      if (isset($vals['c'])) {
        $this->c = $vals['c'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'Rock';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->b);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->c);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Rock');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a !== null) {
      $xfer += $output->writeFieldBegin('a', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->a);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->b !== null) {
      $xfer += $output->writeFieldBegin('b', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->b);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c !== null) {
      $xfer += $output->writeFieldBegin('c', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->c);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 6);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SysInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $account_id = null;
  /**
   * @var string
   */
  public $last_login_time = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'account_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'last_login_time',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['account_id'])) {
        $this->account_id = $vals['account_id'];
      }
      if (isset($vals['last_login_time'])) {
        $this->last_login_time = $vals['last_login_time'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'SysInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->account_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_login_time);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SysInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->account_id !== null) {
      $xfer += $output->writeFieldBegin('account_id', TType::I32, 2);
      $xfer += $output->writeI32($this->account_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_login_time !== null) {
      $xfer += $output->writeFieldBegin('last_login_time', TType::STRING, 3);
      $xfer += $output->writeString($this->last_login_time);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TechMode {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $mine_region_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $mode_type = null;
  /**
   * @var int
   */
  public $c1 = null;
  /**
   * @var int
   */
  public $c2 = null;
  /**
   * @var int
   */
  public $c3 = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mine_region_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mode_type',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'c1',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'c2',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'c3',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mine_region_id'])) {
        $this->mine_region_id = $vals['mine_region_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['mode_type'])) {
        $this->mode_type = $vals['mode_type'];
      }
      if (isset($vals['c1'])) {
        $this->c1 = $vals['c1'];
      }
      if (isset($vals['c2'])) {
        $this->c2 = $vals['c2'];
      }
      if (isset($vals['c3'])) {
        $this->c3 = $vals['c3'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'TechMode';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mine_region_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->c1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->c2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->c3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TechMode');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_region_id !== null) {
      $xfer += $output->writeFieldBegin('mine_region_id', TType::I32, 2);
      $xfer += $output->writeI32($this->mine_region_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode_type !== null) {
      $xfer += $output->writeFieldBegin('mode_type', TType::I32, 4);
      $xfer += $output->writeI32($this->mode_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c1 !== null) {
      $xfer += $output->writeFieldBegin('c1', TType::I32, 5);
      $xfer += $output->writeI32($this->c1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c2 !== null) {
      $xfer += $output->writeFieldBegin('c2', TType::I32, 6);
      $xfer += $output->writeI32($this->c2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->c3 !== null) {
      $xfer += $output->writeFieldBegin('c3', TType::I32, 7);
      $xfer += $output->writeI32($this->c3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 8);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Technology {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $mine_region_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $iskey = null;
  /**
   * @var string
   */
  public $doc = null;
  /**
   * @var string
   */
  public $video = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mine_region_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'iskey',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'doc',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'video',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['mine_region_id'])) {
        $this->mine_region_id = $vals['mine_region_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['iskey'])) {
        $this->iskey = $vals['iskey'];
      }
      if (isset($vals['doc'])) {
        $this->doc = $vals['doc'];
      }
      if (isset($vals['video'])) {
        $this->video = $vals['video'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'Technology';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mine_region_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->iskey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->doc);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->video);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Technology');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mine_region_id !== null) {
      $xfer += $output->writeFieldBegin('mine_region_id', TType::I32, 2);
      $xfer += $output->writeI32($this->mine_region_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iskey !== null) {
      $xfer += $output->writeFieldBegin('iskey', TType::I32, 4);
      $xfer += $output->writeI32($this->iskey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->doc !== null) {
      $xfer += $output->writeFieldBegin('doc', TType::STRING, 5);
      $xfer += $output->writeString($this->doc);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->video !== null) {
      $xfer += $output->writeFieldBegin('video', TType::STRING, 6);
      $xfer += $output->writeString($this->video);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 7);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TopoGeo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $feature = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'feature',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['feature'])) {
        $this->feature = $vals['feature'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'TopoGeo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->feature);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TopoGeo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->feature !== null) {
      $xfer += $output->writeFieldBegin('feature', TType::STRING, 3);
      $xfer += $output->writeString($this->feature);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 4);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Tunnel {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $b = null;
  /**
   * @var double
   */
  public $h = null;
  /**
   * @var double
   */
  public $l = null;
  /**
   * @var double
   */
  public $s = null;
  /**
   * @var double
   */
  public $d = null;
  /**
   * @var double
   */
  public $wh = null;
  /**
   * @var double
   */
  public $v = null;
  /**
   * @var double
   */
  public $q3 = null;
  /**
   * @var double
   */
  public $q0 = null;
  /**
   * @var string
   */
  public $comment = null;
  /**
   * @var int
   */
  public $tunnel_type = null;
  /**
   * @var double
   */
  public $top_side = null;
  /**
   * @var double
   */
  public $bottom_side = null;
  /**
   * @var double
   */
  public $left_side = null;
  /**
   * @var double
   */
  public $right_side = null;
  /**
   * @var double
   */
  public $x1 = null;
  /**
   * @var double
   */
  public $y1 = null;
  /**
   * @var double
   */
  public $z1 = null;
  /**
   * @var double
   */
  public $x2 = null;
  /**
   * @var double
   */
  public $y2 = null;
  /**
   * @var double
   */
  public $z2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'b',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'h',
          'type' => TType::DOUBLE,
          ),
        5 => array(
          'var' => 'l',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 's',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'd',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'wh',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'v',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'q3',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'q0',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'tunnel_type',
          'type' => TType::I32,
          ),
        14 => array(
          'var' => 'top_side',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'bottom_side',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'left_side',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'right_side',
          'type' => TType::DOUBLE,
          ),
        18 => array(
          'var' => 'x1',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'y1',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'z1',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'x2',
          'type' => TType::DOUBLE,
          ),
        22 => array(
          'var' => 'y2',
          'type' => TType::DOUBLE,
          ),
        23 => array(
          'var' => 'z2',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['b'])) {
        $this->b = $vals['b'];
      }
      if (isset($vals['h'])) {
        $this->h = $vals['h'];
      }
      if (isset($vals['l'])) {
        $this->l = $vals['l'];
      }
      if (isset($vals['s'])) {
        $this->s = $vals['s'];
      }
      if (isset($vals['d'])) {
        $this->d = $vals['d'];
      }
      if (isset($vals['wh'])) {
        $this->wh = $vals['wh'];
      }
      if (isset($vals['v'])) {
        $this->v = $vals['v'];
      }
      if (isset($vals['q3'])) {
        $this->q3 = $vals['q3'];
      }
      if (isset($vals['q0'])) {
        $this->q0 = $vals['q0'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
      if (isset($vals['tunnel_type'])) {
        $this->tunnel_type = $vals['tunnel_type'];
      }
      if (isset($vals['top_side'])) {
        $this->top_side = $vals['top_side'];
      }
      if (isset($vals['bottom_side'])) {
        $this->bottom_side = $vals['bottom_side'];
      }
      if (isset($vals['left_side'])) {
        $this->left_side = $vals['left_side'];
      }
      if (isset($vals['right_side'])) {
        $this->right_side = $vals['right_side'];
      }
      if (isset($vals['x1'])) {
        $this->x1 = $vals['x1'];
      }
      if (isset($vals['y1'])) {
        $this->y1 = $vals['y1'];
      }
      if (isset($vals['z1'])) {
        $this->z1 = $vals['z1'];
      }
      if (isset($vals['x2'])) {
        $this->x2 = $vals['x2'];
      }
      if (isset($vals['y2'])) {
        $this->y2 = $vals['y2'];
      }
      if (isset($vals['z2'])) {
        $this->z2 = $vals['z2'];
      }
    }
  }

  public function getName() {
    return 'Tunnel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->b);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->h);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->s);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->d);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->wh);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->v);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tunnel_type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->top_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->bottom_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->left_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->right_side);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->x2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->y2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->z2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Tunnel');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->b !== null) {
      $xfer += $output->writeFieldBegin('b', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->b);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->h !== null) {
      $xfer += $output->writeFieldBegin('h', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->h);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l !== null) {
      $xfer += $output->writeFieldBegin('l', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->l);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->s !== null) {
      $xfer += $output->writeFieldBegin('s', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->s);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->d !== null) {
      $xfer += $output->writeFieldBegin('d', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->d);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->wh !== null) {
      $xfer += $output->writeFieldBegin('wh', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->wh);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->v !== null) {
      $xfer += $output->writeFieldBegin('v', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->v);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q3 !== null) {
      $xfer += $output->writeFieldBegin('q3', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->q3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q0 !== null) {
      $xfer += $output->writeFieldBegin('q0', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->q0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 12);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tunnel_type !== null) {
      $xfer += $output->writeFieldBegin('tunnel_type', TType::I32, 13);
      $xfer += $output->writeI32($this->tunnel_type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->top_side !== null) {
      $xfer += $output->writeFieldBegin('top_side', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->top_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bottom_side !== null) {
      $xfer += $output->writeFieldBegin('bottom_side', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->bottom_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->left_side !== null) {
      $xfer += $output->writeFieldBegin('left_side', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->left_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->right_side !== null) {
      $xfer += $output->writeFieldBegin('right_side', TType::DOUBLE, 17);
      $xfer += $output->writeDouble($this->right_side);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x1 !== null) {
      $xfer += $output->writeFieldBegin('x1', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->x1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y1 !== null) {
      $xfer += $output->writeFieldBegin('y1', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->y1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z1 !== null) {
      $xfer += $output->writeFieldBegin('z1', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->z1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->x2 !== null) {
      $xfer += $output->writeFieldBegin('x2', TType::DOUBLE, 21);
      $xfer += $output->writeDouble($this->x2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->y2 !== null) {
      $xfer += $output->writeFieldBegin('y2', TType::DOUBLE, 22);
      $xfer += $output->writeDouble($this->y2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->z2 !== null) {
      $xfer += $output->writeFieldBegin('z2', TType::DOUBLE, 23);
      $xfer += $output->writeDouble($this->z2);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WorkArea {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $coal_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $mode = null;
  /**
   * @var double
   */
  public $a = null;
  /**
   * @var double
   */
  public $qr = null;
  /**
   * @var double
   */
  public $qa = null;
  /**
   * @var double
   */
  public $fore_qr = null;
  /**
   * @var double
   */
  public $fore_qa = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'coal_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'mode',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'a',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'qr',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'fore_qr',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'fore_qa',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['coal_id'])) {
        $this->coal_id = $vals['coal_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['mode'])) {
        $this->mode = $vals['mode'];
      }
      if (isset($vals['a'])) {
        $this->a = $vals['a'];
      }
      if (isset($vals['qr'])) {
        $this->qr = $vals['qr'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
      if (isset($vals['fore_qr'])) {
        $this->fore_qr = $vals['fore_qr'];
      }
      if (isset($vals['fore_qa'])) {
        $this->fore_qa = $vals['fore_qa'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'WorkArea';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->coal_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WorkArea');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->coal_id !== null) {
      $xfer += $output->writeFieldBegin('coal_id', TType::I32, 2);
      $xfer += $output->writeI32($this->coal_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mode !== null) {
      $xfer += $output->writeFieldBegin('mode', TType::I32, 4);
      $xfer += $output->writeI32($this->mode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a !== null) {
      $xfer += $output->writeFieldBegin('a', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->a);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr !== null) {
      $xfer += $output->writeFieldBegin('qr', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qr !== null) {
      $xfer += $output->writeFieldBegin('fore_qr', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->fore_qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qa !== null) {
      $xfer += $output->writeFieldBegin('fore_qa', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->fore_qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 10);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class WorkSurf {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var int
   */
  public $work_area_id = null;
  /**
   * @var int
   */
  public $tunnel_id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var double
   */
  public $a = null;
  /**
   * @var double
   */
  public $qr = null;
  /**
   * @var double
   */
  public $qa = null;
  /**
   * @var double
   */
  public $fore_qr = null;
  /**
   * @var double
   */
  public $fore_qa = null;
  /**
   * @var double
   */
  public $l1 = null;
  /**
   * @var double
   */
  public $l2 = null;
  /**
   * @var int
   */
  public $layerable = null;
  /**
   * @var double
   */
  public $k1 = null;
  /**
   * @var double
   */
  public $k2 = null;
  /**
   * @var double
   */
  public $k3 = null;
  /**
   * @var double
   */
  public $kf = null;
  /**
   * @var int
   */
  public $method = null;
  /**
   * @var double
   */
  public $last_t = null;
  /**
   * @var double
   */
  public $qr1 = null;
  /**
   * @var double
   */
  public $qr2 = null;
  /**
   * @var string
   */
  public $comment = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'work_area_id',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'tunnel_id',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'a',
          'type' => TType::DOUBLE,
          ),
        6 => array(
          'var' => 'qr',
          'type' => TType::DOUBLE,
          ),
        7 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'fore_qr',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'fore_qa',
          'type' => TType::DOUBLE,
          ),
        10 => array(
          'var' => 'l1',
          'type' => TType::DOUBLE,
          ),
        11 => array(
          'var' => 'l2',
          'type' => TType::DOUBLE,
          ),
        12 => array(
          'var' => 'layerable',
          'type' => TType::I32,
          ),
        13 => array(
          'var' => 'k1',
          'type' => TType::DOUBLE,
          ),
        14 => array(
          'var' => 'k2',
          'type' => TType::DOUBLE,
          ),
        15 => array(
          'var' => 'k3',
          'type' => TType::DOUBLE,
          ),
        16 => array(
          'var' => 'kf',
          'type' => TType::DOUBLE,
          ),
        17 => array(
          'var' => 'method',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'last_t',
          'type' => TType::DOUBLE,
          ),
        19 => array(
          'var' => 'qr1',
          'type' => TType::DOUBLE,
          ),
        20 => array(
          'var' => 'qr2',
          'type' => TType::DOUBLE,
          ),
        21 => array(
          'var' => 'comment',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['work_area_id'])) {
        $this->work_area_id = $vals['work_area_id'];
      }
      if (isset($vals['tunnel_id'])) {
        $this->tunnel_id = $vals['tunnel_id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['a'])) {
        $this->a = $vals['a'];
      }
      if (isset($vals['qr'])) {
        $this->qr = $vals['qr'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
      if (isset($vals['fore_qr'])) {
        $this->fore_qr = $vals['fore_qr'];
      }
      if (isset($vals['fore_qa'])) {
        $this->fore_qa = $vals['fore_qa'];
      }
      if (isset($vals['l1'])) {
        $this->l1 = $vals['l1'];
      }
      if (isset($vals['l2'])) {
        $this->l2 = $vals['l2'];
      }
      if (isset($vals['layerable'])) {
        $this->layerable = $vals['layerable'];
      }
      if (isset($vals['k1'])) {
        $this->k1 = $vals['k1'];
      }
      if (isset($vals['k2'])) {
        $this->k2 = $vals['k2'];
      }
      if (isset($vals['k3'])) {
        $this->k3 = $vals['k3'];
      }
      if (isset($vals['kf'])) {
        $this->kf = $vals['kf'];
      }
      if (isset($vals['method'])) {
        $this->method = $vals['method'];
      }
      if (isset($vals['last_t'])) {
        $this->last_t = $vals['last_t'];
      }
      if (isset($vals['qr1'])) {
        $this->qr1 = $vals['qr1'];
      }
      if (isset($vals['qr2'])) {
        $this->qr2 = $vals['qr2'];
      }
      if (isset($vals['comment'])) {
        $this->comment = $vals['comment'];
      }
    }
  }

  public function getName() {
    return 'WorkSurf';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->work_area_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tunnel_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->a);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->fore_qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->l2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->layerable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->k3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->kf);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->method);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->last_t);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr1);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qr2);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->comment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('WorkSurf');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->work_area_id !== null) {
      $xfer += $output->writeFieldBegin('work_area_id', TType::I32, 2);
      $xfer += $output->writeI32($this->work_area_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tunnel_id !== null) {
      $xfer += $output->writeFieldBegin('tunnel_id', TType::I32, 3);
      $xfer += $output->writeI32($this->tunnel_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->a !== null) {
      $xfer += $output->writeFieldBegin('a', TType::DOUBLE, 5);
      $xfer += $output->writeDouble($this->a);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr !== null) {
      $xfer += $output->writeFieldBegin('qr', TType::DOUBLE, 6);
      $xfer += $output->writeDouble($this->qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qr !== null) {
      $xfer += $output->writeFieldBegin('fore_qr', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->fore_qr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fore_qa !== null) {
      $xfer += $output->writeFieldBegin('fore_qa', TType::DOUBLE, 9);
      $xfer += $output->writeDouble($this->fore_qa);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l1 !== null) {
      $xfer += $output->writeFieldBegin('l1', TType::DOUBLE, 10);
      $xfer += $output->writeDouble($this->l1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->l2 !== null) {
      $xfer += $output->writeFieldBegin('l2', TType::DOUBLE, 11);
      $xfer += $output->writeDouble($this->l2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->layerable !== null) {
      $xfer += $output->writeFieldBegin('layerable', TType::I32, 12);
      $xfer += $output->writeI32($this->layerable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k1 !== null) {
      $xfer += $output->writeFieldBegin('k1', TType::DOUBLE, 13);
      $xfer += $output->writeDouble($this->k1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k2 !== null) {
      $xfer += $output->writeFieldBegin('k2', TType::DOUBLE, 14);
      $xfer += $output->writeDouble($this->k2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->k3 !== null) {
      $xfer += $output->writeFieldBegin('k3', TType::DOUBLE, 15);
      $xfer += $output->writeDouble($this->k3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kf !== null) {
      $xfer += $output->writeFieldBegin('kf', TType::DOUBLE, 16);
      $xfer += $output->writeDouble($this->kf);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->method !== null) {
      $xfer += $output->writeFieldBegin('method', TType::I32, 17);
      $xfer += $output->writeI32($this->method);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_t !== null) {
      $xfer += $output->writeFieldBegin('last_t', TType::DOUBLE, 18);
      $xfer += $output->writeDouble($this->last_t);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr1 !== null) {
      $xfer += $output->writeFieldBegin('qr1', TType::DOUBLE, 19);
      $xfer += $output->writeDouble($this->qr1);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qr2 !== null) {
      $xfer += $output->writeFieldBegin('qr2', TType::DOUBLE, 20);
      $xfer += $output->writeDouble($this->qr2);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->comment !== null) {
      $xfer += $output->writeFieldBegin('comment', TType::STRING, 21);
      $xfer += $output->writeString($this->comment);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DrillingSurfGasFlowResult {
  static $_TSPEC;

  /**
   * @var double
   */
  public $q0 = null;
  /**
   * @var double
   */
  public $q3 = null;
  /**
   * @var double
   */
  public $q4 = null;
  /**
   * @var double
   */
  public $qa = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'q0',
          'type' => TType::DOUBLE,
          ),
        2 => array(
          'var' => 'q3',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'q4',
          'type' => TType::DOUBLE,
          ),
        4 => array(
          'var' => 'qa',
          'type' => TType::DOUBLE,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['q0'])) {
        $this->q0 = $vals['q0'];
      }
      if (isset($vals['q3'])) {
        $this->q3 = $vals['q3'];
      }
      if (isset($vals['q4'])) {
        $this->q4 = $vals['q4'];
      }
      if (isset($vals['qa'])) {
        $this->qa = $vals['qa'];
      }
    }
  }

  public function getName() {
    return 'DrillingSurfGasFlowResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q0);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q3);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->q4);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->qa);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DrillingSurfGasFlowResult');
    if ($this->q0 !== null) {
      $xfer += $output->writeFieldBegin('q0', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->q0);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q3 !== null) {
      $xfer += $output->writeFieldBegin('q3', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->q3);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->q4 !== null) {
      $xfer += $output->writeFieldBegin('q4', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->q4);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->qa !== null) {
      $xfer += $output->writeFieldBegin('qa', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->qa);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


