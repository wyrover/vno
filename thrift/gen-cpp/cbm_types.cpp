/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "cbm_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace cbm {


Account::~Account() throw() {
}


void Account::__set_id(const int32_t val) {
  this->id = val;
}

void Account::__set_username(const std::string& val) {
  this->username = val;
}

void Account::__set_password(const std::string& val) {
  this->password = val;
}

void Account::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t Account::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->username);
          this->__isset.username = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->password);
          this->__isset.password = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Account::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Account");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("username", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->username);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("password", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->password);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Account &a, Account &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.username, b.username);
  swap(a.password, b.password);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

Account::Account(const Account& other0) {
  id = other0.id;
  username = other0.username;
  password = other0.password;
  comment = other0.comment;
  __isset = other0.__isset;
}
Account& Account::operator=(const Account& other1) {
  id = other1.id;
  username = other1.username;
  password = other1.password;
  comment = other1.comment;
  __isset = other1.__isset;
  return *this;
}
void Account::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Account(";
  out << "id=" << to_string(id);
  out << ", " << "username=" << to_string(username);
  out << ", " << "password=" << to_string(password);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


AdjLayer::~AdjLayer() throw() {
}


void AdjLayer::__set_id(const int32_t val) {
  this->id = val;
}

void AdjLayer::__set_work_surf_id(const int32_t val) {
  this->work_surf_id = val;
}

void AdjLayer::__set_coal_id(const int32_t val) {
  this->coal_id = val;
}

void AdjLayer::__set_name(const std::string& val) {
  this->name = val;
}

void AdjLayer::__set_num(const int32_t val) {
  this->num = val;
}

void AdjLayer::__set_h(const double val) {
  this->h = val;
}

void AdjLayer::__set_hp(const double val) {
  this->hp = val;
}

void AdjLayer::__set_in_cz(const int32_t val) {
  this->in_cz = val;
}

void AdjLayer::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t AdjLayer::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_surf_id);
          this->__isset.work_surf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coal_id);
          this->__isset.coal_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hp);
          this->__isset.hp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->in_cz);
          this->__isset.in_cz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AdjLayer::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AdjLayer");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_surf_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_surf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coal_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->coal_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hp", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->hp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("in_cz", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->in_cz);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AdjLayer &a, AdjLayer &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_surf_id, b.work_surf_id);
  swap(a.coal_id, b.coal_id);
  swap(a.name, b.name);
  swap(a.num, b.num);
  swap(a.h, b.h);
  swap(a.hp, b.hp);
  swap(a.in_cz, b.in_cz);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

AdjLayer::AdjLayer(const AdjLayer& other2) {
  id = other2.id;
  work_surf_id = other2.work_surf_id;
  coal_id = other2.coal_id;
  name = other2.name;
  num = other2.num;
  h = other2.h;
  hp = other2.hp;
  in_cz = other2.in_cz;
  comment = other2.comment;
  __isset = other2.__isset;
}
AdjLayer& AdjLayer::operator=(const AdjLayer& other3) {
  id = other3.id;
  work_surf_id = other3.work_surf_id;
  coal_id = other3.coal_id;
  name = other3.name;
  num = other3.num;
  h = other3.h;
  hp = other3.hp;
  in_cz = other3.in_cz;
  comment = other3.comment;
  __isset = other3.__isset;
  return *this;
}
void AdjLayer::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AdjLayer(";
  out << "id=" << to_string(id);
  out << ", " << "work_surf_id=" << to_string(work_surf_id);
  out << ", " << "coal_id=" << to_string(coal_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "num=" << to_string(num);
  out << ", " << "h=" << to_string(h);
  out << ", " << "hp=" << to_string(hp);
  out << ", " << "in_cz=" << to_string(in_cz);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


Coal::~Coal() throw() {
}


void Coal::__set_id(const int32_t val) {
  this->id = val;
}

void Coal::__set_mine_id(const int32_t val) {
  this->mine_id = val;
}

void Coal::__set_name(const std::string& val) {
  this->name = val;
}

void Coal::__set_minable(const int32_t val) {
  this->minable = val;
}

void Coal::__set_thick(const double val) {
  this->thick = val;
}

void Coal::__set_hw(const double val) {
  this->hw = val;
}

void Coal::__set_qa(const double val) {
  this->qa = val;
}

void Coal::__set_qr(const double val) {
  this->qr = val;
}

void Coal::__set_fore_qr(const double val) {
  this->fore_qr = val;
}

void Coal::__set_fore_qa(const double val) {
  this->fore_qa = val;
}

void Coal::__set_rank(const int32_t val) {
  this->rank = val;
}

void Coal::__set_quality(const int32_t val) {
  this->quality = val;
}

void Coal::__set_pressure(const double val) {
  this->pressure = val;
}

void Coal::__set_gas_content(const double val) {
  this->gas_content = val;
}

void Coal::__set_f_value(const double val) {
  this->f_value = val;
}

void Coal::__set_res_abundance(const int32_t val) {
  this->res_abundance = val;
}

void Coal::__set_complexity(const int32_t val) {
  this->complexity = val;
}

void Coal::__set_mine_index(const double val) {
  this->mine_index = val;
}

void Coal::__set_var_coeff(const double val) {
  this->var_coeff = val;
}

void Coal::__set_stability(const int32_t val) {
  this->stability = val;
}

void Coal::__set_dip_angle(const double val) {
  this->dip_angle = val;
}

void Coal::__set_czh(const double val) {
  this->czh = val;
}

void Coal::__set_czk(const double val) {
  this->czk = val;
}

void Coal::__set_czw(const double val) {
  this->czw = val;
}

void Coal::__set_hw_sum(const double val) {
  this->hw_sum = val;
}

void Coal::__set_rock(const int32_t val) {
  this->rock = val;
}

void Coal::__set_hhh(const double val) {
  this->hhh = val;
}

void Coal::__set_layer_gap(const double val) {
  this->layer_gap = val;
}

void Coal::__set_influence_factor(const double val) {
  this->influence_factor = val;
}

void Coal::__set_res_a1(const double val) {
  this->res_a1 = val;
}

void Coal::__set_gas_x1(const double val) {
  this->gas_x1 = val;
}

void Coal::__set_res_a2(const double val) {
  this->res_a2 = val;
}

void Coal::__set_gas_x2(const double val) {
  this->gas_x2 = val;
}

void Coal::__set_pump_wc(const double val) {
  this->pump_wc = val;
}

void Coal::__set_pump_k(const double val) {
  this->pump_k = val;
}

void Coal::__set_pump_k2(const double val) {
  this->pump_k2 = val;
}

void Coal::__set_pump_k3(const double val) {
  this->pump_k3 = val;
}

void Coal::__set_pump_k4(const double val) {
  this->pump_k4 = val;
}

void Coal::__set_pump_k1(const double val) {
  this->pump_k1 = val;
}

void Coal::__set_pore_datas(const std::string& val) {
  this->pore_datas = val;
}

void Coal::__set_rho(const double val) {
  this->rho = val;
}

void Coal::__set_vr(const double val) {
  this->vr = val;
}

void Coal::__set_gas_w0(const double val) {
  this->gas_w0 = val;
}

void Coal::__set_gas_wc2(const double val) {
  this->gas_wc2 = val;
}

void Coal::__set_gas_wc3(const double val) {
  this->gas_wc3 = val;
}

void Coal::__set_gas_eta(const double val) {
  this->gas_eta = val;
}

void Coal::__set_q0(const double val) {
  this->q0 = val;
}

void Coal::__set_eval_method(const int32_t val) {
  this->eval_method = val;
}

void Coal::__set_q0_alpha(const double val) {
  this->q0_alpha = val;
}

void Coal::__set_qt_alpha(const double val) {
  this->qt_alpha = val;
}

void Coal::__set_t_alpha(const double val) {
  this->t_alpha = val;
}

void Coal::__set_q_lambda(const double val) {
  this->q_lambda = val;
}

void Coal::__set_r_lambda(const double val) {
  this->r_lambda = val;
}

void Coal::__set_p0_lambda(const double val) {
  this->p0_lambda = val;
}

void Coal::__set_p1_lambda(const double val) {
  this->p1_lambda = val;
}

void Coal::__set_t_lambda(const double val) {
  this->t_lambda = val;
}

void Coal::__set_a_lambda(const double val) {
  this->a_lambda = val;
}

void Coal::__set_p1_k(const double val) {
  this->p1_k = val;
}

void Coal::__set_p2_k(const double val) {
  this->p2_k = val;
}

void Coal::__set_gas_q(const double val) {
  this->gas_q = val;
}

void Coal::__set_core_height(const double val) {
  this->core_height = val;
}

void Coal::__set_core_area(const double val) {
  this->core_area = val;
}

void Coal::__set_gas_viscosity(const double val) {
  this->gas_viscosity = val;
}

void Coal::__set_decay_alpha(const double val) {
  this->decay_alpha = val;
}

void Coal::__set_permeability_lambda(const double val) {
  this->permeability_lambda = val;
}

void Coal::__set_permeability_k(const double val) {
  this->permeability_k = val;
}

void Coal::__set_eval_difficult(const int32_t val) {
  this->eval_difficult = val;
}

void Coal::__set_comment(const std::string& val) {
  this->comment = val;
}

void Coal::__set_relative_layer_gap(const double val) {
  this->relative_layer_gap = val;
}

void Coal::__set_is_protectable(const int32_t val) {
  this->is_protectable = val;
}

uint32_t Coal::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mine_id);
          this->__isset.mine_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->minable);
          this->__isset.minable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->thick);
          this->__isset.thick = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hw);
          this->__isset.hw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr);
          this->__isset.qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qr);
          this->__isset.fore_qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qa);
          this->__isset.fore_qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rank);
          this->__isset.rank = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->quality);
          this->__isset.quality = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pressure);
          this->__isset.pressure = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_content);
          this->__isset.gas_content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->f_value);
          this->__isset.f_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->res_abundance);
          this->__isset.res_abundance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->complexity);
          this->__isset.complexity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mine_index);
          this->__isset.mine_index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->var_coeff);
          this->__isset.var_coeff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->stability);
          this->__isset.stability = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dip_angle);
          this->__isset.dip_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->czh);
          this->__isset.czh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->czk);
          this->__isset.czk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->czw);
          this->__isset.czw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hw_sum);
          this->__isset.hw_sum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rock);
          this->__isset.rock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hhh);
          this->__isset.hhh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->layer_gap);
          this->__isset.layer_gap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->influence_factor);
          this->__isset.influence_factor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->res_a1);
          this->__isset.res_a1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_x1);
          this->__isset.gas_x1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->res_a2);
          this->__isset.res_a2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_x2);
          this->__isset.gas_x2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_wc);
          this->__isset.pump_wc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 35:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k);
          this->__isset.pump_k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 36:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k2);
          this->__isset.pump_k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 37:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k3);
          this->__isset.pump_k3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 38:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k4);
          this->__isset.pump_k4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 39:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k1);
          this->__isset.pump_k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pore_datas);
          this->__isset.pore_datas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rho);
          this->__isset.rho = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 42:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->vr);
          this->__isset.vr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 43:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_w0);
          this->__isset.gas_w0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 44:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_wc2);
          this->__isset.gas_wc2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 45:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_wc3);
          this->__isset.gas_wc3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 46:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_eta);
          this->__isset.gas_eta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 47:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q0);
          this->__isset.q0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 48:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eval_method);
          this->__isset.eval_method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 49:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q0_alpha);
          this->__isset.q0_alpha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 50:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qt_alpha);
          this->__isset.qt_alpha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 51:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->t_alpha);
          this->__isset.t_alpha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 52:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q_lambda);
          this->__isset.q_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 53:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->r_lambda);
          this->__isset.r_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 54:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p0_lambda);
          this->__isset.p0_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 55:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1_lambda);
          this->__isset.p1_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 56:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->t_lambda);
          this->__isset.t_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 57:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a_lambda);
          this->__isset.a_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 58:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1_k);
          this->__isset.p1_k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 59:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p2_k);
          this->__isset.p2_k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 60:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_q);
          this->__isset.gas_q = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 61:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->core_height);
          this->__isset.core_height = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 62:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->core_area);
          this->__isset.core_area = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 63:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_viscosity);
          this->__isset.gas_viscosity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 64:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->decay_alpha);
          this->__isset.decay_alpha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 65:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->permeability_lambda);
          this->__isset.permeability_lambda = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 66:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->permeability_k);
          this->__isset.permeability_k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 67:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->eval_difficult);
          this->__isset.eval_difficult = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 68:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 69:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->relative_layer_gap);
          this->__isset.relative_layer_gap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 70:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->is_protectable);
          this->__isset.is_protectable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Coal::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Coal");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mine_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minable", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->minable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("thick", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->thick);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hw", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->hw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qr", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->fore_qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qa", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->fore_qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rank", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->rank);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("quality", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->quality);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pressure", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->pressure);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_content", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->gas_content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("f_value", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->f_value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("res_abundance", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->res_abundance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("complexity", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->complexity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_index", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->mine_index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("var_coeff", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->var_coeff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stability", ::apache::thrift::protocol::T_I32, 20);
  xfer += oprot->writeI32(this->stability);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dip_angle", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->dip_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("czh", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->czh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("czk", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->czk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("czw", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->czw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hw_sum", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->hw_sum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rock", ::apache::thrift::protocol::T_I32, 26);
  xfer += oprot->writeI32(this->rock);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hhh", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->hhh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layer_gap", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->layer_gap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("influence_factor", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->influence_factor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("res_a1", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->res_a1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_x1", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->gas_x1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("res_a2", ::apache::thrift::protocol::T_DOUBLE, 32);
  xfer += oprot->writeDouble(this->res_a2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_x2", ::apache::thrift::protocol::T_DOUBLE, 33);
  xfer += oprot->writeDouble(this->gas_x2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_wc", ::apache::thrift::protocol::T_DOUBLE, 34);
  xfer += oprot->writeDouble(this->pump_wc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k", ::apache::thrift::protocol::T_DOUBLE, 35);
  xfer += oprot->writeDouble(this->pump_k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k2", ::apache::thrift::protocol::T_DOUBLE, 36);
  xfer += oprot->writeDouble(this->pump_k2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k3", ::apache::thrift::protocol::T_DOUBLE, 37);
  xfer += oprot->writeDouble(this->pump_k3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k4", ::apache::thrift::protocol::T_DOUBLE, 38);
  xfer += oprot->writeDouble(this->pump_k4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k1", ::apache::thrift::protocol::T_DOUBLE, 39);
  xfer += oprot->writeDouble(this->pump_k1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_datas", ::apache::thrift::protocol::T_STRING, 40);
  xfer += oprot->writeString(this->pore_datas);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rho", ::apache::thrift::protocol::T_DOUBLE, 41);
  xfer += oprot->writeDouble(this->rho);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vr", ::apache::thrift::protocol::T_DOUBLE, 42);
  xfer += oprot->writeDouble(this->vr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_w0", ::apache::thrift::protocol::T_DOUBLE, 43);
  xfer += oprot->writeDouble(this->gas_w0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_wc2", ::apache::thrift::protocol::T_DOUBLE, 44);
  xfer += oprot->writeDouble(this->gas_wc2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_wc3", ::apache::thrift::protocol::T_DOUBLE, 45);
  xfer += oprot->writeDouble(this->gas_wc3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_eta", ::apache::thrift::protocol::T_DOUBLE, 46);
  xfer += oprot->writeDouble(this->gas_eta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q0", ::apache::thrift::protocol::T_DOUBLE, 47);
  xfer += oprot->writeDouble(this->q0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eval_method", ::apache::thrift::protocol::T_I32, 48);
  xfer += oprot->writeI32(this->eval_method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q0_alpha", ::apache::thrift::protocol::T_DOUBLE, 49);
  xfer += oprot->writeDouble(this->q0_alpha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qt_alpha", ::apache::thrift::protocol::T_DOUBLE, 50);
  xfer += oprot->writeDouble(this->qt_alpha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t_alpha", ::apache::thrift::protocol::T_DOUBLE, 51);
  xfer += oprot->writeDouble(this->t_alpha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q_lambda", ::apache::thrift::protocol::T_DOUBLE, 52);
  xfer += oprot->writeDouble(this->q_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r_lambda", ::apache::thrift::protocol::T_DOUBLE, 53);
  xfer += oprot->writeDouble(this->r_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p0_lambda", ::apache::thrift::protocol::T_DOUBLE, 54);
  xfer += oprot->writeDouble(this->p0_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1_lambda", ::apache::thrift::protocol::T_DOUBLE, 55);
  xfer += oprot->writeDouble(this->p1_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t_lambda", ::apache::thrift::protocol::T_DOUBLE, 56);
  xfer += oprot->writeDouble(this->t_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a_lambda", ::apache::thrift::protocol::T_DOUBLE, 57);
  xfer += oprot->writeDouble(this->a_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1_k", ::apache::thrift::protocol::T_DOUBLE, 58);
  xfer += oprot->writeDouble(this->p1_k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p2_k", ::apache::thrift::protocol::T_DOUBLE, 59);
  xfer += oprot->writeDouble(this->p2_k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_q", ::apache::thrift::protocol::T_DOUBLE, 60);
  xfer += oprot->writeDouble(this->gas_q);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("core_height", ::apache::thrift::protocol::T_DOUBLE, 61);
  xfer += oprot->writeDouble(this->core_height);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("core_area", ::apache::thrift::protocol::T_DOUBLE, 62);
  xfer += oprot->writeDouble(this->core_area);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_viscosity", ::apache::thrift::protocol::T_DOUBLE, 63);
  xfer += oprot->writeDouble(this->gas_viscosity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("decay_alpha", ::apache::thrift::protocol::T_DOUBLE, 64);
  xfer += oprot->writeDouble(this->decay_alpha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permeability_lambda", ::apache::thrift::protocol::T_DOUBLE, 65);
  xfer += oprot->writeDouble(this->permeability_lambda);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("permeability_k", ::apache::thrift::protocol::T_DOUBLE, 66);
  xfer += oprot->writeDouble(this->permeability_k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eval_difficult", ::apache::thrift::protocol::T_I32, 67);
  xfer += oprot->writeI32(this->eval_difficult);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 68);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("relative_layer_gap", ::apache::thrift::protocol::T_DOUBLE, 69);
  xfer += oprot->writeDouble(this->relative_layer_gap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_protectable", ::apache::thrift::protocol::T_I32, 70);
  xfer += oprot->writeI32(this->is_protectable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Coal &a, Coal &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.mine_id, b.mine_id);
  swap(a.name, b.name);
  swap(a.minable, b.minable);
  swap(a.thick, b.thick);
  swap(a.hw, b.hw);
  swap(a.qa, b.qa);
  swap(a.qr, b.qr);
  swap(a.fore_qr, b.fore_qr);
  swap(a.fore_qa, b.fore_qa);
  swap(a.rank, b.rank);
  swap(a.quality, b.quality);
  swap(a.pressure, b.pressure);
  swap(a.gas_content, b.gas_content);
  swap(a.f_value, b.f_value);
  swap(a.res_abundance, b.res_abundance);
  swap(a.complexity, b.complexity);
  swap(a.mine_index, b.mine_index);
  swap(a.var_coeff, b.var_coeff);
  swap(a.stability, b.stability);
  swap(a.dip_angle, b.dip_angle);
  swap(a.czh, b.czh);
  swap(a.czk, b.czk);
  swap(a.czw, b.czw);
  swap(a.hw_sum, b.hw_sum);
  swap(a.rock, b.rock);
  swap(a.hhh, b.hhh);
  swap(a.layer_gap, b.layer_gap);
  swap(a.influence_factor, b.influence_factor);
  swap(a.res_a1, b.res_a1);
  swap(a.gas_x1, b.gas_x1);
  swap(a.res_a2, b.res_a2);
  swap(a.gas_x2, b.gas_x2);
  swap(a.pump_wc, b.pump_wc);
  swap(a.pump_k, b.pump_k);
  swap(a.pump_k2, b.pump_k2);
  swap(a.pump_k3, b.pump_k3);
  swap(a.pump_k4, b.pump_k4);
  swap(a.pump_k1, b.pump_k1);
  swap(a.pore_datas, b.pore_datas);
  swap(a.rho, b.rho);
  swap(a.vr, b.vr);
  swap(a.gas_w0, b.gas_w0);
  swap(a.gas_wc2, b.gas_wc2);
  swap(a.gas_wc3, b.gas_wc3);
  swap(a.gas_eta, b.gas_eta);
  swap(a.q0, b.q0);
  swap(a.eval_method, b.eval_method);
  swap(a.q0_alpha, b.q0_alpha);
  swap(a.qt_alpha, b.qt_alpha);
  swap(a.t_alpha, b.t_alpha);
  swap(a.q_lambda, b.q_lambda);
  swap(a.r_lambda, b.r_lambda);
  swap(a.p0_lambda, b.p0_lambda);
  swap(a.p1_lambda, b.p1_lambda);
  swap(a.t_lambda, b.t_lambda);
  swap(a.a_lambda, b.a_lambda);
  swap(a.p1_k, b.p1_k);
  swap(a.p2_k, b.p2_k);
  swap(a.gas_q, b.gas_q);
  swap(a.core_height, b.core_height);
  swap(a.core_area, b.core_area);
  swap(a.gas_viscosity, b.gas_viscosity);
  swap(a.decay_alpha, b.decay_alpha);
  swap(a.permeability_lambda, b.permeability_lambda);
  swap(a.permeability_k, b.permeability_k);
  swap(a.eval_difficult, b.eval_difficult);
  swap(a.comment, b.comment);
  swap(a.relative_layer_gap, b.relative_layer_gap);
  swap(a.is_protectable, b.is_protectable);
  swap(a.__isset, b.__isset);
}

Coal::Coal(const Coal& other4) {
  id = other4.id;
  mine_id = other4.mine_id;
  name = other4.name;
  minable = other4.minable;
  thick = other4.thick;
  hw = other4.hw;
  qa = other4.qa;
  qr = other4.qr;
  fore_qr = other4.fore_qr;
  fore_qa = other4.fore_qa;
  rank = other4.rank;
  quality = other4.quality;
  pressure = other4.pressure;
  gas_content = other4.gas_content;
  f_value = other4.f_value;
  res_abundance = other4.res_abundance;
  complexity = other4.complexity;
  mine_index = other4.mine_index;
  var_coeff = other4.var_coeff;
  stability = other4.stability;
  dip_angle = other4.dip_angle;
  czh = other4.czh;
  czk = other4.czk;
  czw = other4.czw;
  hw_sum = other4.hw_sum;
  rock = other4.rock;
  hhh = other4.hhh;
  layer_gap = other4.layer_gap;
  influence_factor = other4.influence_factor;
  res_a1 = other4.res_a1;
  gas_x1 = other4.gas_x1;
  res_a2 = other4.res_a2;
  gas_x2 = other4.gas_x2;
  pump_wc = other4.pump_wc;
  pump_k = other4.pump_k;
  pump_k2 = other4.pump_k2;
  pump_k3 = other4.pump_k3;
  pump_k4 = other4.pump_k4;
  pump_k1 = other4.pump_k1;
  pore_datas = other4.pore_datas;
  rho = other4.rho;
  vr = other4.vr;
  gas_w0 = other4.gas_w0;
  gas_wc2 = other4.gas_wc2;
  gas_wc3 = other4.gas_wc3;
  gas_eta = other4.gas_eta;
  q0 = other4.q0;
  eval_method = other4.eval_method;
  q0_alpha = other4.q0_alpha;
  qt_alpha = other4.qt_alpha;
  t_alpha = other4.t_alpha;
  q_lambda = other4.q_lambda;
  r_lambda = other4.r_lambda;
  p0_lambda = other4.p0_lambda;
  p1_lambda = other4.p1_lambda;
  t_lambda = other4.t_lambda;
  a_lambda = other4.a_lambda;
  p1_k = other4.p1_k;
  p2_k = other4.p2_k;
  gas_q = other4.gas_q;
  core_height = other4.core_height;
  core_area = other4.core_area;
  gas_viscosity = other4.gas_viscosity;
  decay_alpha = other4.decay_alpha;
  permeability_lambda = other4.permeability_lambda;
  permeability_k = other4.permeability_k;
  eval_difficult = other4.eval_difficult;
  comment = other4.comment;
  relative_layer_gap = other4.relative_layer_gap;
  is_protectable = other4.is_protectable;
  __isset = other4.__isset;
}
Coal& Coal::operator=(const Coal& other5) {
  id = other5.id;
  mine_id = other5.mine_id;
  name = other5.name;
  minable = other5.minable;
  thick = other5.thick;
  hw = other5.hw;
  qa = other5.qa;
  qr = other5.qr;
  fore_qr = other5.fore_qr;
  fore_qa = other5.fore_qa;
  rank = other5.rank;
  quality = other5.quality;
  pressure = other5.pressure;
  gas_content = other5.gas_content;
  f_value = other5.f_value;
  res_abundance = other5.res_abundance;
  complexity = other5.complexity;
  mine_index = other5.mine_index;
  var_coeff = other5.var_coeff;
  stability = other5.stability;
  dip_angle = other5.dip_angle;
  czh = other5.czh;
  czk = other5.czk;
  czw = other5.czw;
  hw_sum = other5.hw_sum;
  rock = other5.rock;
  hhh = other5.hhh;
  layer_gap = other5.layer_gap;
  influence_factor = other5.influence_factor;
  res_a1 = other5.res_a1;
  gas_x1 = other5.gas_x1;
  res_a2 = other5.res_a2;
  gas_x2 = other5.gas_x2;
  pump_wc = other5.pump_wc;
  pump_k = other5.pump_k;
  pump_k2 = other5.pump_k2;
  pump_k3 = other5.pump_k3;
  pump_k4 = other5.pump_k4;
  pump_k1 = other5.pump_k1;
  pore_datas = other5.pore_datas;
  rho = other5.rho;
  vr = other5.vr;
  gas_w0 = other5.gas_w0;
  gas_wc2 = other5.gas_wc2;
  gas_wc3 = other5.gas_wc3;
  gas_eta = other5.gas_eta;
  q0 = other5.q0;
  eval_method = other5.eval_method;
  q0_alpha = other5.q0_alpha;
  qt_alpha = other5.qt_alpha;
  t_alpha = other5.t_alpha;
  q_lambda = other5.q_lambda;
  r_lambda = other5.r_lambda;
  p0_lambda = other5.p0_lambda;
  p1_lambda = other5.p1_lambda;
  t_lambda = other5.t_lambda;
  a_lambda = other5.a_lambda;
  p1_k = other5.p1_k;
  p2_k = other5.p2_k;
  gas_q = other5.gas_q;
  core_height = other5.core_height;
  core_area = other5.core_area;
  gas_viscosity = other5.gas_viscosity;
  decay_alpha = other5.decay_alpha;
  permeability_lambda = other5.permeability_lambda;
  permeability_k = other5.permeability_k;
  eval_difficult = other5.eval_difficult;
  comment = other5.comment;
  relative_layer_gap = other5.relative_layer_gap;
  is_protectable = other5.is_protectable;
  __isset = other5.__isset;
  return *this;
}
void Coal::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Coal(";
  out << "id=" << to_string(id);
  out << ", " << "mine_id=" << to_string(mine_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "minable=" << to_string(minable);
  out << ", " << "thick=" << to_string(thick);
  out << ", " << "hw=" << to_string(hw);
  out << ", " << "qa=" << to_string(qa);
  out << ", " << "qr=" << to_string(qr);
  out << ", " << "fore_qr=" << to_string(fore_qr);
  out << ", " << "fore_qa=" << to_string(fore_qa);
  out << ", " << "rank=" << to_string(rank);
  out << ", " << "quality=" << to_string(quality);
  out << ", " << "pressure=" << to_string(pressure);
  out << ", " << "gas_content=" << to_string(gas_content);
  out << ", " << "f_value=" << to_string(f_value);
  out << ", " << "res_abundance=" << to_string(res_abundance);
  out << ", " << "complexity=" << to_string(complexity);
  out << ", " << "mine_index=" << to_string(mine_index);
  out << ", " << "var_coeff=" << to_string(var_coeff);
  out << ", " << "stability=" << to_string(stability);
  out << ", " << "dip_angle=" << to_string(dip_angle);
  out << ", " << "czh=" << to_string(czh);
  out << ", " << "czk=" << to_string(czk);
  out << ", " << "czw=" << to_string(czw);
  out << ", " << "hw_sum=" << to_string(hw_sum);
  out << ", " << "rock=" << to_string(rock);
  out << ", " << "hhh=" << to_string(hhh);
  out << ", " << "layer_gap=" << to_string(layer_gap);
  out << ", " << "influence_factor=" << to_string(influence_factor);
  out << ", " << "res_a1=" << to_string(res_a1);
  out << ", " << "gas_x1=" << to_string(gas_x1);
  out << ", " << "res_a2=" << to_string(res_a2);
  out << ", " << "gas_x2=" << to_string(gas_x2);
  out << ", " << "pump_wc=" << to_string(pump_wc);
  out << ", " << "pump_k=" << to_string(pump_k);
  out << ", " << "pump_k2=" << to_string(pump_k2);
  out << ", " << "pump_k3=" << to_string(pump_k3);
  out << ", " << "pump_k4=" << to_string(pump_k4);
  out << ", " << "pump_k1=" << to_string(pump_k1);
  out << ", " << "pore_datas=" << to_string(pore_datas);
  out << ", " << "rho=" << to_string(rho);
  out << ", " << "vr=" << to_string(vr);
  out << ", " << "gas_w0=" << to_string(gas_w0);
  out << ", " << "gas_wc2=" << to_string(gas_wc2);
  out << ", " << "gas_wc3=" << to_string(gas_wc3);
  out << ", " << "gas_eta=" << to_string(gas_eta);
  out << ", " << "q0=" << to_string(q0);
  out << ", " << "eval_method=" << to_string(eval_method);
  out << ", " << "q0_alpha=" << to_string(q0_alpha);
  out << ", " << "qt_alpha=" << to_string(qt_alpha);
  out << ", " << "t_alpha=" << to_string(t_alpha);
  out << ", " << "q_lambda=" << to_string(q_lambda);
  out << ", " << "r_lambda=" << to_string(r_lambda);
  out << ", " << "p0_lambda=" << to_string(p0_lambda);
  out << ", " << "p1_lambda=" << to_string(p1_lambda);
  out << ", " << "t_lambda=" << to_string(t_lambda);
  out << ", " << "a_lambda=" << to_string(a_lambda);
  out << ", " << "p1_k=" << to_string(p1_k);
  out << ", " << "p2_k=" << to_string(p2_k);
  out << ", " << "gas_q=" << to_string(gas_q);
  out << ", " << "core_height=" << to_string(core_height);
  out << ", " << "core_area=" << to_string(core_area);
  out << ", " << "gas_viscosity=" << to_string(gas_viscosity);
  out << ", " << "decay_alpha=" << to_string(decay_alpha);
  out << ", " << "permeability_lambda=" << to_string(permeability_lambda);
  out << ", " << "permeability_k=" << to_string(permeability_k);
  out << ", " << "eval_difficult=" << to_string(eval_difficult);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "relative_layer_gap=" << to_string(relative_layer_gap);
  out << ", " << "is_protectable=" << to_string(is_protectable);
  out << ")";
}


Complexity::~Complexity() throw() {
}


void Complexity::__set_id(const int32_t val) {
  this->id = val;
}

void Complexity::__set_name(const std::string& val) {
  this->name = val;
}

void Complexity::__set_details(const std::string& val) {
  this->details = val;
}

void Complexity::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t Complexity::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->details);
          this->__isset.details = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Complexity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Complexity");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("details", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->details);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Complexity &a, Complexity &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.details, b.details);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

Complexity::Complexity(const Complexity& other6) {
  id = other6.id;
  name = other6.name;
  details = other6.details;
  comment = other6.comment;
  __isset = other6.__isset;
}
Complexity& Complexity::operator=(const Complexity& other7) {
  id = other7.id;
  name = other7.name;
  details = other7.details;
  comment = other7.comment;
  __isset = other7.__isset;
  return *this;
}
void Complexity::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Complexity(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "details=" << to_string(details);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


DesignDrillingSurfTechnology::~DesignDrillingSurfTechnology() throw() {
}


void DesignDrillingSurfTechnology::__set_id(const int32_t val) {
  this->id = val;
}

void DesignDrillingSurfTechnology::__set_design_technology_id(const int32_t val) {
  this->design_technology_id = val;
}

void DesignDrillingSurfTechnology::__set_name(const std::string& val) {
  this->name = val;
}

void DesignDrillingSurfTechnology::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignDrillingSurfTechnology::__set_v_offset(const double val) {
  this->v_offset = val;
}

void DesignDrillingSurfTechnology::__set_h_offset(const double val) {
  this->h_offset = val;
}

void DesignDrillingSurfTechnology::__set_dp(const double val) {
  this->dp = val;
}

void DesignDrillingSurfTechnology::__set_gp(const double val) {
  this->gp = val;
}

void DesignDrillingSurfTechnology::__set_leading_dist(const double val) {
  this->leading_dist = val;
}

void DesignDrillingSurfTechnology::__set_gbp(const double val) {
  this->gbp = val;
}

void DesignDrillingSurfTechnology::__set_l_stripe(const double val) {
  this->l_stripe = val;
}

void DesignDrillingSurfTechnology::__set_ls(const double val) {
  this->ls = val;
}

void DesignDrillingSurfTechnology::__set_ws(const double val) {
  this->ws = val;
}

void DesignDrillingSurfTechnology::__set_hs(const double val) {
  this->hs = val;
}

void DesignDrillingSurfTechnology::__set_gs(const double val) {
  this->gs = val;
}

void DesignDrillingSurfTechnology::__set_wd(const double val) {
  this->wd = val;
}

void DesignDrillingSurfTechnology::__set_hd(const double val) {
  this->hd = val;
}

void DesignDrillingSurfTechnology::__set_l1(const double val) {
  this->l1 = val;
}

void DesignDrillingSurfTechnology::__set_l2(const double val) {
  this->l2 = val;
}

void DesignDrillingSurfTechnology::__set_w(const double val) {
  this->w = val;
}

void DesignDrillingSurfTechnology::__set_h(const double val) {
  this->h = val;
}

void DesignDrillingSurfTechnology::__set_top_side(const double val) {
  this->top_side = val;
}

void DesignDrillingSurfTechnology::__set_bottom_side(const double val) {
  this->bottom_side = val;
}

void DesignDrillingSurfTechnology::__set_left_side(const double val) {
  this->left_side = val;
}

void DesignDrillingSurfTechnology::__set_right_side(const double val) {
  this->right_side = val;
}

void DesignDrillingSurfTechnology::__set_lm(const double val) {
  this->lm = val;
}

void DesignDrillingSurfTechnology::__set_close_length(const double val) {
  this->close_length = val;
}

uint32_t DesignDrillingSurfTechnology::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_technology_id);
          this->__isset.design_technology_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v_offset);
          this->__isset.v_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h_offset);
          this->__isset.h_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dp);
          this->__isset.dp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gp);
          this->__isset.gp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->leading_dist);
          this->__isset.leading_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gbp);
          this->__isset.gbp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l_stripe);
          this->__isset.l_stripe = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ls);
          this->__isset.ls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ws);
          this->__isset.ws = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hs);
          this->__isset.hs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gs);
          this->__isset.gs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wd);
          this->__isset.wd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hd);
          this->__isset.hd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->top_side);
          this->__isset.top_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bottom_side);
          this->__isset.bottom_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->left_side);
          this->__isset.left_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->right_side);
          this->__isset.right_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lm);
          this->__isset.lm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->close_length);
          this->__isset.close_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignDrillingSurfTechnology::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignDrillingSurfTechnology");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_technology_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_technology_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_offset", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->v_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h_offset", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->h_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dp", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->dp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gp", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->gp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("leading_dist", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->leading_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gbp", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->gbp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l_stripe", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->l_stripe);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ls", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->ls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ws", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->ws);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hs", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->hs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gs", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->gs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wd", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->wd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hd", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->hd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top_side", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->top_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottom_side", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->bottom_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_side", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->left_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right_side", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->right_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lm", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->lm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_length", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->close_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignDrillingSurfTechnology &a, DesignDrillingSurfTechnology &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_technology_id, b.design_technology_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.v_offset, b.v_offset);
  swap(a.h_offset, b.h_offset);
  swap(a.dp, b.dp);
  swap(a.gp, b.gp);
  swap(a.leading_dist, b.leading_dist);
  swap(a.gbp, b.gbp);
  swap(a.l_stripe, b.l_stripe);
  swap(a.ls, b.ls);
  swap(a.ws, b.ws);
  swap(a.hs, b.hs);
  swap(a.gs, b.gs);
  swap(a.wd, b.wd);
  swap(a.hd, b.hd);
  swap(a.l1, b.l1);
  swap(a.l2, b.l2);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.top_side, b.top_side);
  swap(a.bottom_side, b.bottom_side);
  swap(a.left_side, b.left_side);
  swap(a.right_side, b.right_side);
  swap(a.lm, b.lm);
  swap(a.close_length, b.close_length);
  swap(a.__isset, b.__isset);
}

DesignDrillingSurfTechnology::DesignDrillingSurfTechnology(const DesignDrillingSurfTechnology& other8) {
  id = other8.id;
  design_technology_id = other8.design_technology_id;
  name = other8.name;
  comment = other8.comment;
  v_offset = other8.v_offset;
  h_offset = other8.h_offset;
  dp = other8.dp;
  gp = other8.gp;
  leading_dist = other8.leading_dist;
  gbp = other8.gbp;
  l_stripe = other8.l_stripe;
  ls = other8.ls;
  ws = other8.ws;
  hs = other8.hs;
  gs = other8.gs;
  wd = other8.wd;
  hd = other8.hd;
  l1 = other8.l1;
  l2 = other8.l2;
  w = other8.w;
  h = other8.h;
  top_side = other8.top_side;
  bottom_side = other8.bottom_side;
  left_side = other8.left_side;
  right_side = other8.right_side;
  lm = other8.lm;
  close_length = other8.close_length;
  __isset = other8.__isset;
}
DesignDrillingSurfTechnology& DesignDrillingSurfTechnology::operator=(const DesignDrillingSurfTechnology& other9) {
  id = other9.id;
  design_technology_id = other9.design_technology_id;
  name = other9.name;
  comment = other9.comment;
  v_offset = other9.v_offset;
  h_offset = other9.h_offset;
  dp = other9.dp;
  gp = other9.gp;
  leading_dist = other9.leading_dist;
  gbp = other9.gbp;
  l_stripe = other9.l_stripe;
  ls = other9.ls;
  ws = other9.ws;
  hs = other9.hs;
  gs = other9.gs;
  wd = other9.wd;
  hd = other9.hd;
  l1 = other9.l1;
  l2 = other9.l2;
  w = other9.w;
  h = other9.h;
  top_side = other9.top_side;
  bottom_side = other9.bottom_side;
  left_side = other9.left_side;
  right_side = other9.right_side;
  lm = other9.lm;
  close_length = other9.close_length;
  __isset = other9.__isset;
  return *this;
}
void DesignDrillingSurfTechnology::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignDrillingSurfTechnology(";
  out << "id=" << to_string(id);
  out << ", " << "design_technology_id=" << to_string(design_technology_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "v_offset=" << to_string(v_offset);
  out << ", " << "h_offset=" << to_string(h_offset);
  out << ", " << "dp=" << to_string(dp);
  out << ", " << "gp=" << to_string(gp);
  out << ", " << "leading_dist=" << to_string(leading_dist);
  out << ", " << "gbp=" << to_string(gbp);
  out << ", " << "l_stripe=" << to_string(l_stripe);
  out << ", " << "ls=" << to_string(ls);
  out << ", " << "ws=" << to_string(ws);
  out << ", " << "hs=" << to_string(hs);
  out << ", " << "gs=" << to_string(gs);
  out << ", " << "wd=" << to_string(wd);
  out << ", " << "hd=" << to_string(hd);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ", " << "top_side=" << to_string(top_side);
  out << ", " << "bottom_side=" << to_string(bottom_side);
  out << ", " << "left_side=" << to_string(left_side);
  out << ", " << "right_side=" << to_string(right_side);
  out << ", " << "lm=" << to_string(lm);
  out << ", " << "close_length=" << to_string(close_length);
  out << ")";
}


DesignEvalUnit::~DesignEvalUnit() throw() {
}


void DesignEvalUnit::__set_id(const int32_t val) {
  this->id = val;
}

void DesignEvalUnit::__set_design_eval_unit_partition_id(const int32_t val) {
  this->design_eval_unit_partition_id = val;
}

void DesignEvalUnit::__set_name(const std::string& val) {
  this->name = val;
}

void DesignEvalUnit::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignEvalUnit::__set_num(const int32_t val) {
  this->num = val;
}

void DesignEvalUnit::__set_l(const double val) {
  this->l = val;
}

void DesignEvalUnit::__set_t(const int32_t val) {
  this->t = val;
}

void DesignEvalUnit::__set_gap(const double val) {
  this->gap = val;
}

uint32_t DesignEvalUnit::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_eval_unit_partition_id);
          this->__isset.design_eval_unit_partition_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l);
          this->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gap);
          this->__isset.gap = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignEvalUnit::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignEvalUnit");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_eval_unit_partition_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_eval_unit_partition_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gap", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->gap);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignEvalUnit &a, DesignEvalUnit &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_eval_unit_partition_id, b.design_eval_unit_partition_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.num, b.num);
  swap(a.l, b.l);
  swap(a.t, b.t);
  swap(a.gap, b.gap);
  swap(a.__isset, b.__isset);
}

DesignEvalUnit::DesignEvalUnit(const DesignEvalUnit& other10) {
  id = other10.id;
  design_eval_unit_partition_id = other10.design_eval_unit_partition_id;
  name = other10.name;
  comment = other10.comment;
  num = other10.num;
  l = other10.l;
  t = other10.t;
  gap = other10.gap;
  __isset = other10.__isset;
}
DesignEvalUnit& DesignEvalUnit::operator=(const DesignEvalUnit& other11) {
  id = other11.id;
  design_eval_unit_partition_id = other11.design_eval_unit_partition_id;
  name = other11.name;
  comment = other11.comment;
  num = other11.num;
  l = other11.l;
  t = other11.t;
  gap = other11.gap;
  __isset = other11.__isset;
  return *this;
}
void DesignEvalUnit::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignEvalUnit(";
  out << "id=" << to_string(id);
  out << ", " << "design_eval_unit_partition_id=" << to_string(design_eval_unit_partition_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "num=" << to_string(num);
  out << ", " << "l=" << to_string(l);
  out << ", " << "t=" << to_string(t);
  out << ", " << "gap=" << to_string(gap);
  out << ")";
}


DesignEvalUnitPartition::~DesignEvalUnitPartition() throw() {
}


void DesignEvalUnitPartition::__set_id(const int32_t val) {
  this->id = val;
}

void DesignEvalUnitPartition::__set_work_surf_id(const int32_t val) {
  this->work_surf_id = val;
}

void DesignEvalUnitPartition::__set_name(const std::string& val) {
  this->name = val;
}

void DesignEvalUnitPartition::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignEvalUnitPartition::__set_l2(const double val) {
  this->l2 = val;
}

void DesignEvalUnitPartition::__set_l1(const double val) {
  this->l1 = val;
}

void DesignEvalUnitPartition::__set_w(const double val) {
  this->w = val;
}

void DesignEvalUnitPartition::__set_h(const double val) {
  this->h = val;
}

void DesignEvalUnitPartition::__set_l(const double val) {
  this->l = val;
}

void DesignEvalUnitPartition::__set_r(const double val) {
  this->r = val;
}

void DesignEvalUnitPartition::__set_t(const double val) {
  this->t = val;
}

void DesignEvalUnitPartition::__set_v(const double val) {
  this->v = val;
}

uint32_t DesignEvalUnitPartition::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_surf_id);
          this->__isset.work_surf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l);
          this->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->r);
          this->__isset.r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v);
          this->__isset.v = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignEvalUnitPartition::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignEvalUnitPartition");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_surf_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_surf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->v);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignEvalUnitPartition &a, DesignEvalUnitPartition &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_surf_id, b.work_surf_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.l2, b.l2);
  swap(a.l1, b.l1);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.l, b.l);
  swap(a.r, b.r);
  swap(a.t, b.t);
  swap(a.v, b.v);
  swap(a.__isset, b.__isset);
}

DesignEvalUnitPartition::DesignEvalUnitPartition(const DesignEvalUnitPartition& other12) {
  id = other12.id;
  work_surf_id = other12.work_surf_id;
  name = other12.name;
  comment = other12.comment;
  l2 = other12.l2;
  l1 = other12.l1;
  w = other12.w;
  h = other12.h;
  l = other12.l;
  r = other12.r;
  t = other12.t;
  v = other12.v;
  __isset = other12.__isset;
}
DesignEvalUnitPartition& DesignEvalUnitPartition::operator=(const DesignEvalUnitPartition& other13) {
  id = other13.id;
  work_surf_id = other13.work_surf_id;
  name = other13.name;
  comment = other13.comment;
  l2 = other13.l2;
  l1 = other13.l1;
  w = other13.w;
  h = other13.h;
  l = other13.l;
  r = other13.r;
  t = other13.t;
  v = other13.v;
  __isset = other13.__isset;
  return *this;
}
void DesignEvalUnitPartition::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignEvalUnitPartition(";
  out << "id=" << to_string(id);
  out << ", " << "work_surf_id=" << to_string(work_surf_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ", " << "l=" << to_string(l);
  out << ", " << "r=" << to_string(r);
  out << ", " << "t=" << to_string(t);
  out << ", " << "v=" << to_string(v);
  out << ")";
}


DesignGoafPore::~DesignGoafPore() throw() {
}


void DesignGoafPore::__set_id(const int32_t val) {
  this->id = val;
}

void DesignGoafPore::__set_design_goaf_technology_id(const int32_t val) {
  this->design_goaf_technology_id = val;
}

void DesignGoafPore::__set_name(const std::string& val) {
  this->name = val;
}

void DesignGoafPore::__set_h_offset(const double val) {
  this->h_offset = val;
}

void DesignGoafPore::__set_v_offset(const double val) {
  this->v_offset = val;
}

void DesignGoafPore::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t DesignGoafPore::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_goaf_technology_id);
          this->__isset.design_goaf_technology_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h_offset);
          this->__isset.h_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v_offset);
          this->__isset.v_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignGoafPore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignGoafPore");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_goaf_technology_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_goaf_technology_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h_offset", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->h_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_offset", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->v_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignGoafPore &a, DesignGoafPore &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_goaf_technology_id, b.design_goaf_technology_id);
  swap(a.name, b.name);
  swap(a.h_offset, b.h_offset);
  swap(a.v_offset, b.v_offset);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

DesignGoafPore::DesignGoafPore(const DesignGoafPore& other14) {
  id = other14.id;
  design_goaf_technology_id = other14.design_goaf_technology_id;
  name = other14.name;
  h_offset = other14.h_offset;
  v_offset = other14.v_offset;
  comment = other14.comment;
  __isset = other14.__isset;
}
DesignGoafPore& DesignGoafPore::operator=(const DesignGoafPore& other15) {
  id = other15.id;
  design_goaf_technology_id = other15.design_goaf_technology_id;
  name = other15.name;
  h_offset = other15.h_offset;
  v_offset = other15.v_offset;
  comment = other15.comment;
  __isset = other15.__isset;
  return *this;
}
void DesignGoafPore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignGoafPore(";
  out << "id=" << to_string(id);
  out << ", " << "design_goaf_technology_id=" << to_string(design_goaf_technology_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "h_offset=" << to_string(h_offset);
  out << ", " << "v_offset=" << to_string(v_offset);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


DesignGoafTechnology::~DesignGoafTechnology() throw() {
}


void DesignGoafTechnology::__set_id(const int32_t val) {
  this->id = val;
}

void DesignGoafTechnology::__set_design_technology_id(const int32_t val) {
  this->design_technology_id = val;
}

void DesignGoafTechnology::__set_name(const std::string& val) {
  this->name = val;
}

void DesignGoafTechnology::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignGoafTechnology::__set_pore_stubble(const double val) {
  this->pore_stubble = val;
}

void DesignGoafTechnology::__set_dp(const double val) {
  this->dp = val;
}

void DesignGoafTechnology::__set_gs(const double val) {
  this->gs = val;
}

void DesignGoafTechnology::__set_ls(const double val) {
  this->ls = val;
}

void DesignGoafTechnology::__set_ws(const double val) {
  this->ws = val;
}

void DesignGoafTechnology::__set_hs(const double val) {
  this->hs = val;
}

void DesignGoafTechnology::__set_gp(const double val) {
  this->gp = val;
}

void DesignGoafTechnology::__set_pore_num(const int32_t val) {
  this->pore_num = val;
}

void DesignGoafTechnology::__set_top_dist(const double val) {
  this->top_dist = val;
}

void DesignGoafTechnology::__set_h_offset(const std::string& val) {
  this->h_offset = val;
}

void DesignGoafTechnology::__set_y_offset(const std::string& val) {
  this->y_offset = val;
}

void DesignGoafTechnology::__set_l1(const double val) {
  this->l1 = val;
}

void DesignGoafTechnology::__set_l2(const double val) {
  this->l2 = val;
}

void DesignGoafTechnology::__set_w(const double val) {
  this->w = val;
}

void DesignGoafTechnology::__set_h(const double val) {
  this->h = val;
}

void DesignGoafTechnology::__set_close_length(const double val) {
  this->close_length = val;
}

uint32_t DesignGoafTechnology::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_technology_id);
          this->__isset.design_technology_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pore_stubble);
          this->__isset.pore_stubble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dp);
          this->__isset.dp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gs);
          this->__isset.gs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ls);
          this->__isset.ls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ws);
          this->__isset.ws = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hs);
          this->__isset.hs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gp);
          this->__isset.gp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pore_num);
          this->__isset.pore_num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->top_dist);
          this->__isset.top_dist = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->h_offset);
          this->__isset.h_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->y_offset);
          this->__isset.y_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->close_length);
          this->__isset.close_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignGoafTechnology::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignGoafTechnology");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_technology_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_technology_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_stubble", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->pore_stubble);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dp", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->dp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gs", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->gs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ls", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->ls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ws", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->ws);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hs", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->hs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gp", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->gp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_num", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->pore_num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top_dist", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->top_dist);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h_offset", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->h_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y_offset", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->y_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_length", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->close_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignGoafTechnology &a, DesignGoafTechnology &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_technology_id, b.design_technology_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.pore_stubble, b.pore_stubble);
  swap(a.dp, b.dp);
  swap(a.gs, b.gs);
  swap(a.ls, b.ls);
  swap(a.ws, b.ws);
  swap(a.hs, b.hs);
  swap(a.gp, b.gp);
  swap(a.pore_num, b.pore_num);
  swap(a.top_dist, b.top_dist);
  swap(a.h_offset, b.h_offset);
  swap(a.y_offset, b.y_offset);
  swap(a.l1, b.l1);
  swap(a.l2, b.l2);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.close_length, b.close_length);
  swap(a.__isset, b.__isset);
}

DesignGoafTechnology::DesignGoafTechnology(const DesignGoafTechnology& other16) {
  id = other16.id;
  design_technology_id = other16.design_technology_id;
  name = other16.name;
  comment = other16.comment;
  pore_stubble = other16.pore_stubble;
  dp = other16.dp;
  gs = other16.gs;
  ls = other16.ls;
  ws = other16.ws;
  hs = other16.hs;
  gp = other16.gp;
  pore_num = other16.pore_num;
  top_dist = other16.top_dist;
  h_offset = other16.h_offset;
  y_offset = other16.y_offset;
  l1 = other16.l1;
  l2 = other16.l2;
  w = other16.w;
  h = other16.h;
  close_length = other16.close_length;
  __isset = other16.__isset;
}
DesignGoafTechnology& DesignGoafTechnology::operator=(const DesignGoafTechnology& other17) {
  id = other17.id;
  design_technology_id = other17.design_technology_id;
  name = other17.name;
  comment = other17.comment;
  pore_stubble = other17.pore_stubble;
  dp = other17.dp;
  gs = other17.gs;
  ls = other17.ls;
  ws = other17.ws;
  hs = other17.hs;
  gp = other17.gp;
  pore_num = other17.pore_num;
  top_dist = other17.top_dist;
  h_offset = other17.h_offset;
  y_offset = other17.y_offset;
  l1 = other17.l1;
  l2 = other17.l2;
  w = other17.w;
  h = other17.h;
  close_length = other17.close_length;
  __isset = other17.__isset;
  return *this;
}
void DesignGoafTechnology::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignGoafTechnology(";
  out << "id=" << to_string(id);
  out << ", " << "design_technology_id=" << to_string(design_technology_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "pore_stubble=" << to_string(pore_stubble);
  out << ", " << "dp=" << to_string(dp);
  out << ", " << "gs=" << to_string(gs);
  out << ", " << "ls=" << to_string(ls);
  out << ", " << "ws=" << to_string(ws);
  out << ", " << "hs=" << to_string(hs);
  out << ", " << "gp=" << to_string(gp);
  out << ", " << "pore_num=" << to_string(pore_num);
  out << ", " << "top_dist=" << to_string(top_dist);
  out << ", " << "h_offset=" << to_string(h_offset);
  out << ", " << "y_offset=" << to_string(y_offset);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ", " << "close_length=" << to_string(close_length);
  out << ")";
}


DesignPore::~DesignPore() throw() {
}


void DesignPore::__set_id(const int32_t val) {
  this->id = val;
}

void DesignPore::__set_design_eval_unit_id(const int32_t val) {
  this->design_eval_unit_id = val;
}

void DesignPore::__set_design_site_id(const int32_t val) {
  this->design_site_id = val;
}

void DesignPore::__set_name(const std::string& val) {
  this->name = val;
}

void DesignPore::__set_d(const double val) {
  this->d = val;
}

void DesignPore::__set_x1(const double val) {
  this->x1 = val;
}

void DesignPore::__set_y1(const double val) {
  this->y1 = val;
}

void DesignPore::__set_z1(const double val) {
  this->z1 = val;
}

void DesignPore::__set_x2(const double val) {
  this->x2 = val;
}

void DesignPore::__set_y2(const double val) {
  this->y2 = val;
}

void DesignPore::__set_z2(const double val) {
  this->z2 = val;
}

void DesignPore::__set_length(const double val) {
  this->length = val;
}

void DesignPore::__set_angle1(const double val) {
  this->angle1 = val;
}

void DesignPore::__set_angle2(const double val) {
  this->angle2 = val;
}

void DesignPore::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignPore::__set_t(const int32_t val) {
  this->t = val;
}

uint32_t DesignPore::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_eval_unit_id);
          this->__isset.design_eval_unit_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_site_id);
          this->__isset.design_site_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x1);
          this->__isset.x1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y1);
          this->__isset.y1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z1);
          this->__isset.z1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x2);
          this->__isset.x2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y2);
          this->__isset.y2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z2);
          this->__isset.z2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle1);
          this->__isset.angle1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle2);
          this->__isset.angle2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignPore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignPore");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_eval_unit_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_eval_unit_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_site_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->design_site_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->d);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x1", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->x1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y1", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->y1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z1", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->z1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x2", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->x2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y2", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->y2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z2", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->z2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle1", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->angle1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle2", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->angle2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_I32, 16);
  xfer += oprot->writeI32(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignPore &a, DesignPore &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_eval_unit_id, b.design_eval_unit_id);
  swap(a.design_site_id, b.design_site_id);
  swap(a.name, b.name);
  swap(a.d, b.d);
  swap(a.x1, b.x1);
  swap(a.y1, b.y1);
  swap(a.z1, b.z1);
  swap(a.x2, b.x2);
  swap(a.y2, b.y2);
  swap(a.z2, b.z2);
  swap(a.length, b.length);
  swap(a.angle1, b.angle1);
  swap(a.angle2, b.angle2);
  swap(a.comment, b.comment);
  swap(a.t, b.t);
  swap(a.__isset, b.__isset);
}

DesignPore::DesignPore(const DesignPore& other18) {
  id = other18.id;
  design_eval_unit_id = other18.design_eval_unit_id;
  design_site_id = other18.design_site_id;
  name = other18.name;
  d = other18.d;
  x1 = other18.x1;
  y1 = other18.y1;
  z1 = other18.z1;
  x2 = other18.x2;
  y2 = other18.y2;
  z2 = other18.z2;
  length = other18.length;
  angle1 = other18.angle1;
  angle2 = other18.angle2;
  comment = other18.comment;
  t = other18.t;
  __isset = other18.__isset;
}
DesignPore& DesignPore::operator=(const DesignPore& other19) {
  id = other19.id;
  design_eval_unit_id = other19.design_eval_unit_id;
  design_site_id = other19.design_site_id;
  name = other19.name;
  d = other19.d;
  x1 = other19.x1;
  y1 = other19.y1;
  z1 = other19.z1;
  x2 = other19.x2;
  y2 = other19.y2;
  z2 = other19.z2;
  length = other19.length;
  angle1 = other19.angle1;
  angle2 = other19.angle2;
  comment = other19.comment;
  t = other19.t;
  __isset = other19.__isset;
  return *this;
}
void DesignPore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignPore(";
  out << "id=" << to_string(id);
  out << ", " << "design_eval_unit_id=" << to_string(design_eval_unit_id);
  out << ", " << "design_site_id=" << to_string(design_site_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "d=" << to_string(d);
  out << ", " << "x1=" << to_string(x1);
  out << ", " << "y1=" << to_string(y1);
  out << ", " << "z1=" << to_string(z1);
  out << ", " << "x2=" << to_string(x2);
  out << ", " << "y2=" << to_string(y2);
  out << ", " << "z2=" << to_string(z2);
  out << ", " << "length=" << to_string(length);
  out << ", " << "angle1=" << to_string(angle1);
  out << ", " << "angle2=" << to_string(angle2);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "t=" << to_string(t);
  out << ")";
}


DesignSite::~DesignSite() throw() {
}


void DesignSite::__set_id(const int32_t val) {
  this->id = val;
}

void DesignSite::__set_design_technology_id(const int32_t val) {
  this->design_technology_id = val;
}

void DesignSite::__set_name(const std::string& val) {
  this->name = val;
}

void DesignSite::__set_w(const double val) {
  this->w = val;
}

void DesignSite::__set_h(const double val) {
  this->h = val;
}

void DesignSite::__set_x(const double val) {
  this->x = val;
}

void DesignSite::__set_y(const double val) {
  this->y = val;
}

void DesignSite::__set_z(const double val) {
  this->z = val;
}

void DesignSite::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t DesignSite::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_technology_id);
          this->__isset.design_technology_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignSite::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignSite");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_technology_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_technology_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignSite &a, DesignSite &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_technology_id, b.design_technology_id);
  swap(a.name, b.name);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

DesignSite::DesignSite(const DesignSite& other20) {
  id = other20.id;
  design_technology_id = other20.design_technology_id;
  name = other20.name;
  w = other20.w;
  h = other20.h;
  x = other20.x;
  y = other20.y;
  z = other20.z;
  comment = other20.comment;
  __isset = other20.__isset;
}
DesignSite& DesignSite::operator=(const DesignSite& other21) {
  id = other21.id;
  design_technology_id = other21.design_technology_id;
  name = other21.name;
  w = other21.w;
  h = other21.h;
  x = other21.x;
  y = other21.y;
  z = other21.z;
  comment = other21.comment;
  __isset = other21.__isset;
  return *this;
}
void DesignSite::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignSite(";
  out << "id=" << to_string(id);
  out << ", " << "design_technology_id=" << to_string(design_technology_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


DesignTechnology::~DesignTechnology() throw() {
}


void DesignTechnology::__set_id(const int32_t val) {
  this->id = val;
}

void DesignTechnology::__set_coal_id(const int32_t val) {
  this->coal_id = val;
}

void DesignTechnology::__set_name(const std::string& val) {
  this->name = val;
}

void DesignTechnology::__set_region(const int32_t val) {
  this->region = val;
}

void DesignTechnology::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t DesignTechnology::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coal_id);
          this->__isset.coal_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->region);
          this->__isset.region = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignTechnology::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignTechnology");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coal_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coal_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("region", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->region);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignTechnology &a, DesignTechnology &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.coal_id, b.coal_id);
  swap(a.name, b.name);
  swap(a.region, b.region);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

DesignTechnology::DesignTechnology(const DesignTechnology& other22) {
  id = other22.id;
  coal_id = other22.coal_id;
  name = other22.name;
  region = other22.region;
  comment = other22.comment;
  __isset = other22.__isset;
}
DesignTechnology& DesignTechnology::operator=(const DesignTechnology& other23) {
  id = other23.id;
  coal_id = other23.coal_id;
  name = other23.name;
  region = other23.region;
  comment = other23.comment;
  __isset = other23.__isset;
  return *this;
}
void DesignTechnology::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignTechnology(";
  out << "id=" << to_string(id);
  out << ", " << "coal_id=" << to_string(coal_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "region=" << to_string(region);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


DesignTunnelControlPoint::~DesignTunnelControlPoint() throw() {
}


void DesignTunnelControlPoint::__set_id(const int32_t val) {
  this->id = val;
}

void DesignTunnelControlPoint::__set_design_eval_unit_partition_id(const int32_t val) {
  this->design_eval_unit_partition_id = val;
}

void DesignTunnelControlPoint::__set_name(const std::string& val) {
  this->name = val;
}

void DesignTunnelControlPoint::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignTunnelControlPoint::__set_x(const double val) {
  this->x = val;
}

void DesignTunnelControlPoint::__set_y(const double val) {
  this->y = val;
}

void DesignTunnelControlPoint::__set_z(const double val) {
  this->z = val;
}

uint32_t DesignTunnelControlPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_eval_unit_partition_id);
          this->__isset.design_eval_unit_partition_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignTunnelControlPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignTunnelControlPoint");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_eval_unit_partition_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_eval_unit_partition_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignTunnelControlPoint &a, DesignTunnelControlPoint &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_eval_unit_partition_id, b.design_eval_unit_partition_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

DesignTunnelControlPoint::DesignTunnelControlPoint(const DesignTunnelControlPoint& other24) {
  id = other24.id;
  design_eval_unit_partition_id = other24.design_eval_unit_partition_id;
  name = other24.name;
  comment = other24.comment;
  x = other24.x;
  y = other24.y;
  z = other24.z;
  __isset = other24.__isset;
}
DesignTunnelControlPoint& DesignTunnelControlPoint::operator=(const DesignTunnelControlPoint& other25) {
  id = other25.id;
  design_eval_unit_partition_id = other25.design_eval_unit_partition_id;
  name = other25.name;
  comment = other25.comment;
  x = other25.x;
  y = other25.y;
  z = other25.z;
  __isset = other25.__isset;
  return *this;
}
void DesignTunnelControlPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignTunnelControlPoint(";
  out << "id=" << to_string(id);
  out << ", " << "design_eval_unit_partition_id=" << to_string(design_eval_unit_partition_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ")";
}


DesignWorkSurfControlPoint::~DesignWorkSurfControlPoint() throw() {
}


void DesignWorkSurfControlPoint::__set_id(const int32_t val) {
  this->id = val;
}

void DesignWorkSurfControlPoint::__set_design_eval_unit_partition_id(const int32_t val) {
  this->design_eval_unit_partition_id = val;
}

void DesignWorkSurfControlPoint::__set_name(const std::string& val) {
  this->name = val;
}

void DesignWorkSurfControlPoint::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignWorkSurfControlPoint::__set_x(const double val) {
  this->x = val;
}

void DesignWorkSurfControlPoint::__set_y(const double val) {
  this->y = val;
}

void DesignWorkSurfControlPoint::__set_z(const double val) {
  this->z = val;
}

uint32_t DesignWorkSurfControlPoint::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_eval_unit_partition_id);
          this->__isset.design_eval_unit_partition_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y);
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignWorkSurfControlPoint::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignWorkSurfControlPoint");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_eval_unit_partition_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_eval_unit_partition_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->y);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignWorkSurfControlPoint &a, DesignWorkSurfControlPoint &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_eval_unit_partition_id, b.design_eval_unit_partition_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.x, b.x);
  swap(a.y, b.y);
  swap(a.z, b.z);
  swap(a.__isset, b.__isset);
}

DesignWorkSurfControlPoint::DesignWorkSurfControlPoint(const DesignWorkSurfControlPoint& other26) {
  id = other26.id;
  design_eval_unit_partition_id = other26.design_eval_unit_partition_id;
  name = other26.name;
  comment = other26.comment;
  x = other26.x;
  y = other26.y;
  z = other26.z;
  __isset = other26.__isset;
}
DesignWorkSurfControlPoint& DesignWorkSurfControlPoint::operator=(const DesignWorkSurfControlPoint& other27) {
  id = other27.id;
  design_eval_unit_partition_id = other27.design_eval_unit_partition_id;
  name = other27.name;
  comment = other27.comment;
  x = other27.x;
  y = other27.y;
  z = other27.z;
  __isset = other27.__isset;
  return *this;
}
void DesignWorkSurfControlPoint::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignWorkSurfControlPoint(";
  out << "id=" << to_string(id);
  out << ", " << "design_eval_unit_partition_id=" << to_string(design_eval_unit_partition_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "x=" << to_string(x);
  out << ", " << "y=" << to_string(y);
  out << ", " << "z=" << to_string(z);
  out << ")";
}


DesignWorkSurfTechnology::~DesignWorkSurfTechnology() throw() {
}


void DesignWorkSurfTechnology::__set_id(const int32_t val) {
  this->id = val;
}

void DesignWorkSurfTechnology::__set_design_technology_id(const int32_t val) {
  this->design_technology_id = val;
}

void DesignWorkSurfTechnology::__set_name(const std::string& val) {
  this->name = val;
}

void DesignWorkSurfTechnology::__set_comment(const std::string& val) {
  this->comment = val;
}

void DesignWorkSurfTechnology::__set_top_side(const double val) {
  this->top_side = val;
}

void DesignWorkSurfTechnology::__set_bottom_side(const double val) {
  this->bottom_side = val;
}

void DesignWorkSurfTechnology::__set_right_side(const double val) {
  this->right_side = val;
}

void DesignWorkSurfTechnology::__set_l1(const double val) {
  this->l1 = val;
}

void DesignWorkSurfTechnology::__set_w(const double val) {
  this->w = val;
}

void DesignWorkSurfTechnology::__set_h(const double val) {
  this->h = val;
}

void DesignWorkSurfTechnology::__set_l2(const double val) {
  this->l2 = val;
}

void DesignWorkSurfTechnology::__set_left_side(const double val) {
  this->left_side = val;
}

void DesignWorkSurfTechnology::__set_v_offset(const double val) {
  this->v_offset = val;
}

void DesignWorkSurfTechnology::__set_h_offset(const double val) {
  this->h_offset = val;
}

void DesignWorkSurfTechnology::__set_p_offset(const double val) {
  this->p_offset = val;
}

void DesignWorkSurfTechnology::__set_wd(const double val) {
  this->wd = val;
}

void DesignWorkSurfTechnology::__set_hd(const double val) {
  this->hd = val;
}

void DesignWorkSurfTechnology::__set_lm(const double val) {
  this->lm = val;
}

void DesignWorkSurfTechnology::__set_ws(const double val) {
  this->ws = val;
}

void DesignWorkSurfTechnology::__set_ls(const double val) {
  this->ls = val;
}

void DesignWorkSurfTechnology::__set_gs(const double val) {
  this->gs = val;
}

void DesignWorkSurfTechnology::__set_hs(const double val) {
  this->hs = val;
}

void DesignWorkSurfTechnology::__set_dp(const double val) {
  this->dp = val;
}

void DesignWorkSurfTechnology::__set_gp(const double val) {
  this->gp = val;
}

void DesignWorkSurfTechnology::__set_single_rock_tunnel(const int32_t val) {
  this->single_rock_tunnel = val;
}

void DesignWorkSurfTechnology::__set_d_offset(const double val) {
  this->d_offset = val;
}

void DesignWorkSurfTechnology::__set_pore_stubble(const double val) {
  this->pore_stubble = val;
}

void DesignWorkSurfTechnology::__set_pore_angle(const double val) {
  this->pore_angle = val;
}

void DesignWorkSurfTechnology::__set_pore_type(const int32_t val) {
  this->pore_type = val;
}

void DesignWorkSurfTechnology::__set_close_length(const double val) {
  this->close_length = val;
}

uint32_t DesignWorkSurfTechnology::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->design_technology_id);
          this->__isset.design_technology_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->top_side);
          this->__isset.top_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bottom_side);
          this->__isset.bottom_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->right_side);
          this->__isset.right_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->w);
          this->__isset.w = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->left_side);
          this->__isset.left_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v_offset);
          this->__isset.v_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h_offset);
          this->__isset.h_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_offset);
          this->__isset.p_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wd);
          this->__isset.wd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hd);
          this->__isset.hd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lm);
          this->__isset.lm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ws);
          this->__isset.ws = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ls);
          this->__isset.ls = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gs);
          this->__isset.gs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hs);
          this->__isset.hs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dp);
          this->__isset.dp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gp);
          this->__isset.gp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->single_rock_tunnel);
          this->__isset.single_rock_tunnel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d_offset);
          this->__isset.d_offset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pore_stubble);
          this->__isset.pore_stubble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pore_angle);
          this->__isset.pore_angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pore_type);
          this->__isset.pore_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->close_length);
          this->__isset.close_length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DesignWorkSurfTechnology::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DesignWorkSurfTechnology");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("design_technology_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->design_technology_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top_side", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->top_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottom_side", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->bottom_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right_side", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->right_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("w", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->w);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_side", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->left_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v_offset", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->v_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h_offset", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->h_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_offset", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->p_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wd", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->wd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hd", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->hd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lm", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->lm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ws", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->ws);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ls", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->ls);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gs", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->gs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hs", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->hs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dp", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->dp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gp", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->gp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("single_rock_tunnel", ::apache::thrift::protocol::T_I32, 25);
  xfer += oprot->writeI32(this->single_rock_tunnel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d_offset", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->d_offset);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_stubble", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->pore_stubble);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_angle", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->pore_angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_type", ::apache::thrift::protocol::T_I32, 29);
  xfer += oprot->writeI32(this->pore_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_length", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->close_length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DesignWorkSurfTechnology &a, DesignWorkSurfTechnology &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.design_technology_id, b.design_technology_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.top_side, b.top_side);
  swap(a.bottom_side, b.bottom_side);
  swap(a.right_side, b.right_side);
  swap(a.l1, b.l1);
  swap(a.w, b.w);
  swap(a.h, b.h);
  swap(a.l2, b.l2);
  swap(a.left_side, b.left_side);
  swap(a.v_offset, b.v_offset);
  swap(a.h_offset, b.h_offset);
  swap(a.p_offset, b.p_offset);
  swap(a.wd, b.wd);
  swap(a.hd, b.hd);
  swap(a.lm, b.lm);
  swap(a.ws, b.ws);
  swap(a.ls, b.ls);
  swap(a.gs, b.gs);
  swap(a.hs, b.hs);
  swap(a.dp, b.dp);
  swap(a.gp, b.gp);
  swap(a.single_rock_tunnel, b.single_rock_tunnel);
  swap(a.d_offset, b.d_offset);
  swap(a.pore_stubble, b.pore_stubble);
  swap(a.pore_angle, b.pore_angle);
  swap(a.pore_type, b.pore_type);
  swap(a.close_length, b.close_length);
  swap(a.__isset, b.__isset);
}

DesignWorkSurfTechnology::DesignWorkSurfTechnology(const DesignWorkSurfTechnology& other28) {
  id = other28.id;
  design_technology_id = other28.design_technology_id;
  name = other28.name;
  comment = other28.comment;
  top_side = other28.top_side;
  bottom_side = other28.bottom_side;
  right_side = other28.right_side;
  l1 = other28.l1;
  w = other28.w;
  h = other28.h;
  l2 = other28.l2;
  left_side = other28.left_side;
  v_offset = other28.v_offset;
  h_offset = other28.h_offset;
  p_offset = other28.p_offset;
  wd = other28.wd;
  hd = other28.hd;
  lm = other28.lm;
  ws = other28.ws;
  ls = other28.ls;
  gs = other28.gs;
  hs = other28.hs;
  dp = other28.dp;
  gp = other28.gp;
  single_rock_tunnel = other28.single_rock_tunnel;
  d_offset = other28.d_offset;
  pore_stubble = other28.pore_stubble;
  pore_angle = other28.pore_angle;
  pore_type = other28.pore_type;
  close_length = other28.close_length;
  __isset = other28.__isset;
}
DesignWorkSurfTechnology& DesignWorkSurfTechnology::operator=(const DesignWorkSurfTechnology& other29) {
  id = other29.id;
  design_technology_id = other29.design_technology_id;
  name = other29.name;
  comment = other29.comment;
  top_side = other29.top_side;
  bottom_side = other29.bottom_side;
  right_side = other29.right_side;
  l1 = other29.l1;
  w = other29.w;
  h = other29.h;
  l2 = other29.l2;
  left_side = other29.left_side;
  v_offset = other29.v_offset;
  h_offset = other29.h_offset;
  p_offset = other29.p_offset;
  wd = other29.wd;
  hd = other29.hd;
  lm = other29.lm;
  ws = other29.ws;
  ls = other29.ls;
  gs = other29.gs;
  hs = other29.hs;
  dp = other29.dp;
  gp = other29.gp;
  single_rock_tunnel = other29.single_rock_tunnel;
  d_offset = other29.d_offset;
  pore_stubble = other29.pore_stubble;
  pore_angle = other29.pore_angle;
  pore_type = other29.pore_type;
  close_length = other29.close_length;
  __isset = other29.__isset;
  return *this;
}
void DesignWorkSurfTechnology::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DesignWorkSurfTechnology(";
  out << "id=" << to_string(id);
  out << ", " << "design_technology_id=" << to_string(design_technology_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "top_side=" << to_string(top_side);
  out << ", " << "bottom_side=" << to_string(bottom_side);
  out << ", " << "right_side=" << to_string(right_side);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "w=" << to_string(w);
  out << ", " << "h=" << to_string(h);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "left_side=" << to_string(left_side);
  out << ", " << "v_offset=" << to_string(v_offset);
  out << ", " << "h_offset=" << to_string(h_offset);
  out << ", " << "p_offset=" << to_string(p_offset);
  out << ", " << "wd=" << to_string(wd);
  out << ", " << "hd=" << to_string(hd);
  out << ", " << "lm=" << to_string(lm);
  out << ", " << "ws=" << to_string(ws);
  out << ", " << "ls=" << to_string(ls);
  out << ", " << "gs=" << to_string(gs);
  out << ", " << "hs=" << to_string(hs);
  out << ", " << "dp=" << to_string(dp);
  out << ", " << "gp=" << to_string(gp);
  out << ", " << "single_rock_tunnel=" << to_string(single_rock_tunnel);
  out << ", " << "d_offset=" << to_string(d_offset);
  out << ", " << "pore_stubble=" << to_string(pore_stubble);
  out << ", " << "pore_angle=" << to_string(pore_angle);
  out << ", " << "pore_type=" << to_string(pore_type);
  out << ", " << "close_length=" << to_string(close_length);
  out << ")";
}


DrillingRadiusParam::~DrillingRadiusParam() throw() {
}


void DrillingRadiusParam::__set_id(const int32_t val) {
  this->id = val;
}

void DrillingRadiusParam::__set_coal_id(const int32_t val) {
  this->coal_id = val;
}

void DrillingRadiusParam::__set_name(const std::string& val) {
  this->name = val;
}

void DrillingRadiusParam::__set_r(const double val) {
  this->r = val;
}

void DrillingRadiusParam::__set_l(const double val) {
  this->l = val;
}

void DrillingRadiusParam::__set_k1(const double val) {
  this->k1 = val;
}

void DrillingRadiusParam::__set_rho(const double val) {
  this->rho = val;
}

void DrillingRadiusParam::__set_q0(const double val) {
  this->q0 = val;
}

void DrillingRadiusParam::__set_a(const double val) {
  this->a = val;
}

void DrillingRadiusParam::__set_t(const double val) {
  this->t = val;
}

void DrillingRadiusParam::__set_qm(const double val) {
  this->qm = val;
}

void DrillingRadiusParam::__set_qsum(const double val) {
  this->qsum = val;
}

void DrillingRadiusParam::__set_eta(const double val) {
  this->eta = val;
}

void DrillingRadiusParam::__set_r0(const double val) {
  this->r0 = val;
}

void DrillingRadiusParam::__set_p0(const double val) {
  this->p0 = val;
}

void DrillingRadiusParam::__set_r1(const double val) {
  this->r1 = val;
}

void DrillingRadiusParam::__set_p1(const double val) {
  this->p1 = val;
}

uint32_t DrillingRadiusParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coal_id);
          this->__isset.coal_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->r);
          this->__isset.r = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l);
          this->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k1);
          this->__isset.k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rho);
          this->__isset.rho = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q0);
          this->__isset.q0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qm);
          this->__isset.qm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qsum);
          this->__isset.qsum = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->eta);
          this->__isset.eta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->r0);
          this->__isset.r0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p0);
          this->__isset.p0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->r1);
          this->__isset.r1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p1);
          this->__isset.p1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DrillingRadiusParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DrillingRadiusParam");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coal_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coal_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->r);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k1", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->k1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rho", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->rho);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q0", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->q0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qm", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->qm);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qsum", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->qsum);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eta", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->eta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r0", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->r0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p0", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->p0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("r1", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->r1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p1", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->p1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DrillingRadiusParam &a, DrillingRadiusParam &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.coal_id, b.coal_id);
  swap(a.name, b.name);
  swap(a.r, b.r);
  swap(a.l, b.l);
  swap(a.k1, b.k1);
  swap(a.rho, b.rho);
  swap(a.q0, b.q0);
  swap(a.a, b.a);
  swap(a.t, b.t);
  swap(a.qm, b.qm);
  swap(a.qsum, b.qsum);
  swap(a.eta, b.eta);
  swap(a.r0, b.r0);
  swap(a.p0, b.p0);
  swap(a.r1, b.r1);
  swap(a.p1, b.p1);
  swap(a.__isset, b.__isset);
}

DrillingRadiusParam::DrillingRadiusParam(const DrillingRadiusParam& other30) {
  id = other30.id;
  coal_id = other30.coal_id;
  name = other30.name;
  r = other30.r;
  l = other30.l;
  k1 = other30.k1;
  rho = other30.rho;
  q0 = other30.q0;
  a = other30.a;
  t = other30.t;
  qm = other30.qm;
  qsum = other30.qsum;
  eta = other30.eta;
  r0 = other30.r0;
  p0 = other30.p0;
  r1 = other30.r1;
  p1 = other30.p1;
  __isset = other30.__isset;
}
DrillingRadiusParam& DrillingRadiusParam::operator=(const DrillingRadiusParam& other31) {
  id = other31.id;
  coal_id = other31.coal_id;
  name = other31.name;
  r = other31.r;
  l = other31.l;
  k1 = other31.k1;
  rho = other31.rho;
  q0 = other31.q0;
  a = other31.a;
  t = other31.t;
  qm = other31.qm;
  qsum = other31.qsum;
  eta = other31.eta;
  r0 = other31.r0;
  p0 = other31.p0;
  r1 = other31.r1;
  p1 = other31.p1;
  __isset = other31.__isset;
  return *this;
}
void DrillingRadiusParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DrillingRadiusParam(";
  out << "id=" << to_string(id);
  out << ", " << "coal_id=" << to_string(coal_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "r=" << to_string(r);
  out << ", " << "l=" << to_string(l);
  out << ", " << "k1=" << to_string(k1);
  out << ", " << "rho=" << to_string(rho);
  out << ", " << "q0=" << to_string(q0);
  out << ", " << "a=" << to_string(a);
  out << ", " << "t=" << to_string(t);
  out << ", " << "qm=" << to_string(qm);
  out << ", " << "qsum=" << to_string(qsum);
  out << ", " << "eta=" << to_string(eta);
  out << ", " << "r0=" << to_string(r0);
  out << ", " << "p0=" << to_string(p0);
  out << ", " << "r1=" << to_string(r1);
  out << ", " << "p1=" << to_string(p1);
  out << ")";
}


DrillingSurf::~DrillingSurf() throw() {
}


void DrillingSurf::__set_id(const int32_t val) {
  this->id = val;
}

void DrillingSurf::__set_work_area_id(const int32_t val) {
  this->work_area_id = val;
}

void DrillingSurf::__set_tunnel_id(const int32_t val) {
  this->tunnel_id = val;
}

void DrillingSurf::__set_name(const std::string& val) {
  this->name = val;
}

void DrillingSurf::__set_qr(const double val) {
  this->qr = val;
}

void DrillingSurf::__set_qa(const double val) {
  this->qa = val;
}

void DrillingSurf::__set_fore_qr(const double val) {
  this->fore_qr = val;
}

void DrillingSurf::__set_fore_qa(const double val) {
  this->fore_qa = val;
}

void DrillingSurf::__set_q4(const double val) {
  this->q4 = val;
}

void DrillingSurf::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t DrillingSurf::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_area_id);
          this->__isset.work_area_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr);
          this->__isset.qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qr);
          this->__isset.fore_qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qa);
          this->__isset.fore_qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q4);
          this->__isset.q4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DrillingSurf::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DrillingSurf");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_area_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_area_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qr", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->fore_qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qa", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->fore_qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q4", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->q4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DrillingSurf &a, DrillingSurf &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_area_id, b.work_area_id);
  swap(a.tunnel_id, b.tunnel_id);
  swap(a.name, b.name);
  swap(a.qr, b.qr);
  swap(a.qa, b.qa);
  swap(a.fore_qr, b.fore_qr);
  swap(a.fore_qa, b.fore_qa);
  swap(a.q4, b.q4);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

DrillingSurf::DrillingSurf(const DrillingSurf& other32) {
  id = other32.id;
  work_area_id = other32.work_area_id;
  tunnel_id = other32.tunnel_id;
  name = other32.name;
  qr = other32.qr;
  qa = other32.qa;
  fore_qr = other32.fore_qr;
  fore_qa = other32.fore_qa;
  q4 = other32.q4;
  comment = other32.comment;
  __isset = other32.__isset;
}
DrillingSurf& DrillingSurf::operator=(const DrillingSurf& other33) {
  id = other33.id;
  work_area_id = other33.work_area_id;
  tunnel_id = other33.tunnel_id;
  name = other33.name;
  qr = other33.qr;
  qa = other33.qa;
  fore_qr = other33.fore_qr;
  fore_qa = other33.fore_qa;
  q4 = other33.q4;
  comment = other33.comment;
  __isset = other33.__isset;
  return *this;
}
void DrillingSurf::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DrillingSurf(";
  out << "id=" << to_string(id);
  out << ", " << "work_area_id=" << to_string(work_area_id);
  out << ", " << "tunnel_id=" << to_string(tunnel_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "qr=" << to_string(qr);
  out << ", " << "qa=" << to_string(qa);
  out << ", " << "fore_qr=" << to_string(fore_qr);
  out << ", " << "fore_qa=" << to_string(fore_qa);
  out << ", " << "q4=" << to_string(q4);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


HighDrillingPore::~HighDrillingPore() throw() {
}


void HighDrillingPore::__set_id(const int32_t val) {
  this->id = val;
}

void HighDrillingPore::__set_high_drilling_pore_param_id(const int32_t val) {
  this->high_drilling_pore_param_id = val;
}

void HighDrillingPore::__set_num(const int32_t val) {
  this->num = val;
}

void HighDrillingPore::__set_length(const double val) {
  this->length = val;
}

void HighDrillingPore::__set_angle(const double val) {
  this->angle = val;
}

void HighDrillingPore::__set_pore_type(const int32_t val) {
  this->pore_type = val;
}

void HighDrillingPore::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t HighDrillingPore::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->high_drilling_pore_param_id);
          this->__isset.high_drilling_pore_param_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->num);
          this->__isset.num = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->angle);
          this->__isset.angle = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pore_type);
          this->__isset.pore_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HighDrillingPore::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HighDrillingPore");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("high_drilling_pore_param_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->high_drilling_pore_param_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("num", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->num);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("length", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("angle", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->angle);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pore_type", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->pore_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HighDrillingPore &a, HighDrillingPore &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.high_drilling_pore_param_id, b.high_drilling_pore_param_id);
  swap(a.num, b.num);
  swap(a.length, b.length);
  swap(a.angle, b.angle);
  swap(a.pore_type, b.pore_type);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

HighDrillingPore::HighDrillingPore(const HighDrillingPore& other34) {
  id = other34.id;
  high_drilling_pore_param_id = other34.high_drilling_pore_param_id;
  num = other34.num;
  length = other34.length;
  angle = other34.angle;
  pore_type = other34.pore_type;
  comment = other34.comment;
  __isset = other34.__isset;
}
HighDrillingPore& HighDrillingPore::operator=(const HighDrillingPore& other35) {
  id = other35.id;
  high_drilling_pore_param_id = other35.high_drilling_pore_param_id;
  num = other35.num;
  length = other35.length;
  angle = other35.angle;
  pore_type = other35.pore_type;
  comment = other35.comment;
  __isset = other35.__isset;
  return *this;
}
void HighDrillingPore::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HighDrillingPore(";
  out << "id=" << to_string(id);
  out << ", " << "high_drilling_pore_param_id=" << to_string(high_drilling_pore_param_id);
  out << ", " << "num=" << to_string(num);
  out << ", " << "length=" << to_string(length);
  out << ", " << "angle=" << to_string(angle);
  out << ", " << "pore_type=" << to_string(pore_type);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


HighDrillingPoreParam::~HighDrillingPoreParam() throw() {
}


void HighDrillingPoreParam::__set_id(const int32_t val) {
  this->id = val;
}

void HighDrillingPoreParam::__set_work_surf_id(const int32_t val) {
  this->work_surf_id = val;
}

void HighDrillingPoreParam::__set_name(const std::string& val) {
  this->name = val;
}

void HighDrillingPoreParam::__set_lk(const double val) {
  this->lk = val;
}

void HighDrillingPoreParam::__set_lc(const double val) {
  this->lc = val;
}

void HighDrillingPoreParam::__set_lw(const double val) {
  this->lw = val;
}

void HighDrillingPoreParam::__set_n1(const int32_t val) {
  this->n1 = val;
}

void HighDrillingPoreParam::__set_n2(const int32_t val) {
  this->n2 = val;
}

void HighDrillingPoreParam::__set_beta(const double val) {
  this->beta = val;
}

void HighDrillingPoreParam::__set_ld(const double val) {
  this->ld = val;
}

void HighDrillingPoreParam::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t HighDrillingPoreParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_surf_id);
          this->__isset.work_surf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lk);
          this->__isset.lk = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lc);
          this->__isset.lc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lw);
          this->__isset.lw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->n1);
          this->__isset.n1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->n2);
          this->__isset.n2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->beta);
          this->__isset.beta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ld);
          this->__isset.ld = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HighDrillingPoreParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HighDrillingPoreParam");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_surf_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_surf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lk", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->lk);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lc", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->lc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lw", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->lw);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("n1", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->n1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("n2", ::apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->n2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("beta", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->beta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ld", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->ld);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HighDrillingPoreParam &a, HighDrillingPoreParam &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_surf_id, b.work_surf_id);
  swap(a.name, b.name);
  swap(a.lk, b.lk);
  swap(a.lc, b.lc);
  swap(a.lw, b.lw);
  swap(a.n1, b.n1);
  swap(a.n2, b.n2);
  swap(a.beta, b.beta);
  swap(a.ld, b.ld);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

HighDrillingPoreParam::HighDrillingPoreParam(const HighDrillingPoreParam& other36) {
  id = other36.id;
  work_surf_id = other36.work_surf_id;
  name = other36.name;
  lk = other36.lk;
  lc = other36.lc;
  lw = other36.lw;
  n1 = other36.n1;
  n2 = other36.n2;
  beta = other36.beta;
  ld = other36.ld;
  comment = other36.comment;
  __isset = other36.__isset;
}
HighDrillingPoreParam& HighDrillingPoreParam::operator=(const HighDrillingPoreParam& other37) {
  id = other37.id;
  work_surf_id = other37.work_surf_id;
  name = other37.name;
  lk = other37.lk;
  lc = other37.lc;
  lw = other37.lw;
  n1 = other37.n1;
  n2 = other37.n2;
  beta = other37.beta;
  ld = other37.ld;
  comment = other37.comment;
  __isset = other37.__isset;
  return *this;
}
void HighDrillingPoreParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HighDrillingPoreParam(";
  out << "id=" << to_string(id);
  out << ", " << "work_surf_id=" << to_string(work_surf_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "lk=" << to_string(lk);
  out << ", " << "lc=" << to_string(lc);
  out << ", " << "lw=" << to_string(lw);
  out << ", " << "n1=" << to_string(n1);
  out << ", " << "n2=" << to_string(n2);
  out << ", " << "beta=" << to_string(beta);
  out << ", " << "ld=" << to_string(ld);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


HighDrillingSiteParam::~HighDrillingSiteParam() throw() {
}


void HighDrillingSiteParam::__set_id(const int32_t val) {
  this->id = val;
}

void HighDrillingSiteParam::__set_work_surf_id(const int32_t val) {
  this->work_surf_id = val;
}

void HighDrillingSiteParam::__set_name(const std::string& val) {
  this->name = val;
}

void HighDrillingSiteParam::__set_l1(const double val) {
  this->l1 = val;
}

void HighDrillingSiteParam::__set_l2(const double val) {
  this->l2 = val;
}

void HighDrillingSiteParam::__set_lg(const double val) {
  this->lg = val;
}

void HighDrillingSiteParam::__set_hn(const double val) {
  this->hn = val;
}

void HighDrillingSiteParam::__set_theta(const double val) {
  this->theta = val;
}

void HighDrillingSiteParam::__set_q(const double val) {
  this->q = val;
}

void HighDrillingSiteParam::__set_rtn(const double val) {
  this->rtn = val;
}

void HighDrillingSiteParam::__set_hs(const double val) {
  this->hs = val;
}

void HighDrillingSiteParam::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t HighDrillingSiteParam::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_surf_id);
          this->__isset.work_surf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lg);
          this->__isset.lg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hn);
          this->__isset.hn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->theta);
          this->__isset.theta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q);
          this->__isset.q = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rtn);
          this->__isset.rtn = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hs);
          this->__isset.hs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HighDrillingSiteParam::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HighDrillingSiteParam");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_surf_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_surf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lg", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->lg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hn", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->hn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("theta", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->theta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->q);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rtn", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->rtn);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hs", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->hs);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HighDrillingSiteParam &a, HighDrillingSiteParam &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_surf_id, b.work_surf_id);
  swap(a.name, b.name);
  swap(a.l1, b.l1);
  swap(a.l2, b.l2);
  swap(a.lg, b.lg);
  swap(a.hn, b.hn);
  swap(a.theta, b.theta);
  swap(a.q, b.q);
  swap(a.rtn, b.rtn);
  swap(a.hs, b.hs);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

HighDrillingSiteParam::HighDrillingSiteParam(const HighDrillingSiteParam& other38) {
  id = other38.id;
  work_surf_id = other38.work_surf_id;
  name = other38.name;
  l1 = other38.l1;
  l2 = other38.l2;
  lg = other38.lg;
  hn = other38.hn;
  theta = other38.theta;
  q = other38.q;
  rtn = other38.rtn;
  hs = other38.hs;
  comment = other38.comment;
  __isset = other38.__isset;
}
HighDrillingSiteParam& HighDrillingSiteParam::operator=(const HighDrillingSiteParam& other39) {
  id = other39.id;
  work_surf_id = other39.work_surf_id;
  name = other39.name;
  l1 = other39.l1;
  l2 = other39.l2;
  lg = other39.lg;
  hn = other39.hn;
  theta = other39.theta;
  q = other39.q;
  rtn = other39.rtn;
  hs = other39.hs;
  comment = other39.comment;
  __isset = other39.__isset;
  return *this;
}
void HighDrillingSiteParam::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HighDrillingSiteParam(";
  out << "id=" << to_string(id);
  out << ", " << "work_surf_id=" << to_string(work_surf_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "lg=" << to_string(lg);
  out << ", " << "hn=" << to_string(hn);
  out << ", " << "theta=" << to_string(theta);
  out << ", " << "q=" << to_string(q);
  out << ", " << "rtn=" << to_string(rtn);
  out << ", " << "hs=" << to_string(hs);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


HighDrillingTunnel::~HighDrillingTunnel() throw() {
}


void HighDrillingTunnel::__set_id(const int32_t val) {
  this->id = val;
}

void HighDrillingTunnel::__set_work_surf_id(const int32_t val) {
  this->work_surf_id = val;
}

void HighDrillingTunnel::__set_name(const std::string& val) {
  this->name = val;
}

void HighDrillingTunnel::__set_k(const double val) {
  this->k = val;
}

void HighDrillingTunnel::__set_rock(const int32_t val) {
  this->rock = val;
}

void HighDrillingTunnel::__set_hz_min(const double val) {
  this->hz_min = val;
}

void HighDrillingTunnel::__set_hz_max(const double val) {
  this->hz_max = val;
}

void HighDrillingTunnel::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t HighDrillingTunnel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_surf_id);
          this->__isset.work_surf_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k);
          this->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->rock);
          this->__isset.rock = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hz_min);
          this->__isset.hz_min = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->hz_max);
          this->__isset.hz_max = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HighDrillingTunnel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HighDrillingTunnel");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_surf_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_surf_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rock", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->rock);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hz_min", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->hz_min);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hz_max", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->hz_max);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HighDrillingTunnel &a, HighDrillingTunnel &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_surf_id, b.work_surf_id);
  swap(a.name, b.name);
  swap(a.k, b.k);
  swap(a.rock, b.rock);
  swap(a.hz_min, b.hz_min);
  swap(a.hz_max, b.hz_max);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

HighDrillingTunnel::HighDrillingTunnel(const HighDrillingTunnel& other40) {
  id = other40.id;
  work_surf_id = other40.work_surf_id;
  name = other40.name;
  k = other40.k;
  rock = other40.rock;
  hz_min = other40.hz_min;
  hz_max = other40.hz_max;
  comment = other40.comment;
  __isset = other40.__isset;
}
HighDrillingTunnel& HighDrillingTunnel::operator=(const HighDrillingTunnel& other41) {
  id = other41.id;
  work_surf_id = other41.work_surf_id;
  name = other41.name;
  k = other41.k;
  rock = other41.rock;
  hz_min = other41.hz_min;
  hz_max = other41.hz_max;
  comment = other41.comment;
  __isset = other41.__isset;
  return *this;
}
void HighDrillingTunnel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HighDrillingTunnel(";
  out << "id=" << to_string(id);
  out << ", " << "work_surf_id=" << to_string(work_surf_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "k=" << to_string(k);
  out << ", " << "rock=" << to_string(rock);
  out << ", " << "hz_min=" << to_string(hz_min);
  out << ", " << "hz_max=" << to_string(hz_max);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


HydrGeo::~HydrGeo() throw() {
}


void HydrGeo::__set_id(const int32_t val) {
  this->id = val;
}

void HydrGeo::__set_name(const std::string& val) {
  this->name = val;
}

void HydrGeo::__set_x1(const int32_t val) {
  this->x1 = val;
}

void HydrGeo::__set_x2(const int32_t val) {
  this->x2 = val;
}

void HydrGeo::__set_x3(const int32_t val) {
  this->x3 = val;
}

void HydrGeo::__set_x4(const double val) {
  this->x4 = val;
}

void HydrGeo::__set_x5(const double val) {
  this->x5 = val;
}

void HydrGeo::__set_x6(const double val) {
  this->x6 = val;
}

void HydrGeo::__set_x7(const double val) {
  this->x7 = val;
}

void HydrGeo::__set_x8(const std::string& val) {
  this->x8 = val;
}

uint32_t HydrGeo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x1);
          this->__isset.x1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x2);
          this->__isset.x2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x3);
          this->__isset.x3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x4);
          this->__isset.x4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x5);
          this->__isset.x5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x6);
          this->__isset.x6 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x7);
          this->__isset.x7 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->x8);
          this->__isset.x8 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HydrGeo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("HydrGeo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x1", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->x1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x2", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->x2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x3", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->x3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x4", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->x4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x5", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->x5);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x6", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->x6);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x7", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->x7);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x8", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->x8);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HydrGeo &a, HydrGeo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.x1, b.x1);
  swap(a.x2, b.x2);
  swap(a.x3, b.x3);
  swap(a.x4, b.x4);
  swap(a.x5, b.x5);
  swap(a.x6, b.x6);
  swap(a.x7, b.x7);
  swap(a.x8, b.x8);
  swap(a.__isset, b.__isset);
}

HydrGeo::HydrGeo(const HydrGeo& other42) {
  id = other42.id;
  name = other42.name;
  x1 = other42.x1;
  x2 = other42.x2;
  x3 = other42.x3;
  x4 = other42.x4;
  x5 = other42.x5;
  x6 = other42.x6;
  x7 = other42.x7;
  x8 = other42.x8;
  __isset = other42.__isset;
}
HydrGeo& HydrGeo::operator=(const HydrGeo& other43) {
  id = other43.id;
  name = other43.name;
  x1 = other43.x1;
  x2 = other43.x2;
  x3 = other43.x3;
  x4 = other43.x4;
  x5 = other43.x5;
  x6 = other43.x6;
  x7 = other43.x7;
  x8 = other43.x8;
  __isset = other43.__isset;
  return *this;
}
void HydrGeo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "HydrGeo(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "x1=" << to_string(x1);
  out << ", " << "x2=" << to_string(x2);
  out << ", " << "x3=" << to_string(x3);
  out << ", " << "x4=" << to_string(x4);
  out << ", " << "x5=" << to_string(x5);
  out << ", " << "x6=" << to_string(x6);
  out << ", " << "x7=" << to_string(x7);
  out << ", " << "x8=" << to_string(x8);
  out << ")";
}


Mine::~Mine() throw() {
}


void Mine::__set_id(const int32_t val) {
  this->id = val;
}

void Mine::__set_tech_mode_id(const int32_t val) {
  this->tech_mode_id = val;
}

void Mine::__set_mine_region_id(const int32_t val) {
  this->mine_region_id = val;
}

void Mine::__set_account_id(const int32_t val) {
  this->account_id = val;
}

void Mine::__set_name(const std::string& val) {
  this->name = val;
}

void Mine::__set_province(const std::string& val) {
  this->province = val;
}

void Mine::__set_city(const std::string& val) {
  this->city = val;
}

void Mine::__set_capacity(const double val) {
  this->capacity = val;
}

void Mine::__set_topo_geo(const int32_t val) {
  this->topo_geo = val;
}

void Mine::__set_hydr_geo(const int32_t val) {
  this->hydr_geo = val;
}

void Mine::__set_ground_condition(const int32_t val) {
  this->ground_condition = val;
}

void Mine::__set_qr(const double val) {
  this->qr = val;
}

void Mine::__set_qa(const double val) {
  this->qa = val;
}

void Mine::__set_fore_qr(const double val) {
  this->fore_qr = val;
}

void Mine::__set_fore_qa(const double val) {
  this->fore_qa = val;
}

void Mine::__set_gas_k1(const double val) {
  this->gas_k1 = val;
}

void Mine::__set_gas_k2(const double val) {
  this->gas_k2 = val;
}

void Mine::__set_stereo_schem_diagram(const std::string& val) {
  this->stereo_schem_diagram = val;
}

void Mine::__set_rock_gas_k2(const double val) {
  this->rock_gas_k2 = val;
}

void Mine::__set_reserve_w1(const double val) {
  this->reserve_w1 = val;
}

void Mine::__set_reserve_w2(const double val) {
  this->reserve_w2 = val;
}

void Mine::__set_reserve_w3(const double val) {
  this->reserve_w3 = val;
}

void Mine::__set_gas_w0(const double val) {
  this->gas_w0 = val;
}

void Mine::__set_gas_wc2(const double val) {
  this->gas_wc2 = val;
}

void Mine::__set_pump_k2(const double val) {
  this->pump_k2 = val;
}

void Mine::__set_pump_k3(const double val) {
  this->pump_k3 = val;
}

void Mine::__set_pump_k4(const double val) {
  this->pump_k4 = val;
}

void Mine::__set_pump_k1(const double val) {
  this->pump_k1 = val;
}

void Mine::__set_pump_k(const double val) {
  this->pump_k = val;
}

void Mine::__set_pump_wc(const double val) {
  this->pump_wc = val;
}

void Mine::__set_reserve_gas(const double val) {
  this->reserve_gas = val;
}

void Mine::__set_comment(const std::string& val) {
  this->comment = val;
}

void Mine::__set_protect_layer_condition(const int32_t val) {
  this->protect_layer_condition = val;
}

uint32_t Mine::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tech_mode_id);
          this->__isset.tech_mode_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mine_region_id);
          this->__isset.mine_region_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->account_id);
          this->__isset.account_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->province);
          this->__isset.province = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->topo_geo);
          this->__isset.topo_geo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hydr_geo);
          this->__isset.hydr_geo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ground_condition);
          this->__isset.ground_condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr);
          this->__isset.qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qr);
          this->__isset.fore_qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qa);
          this->__isset.fore_qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_k1);
          this->__isset.gas_k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_k2);
          this->__isset.gas_k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stereo_schem_diagram);
          this->__isset.stereo_schem_diagram = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->rock_gas_k2);
          this->__isset.rock_gas_k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->reserve_w1);
          this->__isset.reserve_w1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->reserve_w2);
          this->__isset.reserve_w2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->reserve_w3);
          this->__isset.reserve_w3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_w0);
          this->__isset.gas_w0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->gas_wc2);
          this->__isset.gas_wc2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k2);
          this->__isset.pump_k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k3);
          this->__isset.pump_k3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k4);
          this->__isset.pump_k4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k1);
          this->__isset.pump_k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_k);
          this->__isset.pump_k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pump_wc);
          this->__isset.pump_wc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->reserve_gas);
          this->__isset.reserve_gas = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->protect_layer_condition);
          this->__isset.protect_layer_condition = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Mine::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Mine");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tech_mode_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->tech_mode_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_region_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->mine_region_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account_id", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->account_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("province", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->province);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->city);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("capacity", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->capacity);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("topo_geo", ::apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->topo_geo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hydr_geo", ::apache::thrift::protocol::T_I32, 10);
  xfer += oprot->writeI32(this->hydr_geo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ground_condition", ::apache::thrift::protocol::T_I32, 11);
  xfer += oprot->writeI32(this->ground_condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qr", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->fore_qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qa", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->fore_qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_k1", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->gas_k1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_k2", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->gas_k2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stereo_schem_diagram", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->stereo_schem_diagram);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("rock_gas_k2", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->rock_gas_k2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reserve_w1", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->reserve_w1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reserve_w2", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->reserve_w2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reserve_w3", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->reserve_w3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_w0", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->gas_w0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("gas_wc2", ::apache::thrift::protocol::T_DOUBLE, 24);
  xfer += oprot->writeDouble(this->gas_wc2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k2", ::apache::thrift::protocol::T_DOUBLE, 25);
  xfer += oprot->writeDouble(this->pump_k2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k3", ::apache::thrift::protocol::T_DOUBLE, 26);
  xfer += oprot->writeDouble(this->pump_k3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k4", ::apache::thrift::protocol::T_DOUBLE, 27);
  xfer += oprot->writeDouble(this->pump_k4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k1", ::apache::thrift::protocol::T_DOUBLE, 28);
  xfer += oprot->writeDouble(this->pump_k1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_k", ::apache::thrift::protocol::T_DOUBLE, 29);
  xfer += oprot->writeDouble(this->pump_k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pump_wc", ::apache::thrift::protocol::T_DOUBLE, 30);
  xfer += oprot->writeDouble(this->pump_wc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("reserve_gas", ::apache::thrift::protocol::T_DOUBLE, 31);
  xfer += oprot->writeDouble(this->reserve_gas);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("protect_layer_condition", ::apache::thrift::protocol::T_I32, 33);
  xfer += oprot->writeI32(this->protect_layer_condition);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Mine &a, Mine &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.tech_mode_id, b.tech_mode_id);
  swap(a.mine_region_id, b.mine_region_id);
  swap(a.account_id, b.account_id);
  swap(a.name, b.name);
  swap(a.province, b.province);
  swap(a.city, b.city);
  swap(a.capacity, b.capacity);
  swap(a.topo_geo, b.topo_geo);
  swap(a.hydr_geo, b.hydr_geo);
  swap(a.ground_condition, b.ground_condition);
  swap(a.qr, b.qr);
  swap(a.qa, b.qa);
  swap(a.fore_qr, b.fore_qr);
  swap(a.fore_qa, b.fore_qa);
  swap(a.gas_k1, b.gas_k1);
  swap(a.gas_k2, b.gas_k2);
  swap(a.stereo_schem_diagram, b.stereo_schem_diagram);
  swap(a.rock_gas_k2, b.rock_gas_k2);
  swap(a.reserve_w1, b.reserve_w1);
  swap(a.reserve_w2, b.reserve_w2);
  swap(a.reserve_w3, b.reserve_w3);
  swap(a.gas_w0, b.gas_w0);
  swap(a.gas_wc2, b.gas_wc2);
  swap(a.pump_k2, b.pump_k2);
  swap(a.pump_k3, b.pump_k3);
  swap(a.pump_k4, b.pump_k4);
  swap(a.pump_k1, b.pump_k1);
  swap(a.pump_k, b.pump_k);
  swap(a.pump_wc, b.pump_wc);
  swap(a.reserve_gas, b.reserve_gas);
  swap(a.comment, b.comment);
  swap(a.protect_layer_condition, b.protect_layer_condition);
  swap(a.__isset, b.__isset);
}

Mine::Mine(const Mine& other44) {
  id = other44.id;
  tech_mode_id = other44.tech_mode_id;
  mine_region_id = other44.mine_region_id;
  account_id = other44.account_id;
  name = other44.name;
  province = other44.province;
  city = other44.city;
  capacity = other44.capacity;
  topo_geo = other44.topo_geo;
  hydr_geo = other44.hydr_geo;
  ground_condition = other44.ground_condition;
  qr = other44.qr;
  qa = other44.qa;
  fore_qr = other44.fore_qr;
  fore_qa = other44.fore_qa;
  gas_k1 = other44.gas_k1;
  gas_k2 = other44.gas_k2;
  stereo_schem_diagram = other44.stereo_schem_diagram;
  rock_gas_k2 = other44.rock_gas_k2;
  reserve_w1 = other44.reserve_w1;
  reserve_w2 = other44.reserve_w2;
  reserve_w3 = other44.reserve_w3;
  gas_w0 = other44.gas_w0;
  gas_wc2 = other44.gas_wc2;
  pump_k2 = other44.pump_k2;
  pump_k3 = other44.pump_k3;
  pump_k4 = other44.pump_k4;
  pump_k1 = other44.pump_k1;
  pump_k = other44.pump_k;
  pump_wc = other44.pump_wc;
  reserve_gas = other44.reserve_gas;
  comment = other44.comment;
  protect_layer_condition = other44.protect_layer_condition;
  __isset = other44.__isset;
}
Mine& Mine::operator=(const Mine& other45) {
  id = other45.id;
  tech_mode_id = other45.tech_mode_id;
  mine_region_id = other45.mine_region_id;
  account_id = other45.account_id;
  name = other45.name;
  province = other45.province;
  city = other45.city;
  capacity = other45.capacity;
  topo_geo = other45.topo_geo;
  hydr_geo = other45.hydr_geo;
  ground_condition = other45.ground_condition;
  qr = other45.qr;
  qa = other45.qa;
  fore_qr = other45.fore_qr;
  fore_qa = other45.fore_qa;
  gas_k1 = other45.gas_k1;
  gas_k2 = other45.gas_k2;
  stereo_schem_diagram = other45.stereo_schem_diagram;
  rock_gas_k2 = other45.rock_gas_k2;
  reserve_w1 = other45.reserve_w1;
  reserve_w2 = other45.reserve_w2;
  reserve_w3 = other45.reserve_w3;
  gas_w0 = other45.gas_w0;
  gas_wc2 = other45.gas_wc2;
  pump_k2 = other45.pump_k2;
  pump_k3 = other45.pump_k3;
  pump_k4 = other45.pump_k4;
  pump_k1 = other45.pump_k1;
  pump_k = other45.pump_k;
  pump_wc = other45.pump_wc;
  reserve_gas = other45.reserve_gas;
  comment = other45.comment;
  protect_layer_condition = other45.protect_layer_condition;
  __isset = other45.__isset;
  return *this;
}
void Mine::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Mine(";
  out << "id=" << to_string(id);
  out << ", " << "tech_mode_id=" << to_string(tech_mode_id);
  out << ", " << "mine_region_id=" << to_string(mine_region_id);
  out << ", " << "account_id=" << to_string(account_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "province=" << to_string(province);
  out << ", " << "city=" << to_string(city);
  out << ", " << "capacity=" << to_string(capacity);
  out << ", " << "topo_geo=" << to_string(topo_geo);
  out << ", " << "hydr_geo=" << to_string(hydr_geo);
  out << ", " << "ground_condition=" << to_string(ground_condition);
  out << ", " << "qr=" << to_string(qr);
  out << ", " << "qa=" << to_string(qa);
  out << ", " << "fore_qr=" << to_string(fore_qr);
  out << ", " << "fore_qa=" << to_string(fore_qa);
  out << ", " << "gas_k1=" << to_string(gas_k1);
  out << ", " << "gas_k2=" << to_string(gas_k2);
  out << ", " << "stereo_schem_diagram=" << to_string(stereo_schem_diagram);
  out << ", " << "rock_gas_k2=" << to_string(rock_gas_k2);
  out << ", " << "reserve_w1=" << to_string(reserve_w1);
  out << ", " << "reserve_w2=" << to_string(reserve_w2);
  out << ", " << "reserve_w3=" << to_string(reserve_w3);
  out << ", " << "gas_w0=" << to_string(gas_w0);
  out << ", " << "gas_wc2=" << to_string(gas_wc2);
  out << ", " << "pump_k2=" << to_string(pump_k2);
  out << ", " << "pump_k3=" << to_string(pump_k3);
  out << ", " << "pump_k4=" << to_string(pump_k4);
  out << ", " << "pump_k1=" << to_string(pump_k1);
  out << ", " << "pump_k=" << to_string(pump_k);
  out << ", " << "pump_wc=" << to_string(pump_wc);
  out << ", " << "reserve_gas=" << to_string(reserve_gas);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "protect_layer_condition=" << to_string(protect_layer_condition);
  out << ")";
}


MineBase::~MineBase() throw() {
}


void MineBase::__set_id(const int32_t val) {
  this->id = val;
}

void MineBase::__set_name(const std::string& val) {
  this->name = val;
}

void MineBase::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t MineBase::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MineBase::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MineBase");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MineBase &a, MineBase &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

MineBase::MineBase(const MineBase& other46) {
  id = other46.id;
  name = other46.name;
  comment = other46.comment;
  __isset = other46.__isset;
}
MineBase& MineBase::operator=(const MineBase& other47) {
  id = other47.id;
  name = other47.name;
  comment = other47.comment;
  __isset = other47.__isset;
  return *this;
}
void MineBase::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MineBase(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


MineRegion::~MineRegion() throw() {
}


void MineRegion::__set_id(const int32_t val) {
  this->id = val;
}

void MineRegion::__set_mine_base_id(const int32_t val) {
  this->mine_base_id = val;
}

void MineRegion::__set_name(const std::string& val) {
  this->name = val;
}

void MineRegion::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t MineRegion::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mine_base_id);
          this->__isset.mine_base_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t MineRegion::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("MineRegion");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_base_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mine_base_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(MineRegion &a, MineRegion &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.mine_base_id, b.mine_base_id);
  swap(a.name, b.name);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

MineRegion::MineRegion(const MineRegion& other48) {
  id = other48.id;
  mine_base_id = other48.mine_base_id;
  name = other48.name;
  comment = other48.comment;
  __isset = other48.__isset;
}
MineRegion& MineRegion::operator=(const MineRegion& other49) {
  id = other49.id;
  mine_base_id = other49.mine_base_id;
  name = other49.name;
  comment = other49.comment;
  __isset = other49.__isset;
  return *this;
}
void MineRegion::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "MineRegion(";
  out << "id=" << to_string(id);
  out << ", " << "mine_base_id=" << to_string(mine_base_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


PoreFlow::~PoreFlow() throw() {
}


void PoreFlow::__set_id(const int32_t val) {
  this->id = val;
}

void PoreFlow::__set_name(const std::string& val) {
  this->name = val;
}

void PoreFlow::__set_t(const double val) {
  this->t = val;
}

void PoreFlow::__set_a0(const double val) {
  this->a0 = val;
}

void PoreFlow::__set_d(const double val) {
  this->d = val;
}

void PoreFlow::__set_d1(const double val) {
  this->d1 = val;
}

void PoreFlow::__set_m(const double val) {
  this->m = val;
}

void PoreFlow::__set_k(const double val) {
  this->k = val;
}

void PoreFlow::__set_delta_t(const double val) {
  this->delta_t = val;
}

void PoreFlow::__set_x(const double val) {
  this->x = val;
}

void PoreFlow::__set_p_test(const double val) {
  this->p_test = val;
}

void PoreFlow::__set_p_cur(const double val) {
  this->p_cur = val;
}

void PoreFlow::__set_b(const double val) {
  this->b = val;
}

void PoreFlow::__set_pt(const double val) {
  this->pt = val;
}

void PoreFlow::__set_delta_p(const double val) {
  this->delta_p = val;
}

void PoreFlow::__set_dh(const double val) {
  this->dh = val;
}

void PoreFlow::__set_q_hun(const double val) {
  this->q_hun = val;
}

void PoreFlow::__set_q_chun(const double val) {
  this->q_chun = val;
}

uint32_t PoreFlow::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->t);
          this->__isset.t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a0);
          this->__isset.a0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d1);
          this->__isset.d1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m);
          this->__isset.m = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k);
          this->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->delta_t);
          this->__isset.delta_t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_test);
          this->__isset.p_test = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_cur);
          this->__isset.p_cur = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pt);
          this->__isset.pt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->delta_p);
          this->__isset.delta_p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dh);
          this->__isset.dh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q_hun);
          this->__isset.q_hun = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q_chun);
          this->__isset.q_chun = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PoreFlow::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PoreFlow");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("t", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a0", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->a0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->d);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d1", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->d1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->m);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->k);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delta_t", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->delta_t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->x);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_test", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->p_test);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_cur", ::apache::thrift::protocol::T_DOUBLE, 12);
  xfer += oprot->writeDouble(this->p_cur);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->b);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pt", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->pt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delta_p", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->delta_p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dh", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->dh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q_hun", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->q_hun);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q_chun", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->q_chun);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PoreFlow &a, PoreFlow &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.t, b.t);
  swap(a.a0, b.a0);
  swap(a.d, b.d);
  swap(a.d1, b.d1);
  swap(a.m, b.m);
  swap(a.k, b.k);
  swap(a.delta_t, b.delta_t);
  swap(a.x, b.x);
  swap(a.p_test, b.p_test);
  swap(a.p_cur, b.p_cur);
  swap(a.b, b.b);
  swap(a.pt, b.pt);
  swap(a.delta_p, b.delta_p);
  swap(a.dh, b.dh);
  swap(a.q_hun, b.q_hun);
  swap(a.q_chun, b.q_chun);
  swap(a.__isset, b.__isset);
}

PoreFlow::PoreFlow(const PoreFlow& other50) {
  id = other50.id;
  name = other50.name;
  t = other50.t;
  a0 = other50.a0;
  d = other50.d;
  d1 = other50.d1;
  m = other50.m;
  k = other50.k;
  delta_t = other50.delta_t;
  x = other50.x;
  p_test = other50.p_test;
  p_cur = other50.p_cur;
  b = other50.b;
  pt = other50.pt;
  delta_p = other50.delta_p;
  dh = other50.dh;
  q_hun = other50.q_hun;
  q_chun = other50.q_chun;
  __isset = other50.__isset;
}
PoreFlow& PoreFlow::operator=(const PoreFlow& other51) {
  id = other51.id;
  name = other51.name;
  t = other51.t;
  a0 = other51.a0;
  d = other51.d;
  d1 = other51.d1;
  m = other51.m;
  k = other51.k;
  delta_t = other51.delta_t;
  x = other51.x;
  p_test = other51.p_test;
  p_cur = other51.p_cur;
  b = other51.b;
  pt = other51.pt;
  delta_p = other51.delta_p;
  dh = other51.dh;
  q_hun = other51.q_hun;
  q_chun = other51.q_chun;
  __isset = other51.__isset;
  return *this;
}
void PoreFlow::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PoreFlow(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "t=" << to_string(t);
  out << ", " << "a0=" << to_string(a0);
  out << ", " << "d=" << to_string(d);
  out << ", " << "d1=" << to_string(d1);
  out << ", " << "m=" << to_string(m);
  out << ", " << "k=" << to_string(k);
  out << ", " << "delta_t=" << to_string(delta_t);
  out << ", " << "x=" << to_string(x);
  out << ", " << "p_test=" << to_string(p_test);
  out << ", " << "p_cur=" << to_string(p_cur);
  out << ", " << "b=" << to_string(b);
  out << ", " << "pt=" << to_string(pt);
  out << ", " << "delta_p=" << to_string(delta_p);
  out << ", " << "dh=" << to_string(dh);
  out << ", " << "q_hun=" << to_string(q_hun);
  out << ", " << "q_chun=" << to_string(q_chun);
  out << ")";
}


PoreSize::~PoreSize() throw() {
}


void PoreSize::__set_id(const int32_t val) {
  this->id = val;
}

void PoreSize::__set_name(const std::string& val) {
  this->name = val;
}

void PoreSize::__set_q(const double val) {
  this->q = val;
}

void PoreSize::__set_v(const double val) {
  this->v = val;
}

void PoreSize::__set_d(const double val) {
  this->d = val;
}

void PoreSize::__set_p(const double val) {
  this->p = val;
}

void PoreSize::__set_sigma(const double val) {
  this->sigma = val;
}

void PoreSize::__set_delta(const double val) {
  this->delta = val;
}

void PoreSize::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t PoreSize::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q);
          this->__isset.q = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v);
          this->__isset.v = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p);
          this->__isset.p = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sigma);
          this->__isset.sigma = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->delta);
          this->__isset.delta = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PoreSize::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("PoreSize");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->q);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->v);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->d);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->p);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sigma", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->sigma);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delta", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->delta);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PoreSize &a, PoreSize &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.q, b.q);
  swap(a.v, b.v);
  swap(a.d, b.d);
  swap(a.p, b.p);
  swap(a.sigma, b.sigma);
  swap(a.delta, b.delta);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

PoreSize::PoreSize(const PoreSize& other52) {
  id = other52.id;
  name = other52.name;
  q = other52.q;
  v = other52.v;
  d = other52.d;
  p = other52.p;
  sigma = other52.sigma;
  delta = other52.delta;
  comment = other52.comment;
  __isset = other52.__isset;
}
PoreSize& PoreSize::operator=(const PoreSize& other53) {
  id = other53.id;
  name = other53.name;
  q = other53.q;
  v = other53.v;
  d = other53.d;
  p = other53.p;
  sigma = other53.sigma;
  delta = other53.delta;
  comment = other53.comment;
  __isset = other53.__isset;
  return *this;
}
void PoreSize::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "PoreSize(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "q=" << to_string(q);
  out << ", " << "v=" << to_string(v);
  out << ", " << "d=" << to_string(d);
  out << ", " << "p=" << to_string(p);
  out << ", " << "sigma=" << to_string(sigma);
  out << ", " << "delta=" << to_string(delta);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


ResAbundance::~ResAbundance() throw() {
}


void ResAbundance::__set_id(const int32_t val) {
  this->id = val;
}

void ResAbundance::__set_name(const std::string& val) {
  this->name = val;
}

void ResAbundance::__set_min_abundance(const double val) {
  this->min_abundance = val;
}

void ResAbundance::__set_max_abundance(const double val) {
  this->max_abundance = val;
}

uint32_t ResAbundance::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->min_abundance);
          this->__isset.min_abundance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->max_abundance);
          this->__isset.max_abundance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ResAbundance::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ResAbundance");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_abundance", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->min_abundance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_abundance", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->max_abundance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ResAbundance &a, ResAbundance &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.min_abundance, b.min_abundance);
  swap(a.max_abundance, b.max_abundance);
  swap(a.__isset, b.__isset);
}

ResAbundance::ResAbundance(const ResAbundance& other54) {
  id = other54.id;
  name = other54.name;
  min_abundance = other54.min_abundance;
  max_abundance = other54.max_abundance;
  __isset = other54.__isset;
}
ResAbundance& ResAbundance::operator=(const ResAbundance& other55) {
  id = other55.id;
  name = other55.name;
  min_abundance = other55.min_abundance;
  max_abundance = other55.max_abundance;
  __isset = other55.__isset;
  return *this;
}
void ResAbundance::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ResAbundance(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "min_abundance=" << to_string(min_abundance);
  out << ", " << "max_abundance=" << to_string(max_abundance);
  out << ")";
}


Rock::~Rock() throw() {
}


void Rock::__set_id(const int32_t val) {
  this->id = val;
}

void Rock::__set_name(const std::string& val) {
  this->name = val;
}

void Rock::__set_a(const double val) {
  this->a = val;
}

void Rock::__set_b(const double val) {
  this->b = val;
}

void Rock::__set_c(const double val) {
  this->c = val;
}

void Rock::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t Rock::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->c);
          this->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Rock::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Rock");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->b);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->c);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Rock &a, Rock &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.a, b.a);
  swap(a.b, b.b);
  swap(a.c, b.c);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

Rock::Rock(const Rock& other56) {
  id = other56.id;
  name = other56.name;
  a = other56.a;
  b = other56.b;
  c = other56.c;
  comment = other56.comment;
  __isset = other56.__isset;
}
Rock& Rock::operator=(const Rock& other57) {
  id = other57.id;
  name = other57.name;
  a = other57.a;
  b = other57.b;
  c = other57.c;
  comment = other57.comment;
  __isset = other57.__isset;
  return *this;
}
void Rock::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Rock(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "a=" << to_string(a);
  out << ", " << "b=" << to_string(b);
  out << ", " << "c=" << to_string(c);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


SysInfo::~SysInfo() throw() {
}


void SysInfo::__set_id(const int32_t val) {
  this->id = val;
}

void SysInfo::__set_account_id(const int32_t val) {
  this->account_id = val;
}

void SysInfo::__set_last_login_time(const std::string& val) {
  this->last_login_time = val;
}

void SysInfo::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t SysInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->account_id);
          this->__isset.account_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last_login_time);
          this->__isset.last_login_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SysInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SysInfo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("account_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->account_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_login_time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->last_login_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SysInfo &a, SysInfo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.account_id, b.account_id);
  swap(a.last_login_time, b.last_login_time);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

SysInfo::SysInfo(const SysInfo& other58) {
  id = other58.id;
  account_id = other58.account_id;
  last_login_time = other58.last_login_time;
  comment = other58.comment;
  __isset = other58.__isset;
}
SysInfo& SysInfo::operator=(const SysInfo& other59) {
  id = other59.id;
  account_id = other59.account_id;
  last_login_time = other59.last_login_time;
  comment = other59.comment;
  __isset = other59.__isset;
  return *this;
}
void SysInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SysInfo(";
  out << "id=" << to_string(id);
  out << ", " << "account_id=" << to_string(account_id);
  out << ", " << "last_login_time=" << to_string(last_login_time);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


TechMode::~TechMode() throw() {
}


void TechMode::__set_id(const int32_t val) {
  this->id = val;
}

void TechMode::__set_mine_region_id(const int32_t val) {
  this->mine_region_id = val;
}

void TechMode::__set_name(const std::string& val) {
  this->name = val;
}

void TechMode::__set_mode_type(const int32_t val) {
  this->mode_type = val;
}

void TechMode::__set_c1(const int32_t val) {
  this->c1 = val;
}

void TechMode::__set_c2(const int32_t val) {
  this->c2 = val;
}

void TechMode::__set_c3(const int32_t val) {
  this->c3 = val;
}

void TechMode::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t TechMode::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mine_region_id);
          this->__isset.mine_region_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mode_type);
          this->__isset.mode_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c1);
          this->__isset.c1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c2);
          this->__isset.c2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->c3);
          this->__isset.c3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TechMode::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TechMode");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_region_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mine_region_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode_type", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->mode_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c1", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->c1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c2", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->c2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("c3", ::apache::thrift::protocol::T_I32, 7);
  xfer += oprot->writeI32(this->c3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TechMode &a, TechMode &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.mine_region_id, b.mine_region_id);
  swap(a.name, b.name);
  swap(a.mode_type, b.mode_type);
  swap(a.c1, b.c1);
  swap(a.c2, b.c2);
  swap(a.c3, b.c3);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

TechMode::TechMode(const TechMode& other60) {
  id = other60.id;
  mine_region_id = other60.mine_region_id;
  name = other60.name;
  mode_type = other60.mode_type;
  c1 = other60.c1;
  c2 = other60.c2;
  c3 = other60.c3;
  comment = other60.comment;
  __isset = other60.__isset;
}
TechMode& TechMode::operator=(const TechMode& other61) {
  id = other61.id;
  mine_region_id = other61.mine_region_id;
  name = other61.name;
  mode_type = other61.mode_type;
  c1 = other61.c1;
  c2 = other61.c2;
  c3 = other61.c3;
  comment = other61.comment;
  __isset = other61.__isset;
  return *this;
}
void TechMode::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TechMode(";
  out << "id=" << to_string(id);
  out << ", " << "mine_region_id=" << to_string(mine_region_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "mode_type=" << to_string(mode_type);
  out << ", " << "c1=" << to_string(c1);
  out << ", " << "c2=" << to_string(c2);
  out << ", " << "c3=" << to_string(c3);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


Technology::~Technology() throw() {
}


void Technology::__set_id(const int32_t val) {
  this->id = val;
}

void Technology::__set_mine_region_id(const int32_t val) {
  this->mine_region_id = val;
}

void Technology::__set_name(const std::string& val) {
  this->name = val;
}

void Technology::__set_iskey(const int32_t val) {
  this->iskey = val;
}

void Technology::__set_doc(const std::string& val) {
  this->doc = val;
}

void Technology::__set_video(const std::string& val) {
  this->video = val;
}

void Technology::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t Technology::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mine_region_id);
          this->__isset.mine_region_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->iskey);
          this->__isset.iskey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->doc);
          this->__isset.doc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->video);
          this->__isset.video = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Technology::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Technology");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mine_region_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->mine_region_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("iskey", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->iskey);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("doc", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->doc);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("video", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->video);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Technology &a, Technology &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.mine_region_id, b.mine_region_id);
  swap(a.name, b.name);
  swap(a.iskey, b.iskey);
  swap(a.doc, b.doc);
  swap(a.video, b.video);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

Technology::Technology(const Technology& other62) {
  id = other62.id;
  mine_region_id = other62.mine_region_id;
  name = other62.name;
  iskey = other62.iskey;
  doc = other62.doc;
  video = other62.video;
  comment = other62.comment;
  __isset = other62.__isset;
}
Technology& Technology::operator=(const Technology& other63) {
  id = other63.id;
  mine_region_id = other63.mine_region_id;
  name = other63.name;
  iskey = other63.iskey;
  doc = other63.doc;
  video = other63.video;
  comment = other63.comment;
  __isset = other63.__isset;
  return *this;
}
void Technology::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Technology(";
  out << "id=" << to_string(id);
  out << ", " << "mine_region_id=" << to_string(mine_region_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "iskey=" << to_string(iskey);
  out << ", " << "doc=" << to_string(doc);
  out << ", " << "video=" << to_string(video);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


TopoGeo::~TopoGeo() throw() {
}


void TopoGeo::__set_id(const int32_t val) {
  this->id = val;
}

void TopoGeo::__set_name(const std::string& val) {
  this->name = val;
}

void TopoGeo::__set_feature(const std::string& val) {
  this->feature = val;
}

void TopoGeo::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t TopoGeo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->feature);
          this->__isset.feature = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TopoGeo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TopoGeo");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("feature", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->feature);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TopoGeo &a, TopoGeo &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.feature, b.feature);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

TopoGeo::TopoGeo(const TopoGeo& other64) {
  id = other64.id;
  name = other64.name;
  feature = other64.feature;
  comment = other64.comment;
  __isset = other64.__isset;
}
TopoGeo& TopoGeo::operator=(const TopoGeo& other65) {
  id = other65.id;
  name = other65.name;
  feature = other65.feature;
  comment = other65.comment;
  __isset = other65.__isset;
  return *this;
}
void TopoGeo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TopoGeo(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "feature=" << to_string(feature);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


Tunnel::~Tunnel() throw() {
}


void Tunnel::__set_id(const int32_t val) {
  this->id = val;
}

void Tunnel::__set_name(const std::string& val) {
  this->name = val;
}

void Tunnel::__set_b(const double val) {
  this->b = val;
}

void Tunnel::__set_h(const double val) {
  this->h = val;
}

void Tunnel::__set_l(const double val) {
  this->l = val;
}

void Tunnel::__set_s(const double val) {
  this->s = val;
}

void Tunnel::__set_d(const double val) {
  this->d = val;
}

void Tunnel::__set_wh(const double val) {
  this->wh = val;
}

void Tunnel::__set_v(const double val) {
  this->v = val;
}

void Tunnel::__set_q3(const double val) {
  this->q3 = val;
}

void Tunnel::__set_q0(const double val) {
  this->q0 = val;
}

void Tunnel::__set_comment(const std::string& val) {
  this->comment = val;
}

void Tunnel::__set_tunnel_type(const int32_t val) {
  this->tunnel_type = val;
}

void Tunnel::__set_top_side(const double val) {
  this->top_side = val;
}

void Tunnel::__set_bottom_side(const double val) {
  this->bottom_side = val;
}

void Tunnel::__set_left_side(const double val) {
  this->left_side = val;
}

void Tunnel::__set_right_side(const double val) {
  this->right_side = val;
}

void Tunnel::__set_x1(const double val) {
  this->x1 = val;
}

void Tunnel::__set_y1(const double val) {
  this->y1 = val;
}

void Tunnel::__set_z1(const double val) {
  this->z1 = val;
}

void Tunnel::__set_x2(const double val) {
  this->x2 = val;
}

void Tunnel::__set_y2(const double val) {
  this->y2 = val;
}

void Tunnel::__set_z2(const double val) {
  this->z2 = val;
}

uint32_t Tunnel::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->b);
          this->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->h);
          this->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l);
          this->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->s);
          this->__isset.s = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->d);
          this->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->wh);
          this->__isset.wh = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->v);
          this->__isset.v = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q3);
          this->__isset.q3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q0);
          this->__isset.q0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tunnel_type);
          this->__isset.tunnel_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->top_side);
          this->__isset.top_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->bottom_side);
          this->__isset.bottom_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->left_side);
          this->__isset.left_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->right_side);
          this->__isset.right_side = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x1);
          this->__isset.x1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y1);
          this->__isset.y1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z1);
          this->__isset.z1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->x2);
          this->__isset.x2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->y2);
          this->__isset.y2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z2);
          this->__isset.z2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tunnel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Tunnel");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("b", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->b);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("h", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->h);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->l);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("s", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->s);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("d", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->d);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("wh", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->wh);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("v", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->v);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q3", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->q3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q0", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->q0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tunnel_type", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->tunnel_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("top_side", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->top_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("bottom_side", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->bottom_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("left_side", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->left_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("right_side", ::apache::thrift::protocol::T_DOUBLE, 17);
  xfer += oprot->writeDouble(this->right_side);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x1", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->x1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y1", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->y1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z1", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->z1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("x2", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->x2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("y2", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->y2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("z2", ::apache::thrift::protocol::T_DOUBLE, 23);
  xfer += oprot->writeDouble(this->z2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tunnel &a, Tunnel &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.b, b.b);
  swap(a.h, b.h);
  swap(a.l, b.l);
  swap(a.s, b.s);
  swap(a.d, b.d);
  swap(a.wh, b.wh);
  swap(a.v, b.v);
  swap(a.q3, b.q3);
  swap(a.q0, b.q0);
  swap(a.comment, b.comment);
  swap(a.tunnel_type, b.tunnel_type);
  swap(a.top_side, b.top_side);
  swap(a.bottom_side, b.bottom_side);
  swap(a.left_side, b.left_side);
  swap(a.right_side, b.right_side);
  swap(a.x1, b.x1);
  swap(a.y1, b.y1);
  swap(a.z1, b.z1);
  swap(a.x2, b.x2);
  swap(a.y2, b.y2);
  swap(a.z2, b.z2);
  swap(a.__isset, b.__isset);
}

Tunnel::Tunnel(const Tunnel& other66) {
  id = other66.id;
  name = other66.name;
  b = other66.b;
  h = other66.h;
  l = other66.l;
  s = other66.s;
  d = other66.d;
  wh = other66.wh;
  v = other66.v;
  q3 = other66.q3;
  q0 = other66.q0;
  comment = other66.comment;
  tunnel_type = other66.tunnel_type;
  top_side = other66.top_side;
  bottom_side = other66.bottom_side;
  left_side = other66.left_side;
  right_side = other66.right_side;
  x1 = other66.x1;
  y1 = other66.y1;
  z1 = other66.z1;
  x2 = other66.x2;
  y2 = other66.y2;
  z2 = other66.z2;
  __isset = other66.__isset;
}
Tunnel& Tunnel::operator=(const Tunnel& other67) {
  id = other67.id;
  name = other67.name;
  b = other67.b;
  h = other67.h;
  l = other67.l;
  s = other67.s;
  d = other67.d;
  wh = other67.wh;
  v = other67.v;
  q3 = other67.q3;
  q0 = other67.q0;
  comment = other67.comment;
  tunnel_type = other67.tunnel_type;
  top_side = other67.top_side;
  bottom_side = other67.bottom_side;
  left_side = other67.left_side;
  right_side = other67.right_side;
  x1 = other67.x1;
  y1 = other67.y1;
  z1 = other67.z1;
  x2 = other67.x2;
  y2 = other67.y2;
  z2 = other67.z2;
  __isset = other67.__isset;
  return *this;
}
void Tunnel::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Tunnel(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "b=" << to_string(b);
  out << ", " << "h=" << to_string(h);
  out << ", " << "l=" << to_string(l);
  out << ", " << "s=" << to_string(s);
  out << ", " << "d=" << to_string(d);
  out << ", " << "wh=" << to_string(wh);
  out << ", " << "v=" << to_string(v);
  out << ", " << "q3=" << to_string(q3);
  out << ", " << "q0=" << to_string(q0);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "tunnel_type=" << to_string(tunnel_type);
  out << ", " << "top_side=" << to_string(top_side);
  out << ", " << "bottom_side=" << to_string(bottom_side);
  out << ", " << "left_side=" << to_string(left_side);
  out << ", " << "right_side=" << to_string(right_side);
  out << ", " << "x1=" << to_string(x1);
  out << ", " << "y1=" << to_string(y1);
  out << ", " << "z1=" << to_string(z1);
  out << ", " << "x2=" << to_string(x2);
  out << ", " << "y2=" << to_string(y2);
  out << ", " << "z2=" << to_string(z2);
  out << ")";
}


WorkArea::~WorkArea() throw() {
}


void WorkArea::__set_id(const int32_t val) {
  this->id = val;
}

void WorkArea::__set_coal_id(const int32_t val) {
  this->coal_id = val;
}

void WorkArea::__set_name(const std::string& val) {
  this->name = val;
}

void WorkArea::__set_mode(const int32_t val) {
  this->mode = val;
}

void WorkArea::__set_a(const double val) {
  this->a = val;
}

void WorkArea::__set_qr(const double val) {
  this->qr = val;
}

void WorkArea::__set_qa(const double val) {
  this->qa = val;
}

void WorkArea::__set_fore_qr(const double val) {
  this->fore_qr = val;
}

void WorkArea::__set_fore_qa(const double val) {
  this->fore_qa = val;
}

void WorkArea::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t WorkArea::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->coal_id);
          this->__isset.coal_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mode);
          this->__isset.mode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr);
          this->__isset.qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qr);
          this->__isset.fore_qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qa);
          this->__isset.fore_qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorkArea::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WorkArea");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("coal_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->coal_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mode", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->mode);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qr", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->fore_qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qa", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->fore_qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorkArea &a, WorkArea &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.coal_id, b.coal_id);
  swap(a.name, b.name);
  swap(a.mode, b.mode);
  swap(a.a, b.a);
  swap(a.qr, b.qr);
  swap(a.qa, b.qa);
  swap(a.fore_qr, b.fore_qr);
  swap(a.fore_qa, b.fore_qa);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

WorkArea::WorkArea(const WorkArea& other68) {
  id = other68.id;
  coal_id = other68.coal_id;
  name = other68.name;
  mode = other68.mode;
  a = other68.a;
  qr = other68.qr;
  qa = other68.qa;
  fore_qr = other68.fore_qr;
  fore_qa = other68.fore_qa;
  comment = other68.comment;
  __isset = other68.__isset;
}
WorkArea& WorkArea::operator=(const WorkArea& other69) {
  id = other69.id;
  coal_id = other69.coal_id;
  name = other69.name;
  mode = other69.mode;
  a = other69.a;
  qr = other69.qr;
  qa = other69.qa;
  fore_qr = other69.fore_qr;
  fore_qa = other69.fore_qa;
  comment = other69.comment;
  __isset = other69.__isset;
  return *this;
}
void WorkArea::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WorkArea(";
  out << "id=" << to_string(id);
  out << ", " << "coal_id=" << to_string(coal_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "mode=" << to_string(mode);
  out << ", " << "a=" << to_string(a);
  out << ", " << "qr=" << to_string(qr);
  out << ", " << "qa=" << to_string(qa);
  out << ", " << "fore_qr=" << to_string(fore_qr);
  out << ", " << "fore_qa=" << to_string(fore_qa);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


WorkSurf::~WorkSurf() throw() {
}


void WorkSurf::__set_id(const int32_t val) {
  this->id = val;
}

void WorkSurf::__set_work_area_id(const int32_t val) {
  this->work_area_id = val;
}

void WorkSurf::__set_tunnel_id(const int32_t val) {
  this->tunnel_id = val;
}

void WorkSurf::__set_name(const std::string& val) {
  this->name = val;
}

void WorkSurf::__set_a(const double val) {
  this->a = val;
}

void WorkSurf::__set_qr(const double val) {
  this->qr = val;
}

void WorkSurf::__set_qa(const double val) {
  this->qa = val;
}

void WorkSurf::__set_fore_qr(const double val) {
  this->fore_qr = val;
}

void WorkSurf::__set_fore_qa(const double val) {
  this->fore_qa = val;
}

void WorkSurf::__set_l1(const double val) {
  this->l1 = val;
}

void WorkSurf::__set_l2(const double val) {
  this->l2 = val;
}

void WorkSurf::__set_layerable(const int32_t val) {
  this->layerable = val;
}

void WorkSurf::__set_k1(const double val) {
  this->k1 = val;
}

void WorkSurf::__set_k2(const double val) {
  this->k2 = val;
}

void WorkSurf::__set_k3(const double val) {
  this->k3 = val;
}

void WorkSurf::__set_kf(const double val) {
  this->kf = val;
}

void WorkSurf::__set_method(const int32_t val) {
  this->method = val;
}

void WorkSurf::__set_last_t(const double val) {
  this->last_t = val;
}

void WorkSurf::__set_qr1(const double val) {
  this->qr1 = val;
}

void WorkSurf::__set_qr2(const double val) {
  this->qr2 = val;
}

void WorkSurf::__set_comment(const std::string& val) {
  this->comment = val;
}

uint32_t WorkSurf::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->work_area_id);
          this->__isset.work_area_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->tunnel_id);
          this->__isset.tunnel_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->a);
          this->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr);
          this->__isset.qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qr);
          this->__isset.fore_qr = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fore_qa);
          this->__isset.fore_qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l1);
          this->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->l2);
          this->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->layerable);
          this->__isset.layerable = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k1);
          this->__isset.k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k2);
          this->__isset.k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k3);
          this->__isset.k3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->kf);
          this->__isset.kf = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->method);
          this->__isset.method = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->last_t);
          this->__isset.last_t = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr1);
          this->__isset.qr1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qr2);
          this->__isset.qr2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WorkSurf::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WorkSurf");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("work_area_id", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->work_area_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tunnel_id", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->tunnel_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("a", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->a);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qr", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->fore_qr);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fore_qa", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->fore_qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l1", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->l1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("l2", ::apache::thrift::protocol::T_DOUBLE, 11);
  xfer += oprot->writeDouble(this->l2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("layerable", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->layerable);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k1", ::apache::thrift::protocol::T_DOUBLE, 13);
  xfer += oprot->writeDouble(this->k1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k2", ::apache::thrift::protocol::T_DOUBLE, 14);
  xfer += oprot->writeDouble(this->k2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("k3", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->k3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("kf", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->kf);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("method", ::apache::thrift::protocol::T_I32, 17);
  xfer += oprot->writeI32(this->method);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last_t", ::apache::thrift::protocol::T_DOUBLE, 18);
  xfer += oprot->writeDouble(this->last_t);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr1", ::apache::thrift::protocol::T_DOUBLE, 19);
  xfer += oprot->writeDouble(this->qr1);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qr2", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->qr2);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WorkSurf &a, WorkSurf &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.work_area_id, b.work_area_id);
  swap(a.tunnel_id, b.tunnel_id);
  swap(a.name, b.name);
  swap(a.a, b.a);
  swap(a.qr, b.qr);
  swap(a.qa, b.qa);
  swap(a.fore_qr, b.fore_qr);
  swap(a.fore_qa, b.fore_qa);
  swap(a.l1, b.l1);
  swap(a.l2, b.l2);
  swap(a.layerable, b.layerable);
  swap(a.k1, b.k1);
  swap(a.k2, b.k2);
  swap(a.k3, b.k3);
  swap(a.kf, b.kf);
  swap(a.method, b.method);
  swap(a.last_t, b.last_t);
  swap(a.qr1, b.qr1);
  swap(a.qr2, b.qr2);
  swap(a.comment, b.comment);
  swap(a.__isset, b.__isset);
}

WorkSurf::WorkSurf(const WorkSurf& other70) {
  id = other70.id;
  work_area_id = other70.work_area_id;
  tunnel_id = other70.tunnel_id;
  name = other70.name;
  a = other70.a;
  qr = other70.qr;
  qa = other70.qa;
  fore_qr = other70.fore_qr;
  fore_qa = other70.fore_qa;
  l1 = other70.l1;
  l2 = other70.l2;
  layerable = other70.layerable;
  k1 = other70.k1;
  k2 = other70.k2;
  k3 = other70.k3;
  kf = other70.kf;
  method = other70.method;
  last_t = other70.last_t;
  qr1 = other70.qr1;
  qr2 = other70.qr2;
  comment = other70.comment;
  __isset = other70.__isset;
}
WorkSurf& WorkSurf::operator=(const WorkSurf& other71) {
  id = other71.id;
  work_area_id = other71.work_area_id;
  tunnel_id = other71.tunnel_id;
  name = other71.name;
  a = other71.a;
  qr = other71.qr;
  qa = other71.qa;
  fore_qr = other71.fore_qr;
  fore_qa = other71.fore_qa;
  l1 = other71.l1;
  l2 = other71.l2;
  layerable = other71.layerable;
  k1 = other71.k1;
  k2 = other71.k2;
  k3 = other71.k3;
  kf = other71.kf;
  method = other71.method;
  last_t = other71.last_t;
  qr1 = other71.qr1;
  qr2 = other71.qr2;
  comment = other71.comment;
  __isset = other71.__isset;
  return *this;
}
void WorkSurf::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WorkSurf(";
  out << "id=" << to_string(id);
  out << ", " << "work_area_id=" << to_string(work_area_id);
  out << ", " << "tunnel_id=" << to_string(tunnel_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "a=" << to_string(a);
  out << ", " << "qr=" << to_string(qr);
  out << ", " << "qa=" << to_string(qa);
  out << ", " << "fore_qr=" << to_string(fore_qr);
  out << ", " << "fore_qa=" << to_string(fore_qa);
  out << ", " << "l1=" << to_string(l1);
  out << ", " << "l2=" << to_string(l2);
  out << ", " << "layerable=" << to_string(layerable);
  out << ", " << "k1=" << to_string(k1);
  out << ", " << "k2=" << to_string(k2);
  out << ", " << "k3=" << to_string(k3);
  out << ", " << "kf=" << to_string(kf);
  out << ", " << "method=" << to_string(method);
  out << ", " << "last_t=" << to_string(last_t);
  out << ", " << "qr1=" << to_string(qr1);
  out << ", " << "qr2=" << to_string(qr2);
  out << ", " << "comment=" << to_string(comment);
  out << ")";
}


DrillingSurfGasFlowResult::~DrillingSurfGasFlowResult() throw() {
}


void DrillingSurfGasFlowResult::__set_q0(const double val) {
  this->q0 = val;
}

void DrillingSurfGasFlowResult::__set_q3(const double val) {
  this->q3 = val;
}

void DrillingSurfGasFlowResult::__set_q4(const double val) {
  this->q4 = val;
}

void DrillingSurfGasFlowResult::__set_qa(const double val) {
  this->qa = val;
}

uint32_t DrillingSurfGasFlowResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q0);
          this->__isset.q0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q3);
          this->__isset.q3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->q4);
          this->__isset.q4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->qa);
          this->__isset.qa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DrillingSurfGasFlowResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("DrillingSurfGasFlowResult");

  xfer += oprot->writeFieldBegin("q0", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->q0);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q3", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->q3);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("q4", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->q4);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("qa", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->qa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(DrillingSurfGasFlowResult &a, DrillingSurfGasFlowResult &b) {
  using ::std::swap;
  swap(a.q0, b.q0);
  swap(a.q3, b.q3);
  swap(a.q4, b.q4);
  swap(a.qa, b.qa);
  swap(a.__isset, b.__isset);
}

DrillingSurfGasFlowResult::DrillingSurfGasFlowResult(const DrillingSurfGasFlowResult& other72) {
  q0 = other72.q0;
  q3 = other72.q3;
  q4 = other72.q4;
  qa = other72.qa;
  __isset = other72.__isset;
}
DrillingSurfGasFlowResult& DrillingSurfGasFlowResult::operator=(const DrillingSurfGasFlowResult& other73) {
  q0 = other73.q0;
  q3 = other73.q3;
  q4 = other73.q4;
  qa = other73.qa;
  __isset = other73.__isset;
  return *this;
}
void DrillingSurfGasFlowResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "DrillingSurfGasFlowResult(";
  out << "q0=" << to_string(q0);
  out << ", " << "q3=" << to_string(q3);
  out << ", " << "q4=" << to_string(q4);
  out << ", " << "qa=" << to_string(qa);
  out << ")";
}

} // namespace
