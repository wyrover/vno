/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef cbm_TYPES_H
#define cbm_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace cbm {

class Account;

class AdjLayer;

class Coal;

class Complexity;

class DesignDrillingSurfTechnology;

class DesignEvalUnit;

class DesignEvalUnitPartition;

class DesignGoafPore;

class DesignGoafTechnology;

class DesignPore;

class DesignSite;

class DesignTechnology;

class DesignTunnelControlPoint;

class DesignWorkSurfControlPoint;

class DesignWorkSurfTechnology;

class DrillingRadiusParam;

class DrillingSurf;

class HighDrillingPore;

class HighDrillingPoreParam;

class HighDrillingSiteParam;

class HighDrillingTunnel;

class HydrGeo;

class Mine;

class MineBase;

class MineRegion;

class PoreFlow;

class PoreSize;

class ResAbundance;

class Rock;

class SysInfo;

class TechMode;

class Technology;

class TopoGeo;

class Tunnel;

class WorkArea;

class WorkSurf;

class DrillingSurfGasFlowResult;

typedef struct _Account__isset {
  _Account__isset() : id(false), username(false), password(false), comment(false) {}
  bool id :1;
  bool username :1;
  bool password :1;
  bool comment :1;
} _Account__isset;

class Account {
 public:

  Account(const Account&);
  Account& operator=(const Account&);
  Account() : id(0), username(), password(), comment() {
  }

  virtual ~Account() throw();
  int32_t id;
  std::string username;
  std::string password;
  std::string comment;

  _Account__isset __isset;

  void __set_id(const int32_t val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const Account & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Account &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Account & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Account &a, Account &b);

inline std::ostream& operator<<(std::ostream& out, const Account& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _AdjLayer__isset {
  _AdjLayer__isset() : id(false), work_surf_id(false), coal_id(false), name(false), num(false), h(false), hp(false), in_cz(false), comment(false) {}
  bool id :1;
  bool work_surf_id :1;
  bool coal_id :1;
  bool name :1;
  bool num :1;
  bool h :1;
  bool hp :1;
  bool in_cz :1;
  bool comment :1;
} _AdjLayer__isset;

class AdjLayer {
 public:

  AdjLayer(const AdjLayer&);
  AdjLayer& operator=(const AdjLayer&);
  AdjLayer() : id(0), work_surf_id(0), coal_id(0), name(), num(0), h(0), hp(0), in_cz(0), comment() {
  }

  virtual ~AdjLayer() throw();
  int32_t id;
  int32_t work_surf_id;
  int32_t coal_id;
  std::string name;
  int32_t num;
  double h;
  double hp;
  int32_t in_cz;
  std::string comment;

  _AdjLayer__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_surf_id(const int32_t val);

  void __set_coal_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_num(const int32_t val);

  void __set_h(const double val);

  void __set_hp(const double val);

  void __set_in_cz(const int32_t val);

  void __set_comment(const std::string& val);

  bool operator == (const AdjLayer & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_surf_id == rhs.work_surf_id))
      return false;
    if (!(coal_id == rhs.coal_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(hp == rhs.hp))
      return false;
    if (!(in_cz == rhs.in_cz))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const AdjLayer &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AdjLayer & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AdjLayer &a, AdjLayer &b);

inline std::ostream& operator<<(std::ostream& out, const AdjLayer& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Coal__isset {
  _Coal__isset() : id(false), mine_id(false), name(false), minable(false), thick(false), hw(false), qa(false), qr(false), fore_qr(false), fore_qa(false), rank(false), quality(false), pressure(false), gas_content(false), f_value(false), res_abundance(false), complexity(false), mine_index(false), var_coeff(false), stability(false), dip_angle(false), czh(false), czk(false), czw(false), hw_sum(false), rock(false), hhh(false), layer_gap(false), influence_factor(false), res_a1(false), gas_x1(false), res_a2(false), gas_x2(false), pump_wc(false), pump_k(false), pump_k2(false), pump_k3(false), pump_k4(false), pump_k1(false), pore_datas(false), rho(false), vr(false), gas_w0(false), gas_wc2(false), gas_wc3(false), gas_eta(false), q0(false), eval_method(false), q0_alpha(false), qt_alpha(false), t_alpha(false), q_lambda(false), r_lambda(false), p0_lambda(false), p1_lambda(false), t_lambda(false), a_lambda(false), p1_k(false), p2_k(false), gas_q(false), core_height(false), core_area(false), gas_viscosity(false), decay_alpha(false), permeability_lambda(false), permeability_k(false), eval_difficult(false), comment(false), relative_layer_gap(false), is_protectable(false) {}
  bool id :1;
  bool mine_id :1;
  bool name :1;
  bool minable :1;
  bool thick :1;
  bool hw :1;
  bool qa :1;
  bool qr :1;
  bool fore_qr :1;
  bool fore_qa :1;
  bool rank :1;
  bool quality :1;
  bool pressure :1;
  bool gas_content :1;
  bool f_value :1;
  bool res_abundance :1;
  bool complexity :1;
  bool mine_index :1;
  bool var_coeff :1;
  bool stability :1;
  bool dip_angle :1;
  bool czh :1;
  bool czk :1;
  bool czw :1;
  bool hw_sum :1;
  bool rock :1;
  bool hhh :1;
  bool layer_gap :1;
  bool influence_factor :1;
  bool res_a1 :1;
  bool gas_x1 :1;
  bool res_a2 :1;
  bool gas_x2 :1;
  bool pump_wc :1;
  bool pump_k :1;
  bool pump_k2 :1;
  bool pump_k3 :1;
  bool pump_k4 :1;
  bool pump_k1 :1;
  bool pore_datas :1;
  bool rho :1;
  bool vr :1;
  bool gas_w0 :1;
  bool gas_wc2 :1;
  bool gas_wc3 :1;
  bool gas_eta :1;
  bool q0 :1;
  bool eval_method :1;
  bool q0_alpha :1;
  bool qt_alpha :1;
  bool t_alpha :1;
  bool q_lambda :1;
  bool r_lambda :1;
  bool p0_lambda :1;
  bool p1_lambda :1;
  bool t_lambda :1;
  bool a_lambda :1;
  bool p1_k :1;
  bool p2_k :1;
  bool gas_q :1;
  bool core_height :1;
  bool core_area :1;
  bool gas_viscosity :1;
  bool decay_alpha :1;
  bool permeability_lambda :1;
  bool permeability_k :1;
  bool eval_difficult :1;
  bool comment :1;
  bool relative_layer_gap :1;
  bool is_protectable :1;
} _Coal__isset;

class Coal {
 public:

  Coal(const Coal&);
  Coal& operator=(const Coal&);
  Coal() : id(0), mine_id(0), name(), minable(0), thick(0), hw(0), qa(0), qr(0), fore_qr(0), fore_qa(0), rank(0), quality(0), pressure(0), gas_content(0), f_value(0), res_abundance(0), complexity(0), mine_index(0), var_coeff(0), stability(0), dip_angle(0), czh(0), czk(0), czw(0), hw_sum(0), rock(0), hhh(0), layer_gap(0), influence_factor(0), res_a1(0), gas_x1(0), res_a2(0), gas_x2(0), pump_wc(0), pump_k(0), pump_k2(0), pump_k3(0), pump_k4(0), pump_k1(0), pore_datas(), rho(0), vr(0), gas_w0(0), gas_wc2(0), gas_wc3(0), gas_eta(0), q0(0), eval_method(0), q0_alpha(0), qt_alpha(0), t_alpha(0), q_lambda(0), r_lambda(0), p0_lambda(0), p1_lambda(0), t_lambda(0), a_lambda(0), p1_k(0), p2_k(0), gas_q(0), core_height(0), core_area(0), gas_viscosity(0), decay_alpha(0), permeability_lambda(0), permeability_k(0), eval_difficult(0), comment(), relative_layer_gap(0), is_protectable(0) {
  }

  virtual ~Coal() throw();
  int32_t id;
  int32_t mine_id;
  std::string name;
  int32_t minable;
  double thick;
  double hw;
  double qa;
  double qr;
  double fore_qr;
  double fore_qa;
  int32_t rank;
  int32_t quality;
  double pressure;
  double gas_content;
  double f_value;
  int32_t res_abundance;
  int32_t complexity;
  double mine_index;
  double var_coeff;
  int32_t stability;
  double dip_angle;
  double czh;
  double czk;
  double czw;
  double hw_sum;
  int32_t rock;
  double hhh;
  double layer_gap;
  double influence_factor;
  double res_a1;
  double gas_x1;
  double res_a2;
  double gas_x2;
  double pump_wc;
  double pump_k;
  double pump_k2;
  double pump_k3;
  double pump_k4;
  double pump_k1;
  std::string pore_datas;
  double rho;
  double vr;
  double gas_w0;
  double gas_wc2;
  double gas_wc3;
  double gas_eta;
  double q0;
  int32_t eval_method;
  double q0_alpha;
  double qt_alpha;
  double t_alpha;
  double q_lambda;
  double r_lambda;
  double p0_lambda;
  double p1_lambda;
  double t_lambda;
  double a_lambda;
  double p1_k;
  double p2_k;
  double gas_q;
  double core_height;
  double core_area;
  double gas_viscosity;
  double decay_alpha;
  double permeability_lambda;
  double permeability_k;
  int32_t eval_difficult;
  std::string comment;
  double relative_layer_gap;
  int32_t is_protectable;

  _Coal__isset __isset;

  void __set_id(const int32_t val);

  void __set_mine_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_minable(const int32_t val);

  void __set_thick(const double val);

  void __set_hw(const double val);

  void __set_qa(const double val);

  void __set_qr(const double val);

  void __set_fore_qr(const double val);

  void __set_fore_qa(const double val);

  void __set_rank(const int32_t val);

  void __set_quality(const int32_t val);

  void __set_pressure(const double val);

  void __set_gas_content(const double val);

  void __set_f_value(const double val);

  void __set_res_abundance(const int32_t val);

  void __set_complexity(const int32_t val);

  void __set_mine_index(const double val);

  void __set_var_coeff(const double val);

  void __set_stability(const int32_t val);

  void __set_dip_angle(const double val);

  void __set_czh(const double val);

  void __set_czk(const double val);

  void __set_czw(const double val);

  void __set_hw_sum(const double val);

  void __set_rock(const int32_t val);

  void __set_hhh(const double val);

  void __set_layer_gap(const double val);

  void __set_influence_factor(const double val);

  void __set_res_a1(const double val);

  void __set_gas_x1(const double val);

  void __set_res_a2(const double val);

  void __set_gas_x2(const double val);

  void __set_pump_wc(const double val);

  void __set_pump_k(const double val);

  void __set_pump_k2(const double val);

  void __set_pump_k3(const double val);

  void __set_pump_k4(const double val);

  void __set_pump_k1(const double val);

  void __set_pore_datas(const std::string& val);

  void __set_rho(const double val);

  void __set_vr(const double val);

  void __set_gas_w0(const double val);

  void __set_gas_wc2(const double val);

  void __set_gas_wc3(const double val);

  void __set_gas_eta(const double val);

  void __set_q0(const double val);

  void __set_eval_method(const int32_t val);

  void __set_q0_alpha(const double val);

  void __set_qt_alpha(const double val);

  void __set_t_alpha(const double val);

  void __set_q_lambda(const double val);

  void __set_r_lambda(const double val);

  void __set_p0_lambda(const double val);

  void __set_p1_lambda(const double val);

  void __set_t_lambda(const double val);

  void __set_a_lambda(const double val);

  void __set_p1_k(const double val);

  void __set_p2_k(const double val);

  void __set_gas_q(const double val);

  void __set_core_height(const double val);

  void __set_core_area(const double val);

  void __set_gas_viscosity(const double val);

  void __set_decay_alpha(const double val);

  void __set_permeability_lambda(const double val);

  void __set_permeability_k(const double val);

  void __set_eval_difficult(const int32_t val);

  void __set_comment(const std::string& val);

  void __set_relative_layer_gap(const double val);

  void __set_is_protectable(const int32_t val);

  bool operator == (const Coal & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(mine_id == rhs.mine_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(minable == rhs.minable))
      return false;
    if (!(thick == rhs.thick))
      return false;
    if (!(hw == rhs.hw))
      return false;
    if (!(qa == rhs.qa))
      return false;
    if (!(qr == rhs.qr))
      return false;
    if (!(fore_qr == rhs.fore_qr))
      return false;
    if (!(fore_qa == rhs.fore_qa))
      return false;
    if (!(rank == rhs.rank))
      return false;
    if (!(quality == rhs.quality))
      return false;
    if (!(pressure == rhs.pressure))
      return false;
    if (!(gas_content == rhs.gas_content))
      return false;
    if (!(f_value == rhs.f_value))
      return false;
    if (!(res_abundance == rhs.res_abundance))
      return false;
    if (!(complexity == rhs.complexity))
      return false;
    if (!(mine_index == rhs.mine_index))
      return false;
    if (!(var_coeff == rhs.var_coeff))
      return false;
    if (!(stability == rhs.stability))
      return false;
    if (!(dip_angle == rhs.dip_angle))
      return false;
    if (!(czh == rhs.czh))
      return false;
    if (!(czk == rhs.czk))
      return false;
    if (!(czw == rhs.czw))
      return false;
    if (!(hw_sum == rhs.hw_sum))
      return false;
    if (!(rock == rhs.rock))
      return false;
    if (!(hhh == rhs.hhh))
      return false;
    if (!(layer_gap == rhs.layer_gap))
      return false;
    if (!(influence_factor == rhs.influence_factor))
      return false;
    if (!(res_a1 == rhs.res_a1))
      return false;
    if (!(gas_x1 == rhs.gas_x1))
      return false;
    if (!(res_a2 == rhs.res_a2))
      return false;
    if (!(gas_x2 == rhs.gas_x2))
      return false;
    if (!(pump_wc == rhs.pump_wc))
      return false;
    if (!(pump_k == rhs.pump_k))
      return false;
    if (!(pump_k2 == rhs.pump_k2))
      return false;
    if (!(pump_k3 == rhs.pump_k3))
      return false;
    if (!(pump_k4 == rhs.pump_k4))
      return false;
    if (!(pump_k1 == rhs.pump_k1))
      return false;
    if (!(pore_datas == rhs.pore_datas))
      return false;
    if (!(rho == rhs.rho))
      return false;
    if (!(vr == rhs.vr))
      return false;
    if (!(gas_w0 == rhs.gas_w0))
      return false;
    if (!(gas_wc2 == rhs.gas_wc2))
      return false;
    if (!(gas_wc3 == rhs.gas_wc3))
      return false;
    if (!(gas_eta == rhs.gas_eta))
      return false;
    if (!(q0 == rhs.q0))
      return false;
    if (!(eval_method == rhs.eval_method))
      return false;
    if (!(q0_alpha == rhs.q0_alpha))
      return false;
    if (!(qt_alpha == rhs.qt_alpha))
      return false;
    if (!(t_alpha == rhs.t_alpha))
      return false;
    if (!(q_lambda == rhs.q_lambda))
      return false;
    if (!(r_lambda == rhs.r_lambda))
      return false;
    if (!(p0_lambda == rhs.p0_lambda))
      return false;
    if (!(p1_lambda == rhs.p1_lambda))
      return false;
    if (!(t_lambda == rhs.t_lambda))
      return false;
    if (!(a_lambda == rhs.a_lambda))
      return false;
    if (!(p1_k == rhs.p1_k))
      return false;
    if (!(p2_k == rhs.p2_k))
      return false;
    if (!(gas_q == rhs.gas_q))
      return false;
    if (!(core_height == rhs.core_height))
      return false;
    if (!(core_area == rhs.core_area))
      return false;
    if (!(gas_viscosity == rhs.gas_viscosity))
      return false;
    if (!(decay_alpha == rhs.decay_alpha))
      return false;
    if (!(permeability_lambda == rhs.permeability_lambda))
      return false;
    if (!(permeability_k == rhs.permeability_k))
      return false;
    if (!(eval_difficult == rhs.eval_difficult))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(relative_layer_gap == rhs.relative_layer_gap))
      return false;
    if (!(is_protectable == rhs.is_protectable))
      return false;
    return true;
  }
  bool operator != (const Coal &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Coal & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Coal &a, Coal &b);

inline std::ostream& operator<<(std::ostream& out, const Coal& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Complexity__isset {
  _Complexity__isset() : id(false), name(false), details(false), comment(false) {}
  bool id :1;
  bool name :1;
  bool details :1;
  bool comment :1;
} _Complexity__isset;

class Complexity {
 public:

  Complexity(const Complexity&);
  Complexity& operator=(const Complexity&);
  Complexity() : id(0), name(), details(), comment() {
  }

  virtual ~Complexity() throw();
  int32_t id;
  std::string name;
  std::string details;
  std::string comment;

  _Complexity__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_details(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const Complexity & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(details == rhs.details))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Complexity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Complexity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Complexity &a, Complexity &b);

inline std::ostream& operator<<(std::ostream& out, const Complexity& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignDrillingSurfTechnology__isset {
  _DesignDrillingSurfTechnology__isset() : id(false), design_technology_id(false), name(false), comment(false), v_offset(false), h_offset(false), dp(false), gp(false), leading_dist(false), gbp(false), l_stripe(false), ls(false), ws(false), hs(false), gs(false), wd(false), hd(false), l1(false), l2(false), w(false), h(false), top_side(false), bottom_side(false), left_side(false), right_side(false), lm(false), close_length(false) {}
  bool id :1;
  bool design_technology_id :1;
  bool name :1;
  bool comment :1;
  bool v_offset :1;
  bool h_offset :1;
  bool dp :1;
  bool gp :1;
  bool leading_dist :1;
  bool gbp :1;
  bool l_stripe :1;
  bool ls :1;
  bool ws :1;
  bool hs :1;
  bool gs :1;
  bool wd :1;
  bool hd :1;
  bool l1 :1;
  bool l2 :1;
  bool w :1;
  bool h :1;
  bool top_side :1;
  bool bottom_side :1;
  bool left_side :1;
  bool right_side :1;
  bool lm :1;
  bool close_length :1;
} _DesignDrillingSurfTechnology__isset;

class DesignDrillingSurfTechnology {
 public:

  DesignDrillingSurfTechnology(const DesignDrillingSurfTechnology&);
  DesignDrillingSurfTechnology& operator=(const DesignDrillingSurfTechnology&);
  DesignDrillingSurfTechnology() : id(0), design_technology_id(0), name(), comment(), v_offset(0), h_offset(0), dp(0), gp(0), leading_dist(0), gbp(0), l_stripe(0), ls(0), ws(0), hs(0), gs(0), wd(0), hd(0), l1(0), l2(0), w(0), h(0), top_side(0), bottom_side(0), left_side(0), right_side(0), lm(0), close_length(0) {
  }

  virtual ~DesignDrillingSurfTechnology() throw();
  int32_t id;
  int32_t design_technology_id;
  std::string name;
  std::string comment;
  double v_offset;
  double h_offset;
  double dp;
  double gp;
  double leading_dist;
  double gbp;
  double l_stripe;
  double ls;
  double ws;
  double hs;
  double gs;
  double wd;
  double hd;
  double l1;
  double l2;
  double w;
  double h;
  double top_side;
  double bottom_side;
  double left_side;
  double right_side;
  double lm;
  double close_length;

  _DesignDrillingSurfTechnology__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_technology_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_v_offset(const double val);

  void __set_h_offset(const double val);

  void __set_dp(const double val);

  void __set_gp(const double val);

  void __set_leading_dist(const double val);

  void __set_gbp(const double val);

  void __set_l_stripe(const double val);

  void __set_ls(const double val);

  void __set_ws(const double val);

  void __set_hs(const double val);

  void __set_gs(const double val);

  void __set_wd(const double val);

  void __set_hd(const double val);

  void __set_l1(const double val);

  void __set_l2(const double val);

  void __set_w(const double val);

  void __set_h(const double val);

  void __set_top_side(const double val);

  void __set_bottom_side(const double val);

  void __set_left_side(const double val);

  void __set_right_side(const double val);

  void __set_lm(const double val);

  void __set_close_length(const double val);

  bool operator == (const DesignDrillingSurfTechnology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_technology_id == rhs.design_technology_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(v_offset == rhs.v_offset))
      return false;
    if (!(h_offset == rhs.h_offset))
      return false;
    if (!(dp == rhs.dp))
      return false;
    if (!(gp == rhs.gp))
      return false;
    if (!(leading_dist == rhs.leading_dist))
      return false;
    if (!(gbp == rhs.gbp))
      return false;
    if (!(l_stripe == rhs.l_stripe))
      return false;
    if (!(ls == rhs.ls))
      return false;
    if (!(ws == rhs.ws))
      return false;
    if (!(hs == rhs.hs))
      return false;
    if (!(gs == rhs.gs))
      return false;
    if (!(wd == rhs.wd))
      return false;
    if (!(hd == rhs.hd))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(top_side == rhs.top_side))
      return false;
    if (!(bottom_side == rhs.bottom_side))
      return false;
    if (!(left_side == rhs.left_side))
      return false;
    if (!(right_side == rhs.right_side))
      return false;
    if (!(lm == rhs.lm))
      return false;
    if (!(close_length == rhs.close_length))
      return false;
    return true;
  }
  bool operator != (const DesignDrillingSurfTechnology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignDrillingSurfTechnology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignDrillingSurfTechnology &a, DesignDrillingSurfTechnology &b);

inline std::ostream& operator<<(std::ostream& out, const DesignDrillingSurfTechnology& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignEvalUnit__isset {
  _DesignEvalUnit__isset() : id(false), design_eval_unit_partition_id(false), name(false), comment(false), num(false), l(false), t(false), gap(false) {}
  bool id :1;
  bool design_eval_unit_partition_id :1;
  bool name :1;
  bool comment :1;
  bool num :1;
  bool l :1;
  bool t :1;
  bool gap :1;
} _DesignEvalUnit__isset;

class DesignEvalUnit {
 public:

  DesignEvalUnit(const DesignEvalUnit&);
  DesignEvalUnit& operator=(const DesignEvalUnit&);
  DesignEvalUnit() : id(0), design_eval_unit_partition_id(0), name(), comment(), num(0), l(0), t(0), gap(0) {
  }

  virtual ~DesignEvalUnit() throw();
  int32_t id;
  int32_t design_eval_unit_partition_id;
  std::string name;
  std::string comment;
  int32_t num;
  double l;
  int32_t t;
  double gap;

  _DesignEvalUnit__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_eval_unit_partition_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_num(const int32_t val);

  void __set_l(const double val);

  void __set_t(const int32_t val);

  void __set_gap(const double val);

  bool operator == (const DesignEvalUnit & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_eval_unit_partition_id == rhs.design_eval_unit_partition_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(gap == rhs.gap))
      return false;
    return true;
  }
  bool operator != (const DesignEvalUnit &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignEvalUnit & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignEvalUnit &a, DesignEvalUnit &b);

inline std::ostream& operator<<(std::ostream& out, const DesignEvalUnit& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignEvalUnitPartition__isset {
  _DesignEvalUnitPartition__isset() : id(false), work_surf_id(false), name(false), comment(false), l2(false), l1(false), w(false), h(false), l(false), r(false), t(false), v(false) {}
  bool id :1;
  bool work_surf_id :1;
  bool name :1;
  bool comment :1;
  bool l2 :1;
  bool l1 :1;
  bool w :1;
  bool h :1;
  bool l :1;
  bool r :1;
  bool t :1;
  bool v :1;
} _DesignEvalUnitPartition__isset;

class DesignEvalUnitPartition {
 public:

  DesignEvalUnitPartition(const DesignEvalUnitPartition&);
  DesignEvalUnitPartition& operator=(const DesignEvalUnitPartition&);
  DesignEvalUnitPartition() : id(0), work_surf_id(0), name(), comment(), l2(0), l1(0), w(0), h(0), l(0), r(0), t(0), v(0) {
  }

  virtual ~DesignEvalUnitPartition() throw();
  int32_t id;
  int32_t work_surf_id;
  std::string name;
  std::string comment;
  double l2;
  double l1;
  double w;
  double h;
  double l;
  double r;
  double t;
  double v;

  _DesignEvalUnitPartition__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_surf_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_l2(const double val);

  void __set_l1(const double val);

  void __set_w(const double val);

  void __set_h(const double val);

  void __set_l(const double val);

  void __set_r(const double val);

  void __set_t(const double val);

  void __set_v(const double val);

  bool operator == (const DesignEvalUnitPartition & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_surf_id == rhs.work_surf_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(r == rhs.r))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(v == rhs.v))
      return false;
    return true;
  }
  bool operator != (const DesignEvalUnitPartition &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignEvalUnitPartition & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignEvalUnitPartition &a, DesignEvalUnitPartition &b);

inline std::ostream& operator<<(std::ostream& out, const DesignEvalUnitPartition& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignGoafPore__isset {
  _DesignGoafPore__isset() : id(false), design_goaf_technology_id(false), name(false), h_offset(false), v_offset(false), comment(false) {}
  bool id :1;
  bool design_goaf_technology_id :1;
  bool name :1;
  bool h_offset :1;
  bool v_offset :1;
  bool comment :1;
} _DesignGoafPore__isset;

class DesignGoafPore {
 public:

  DesignGoafPore(const DesignGoafPore&);
  DesignGoafPore& operator=(const DesignGoafPore&);
  DesignGoafPore() : id(0), design_goaf_technology_id(0), name(), h_offset(0), v_offset(0), comment() {
  }

  virtual ~DesignGoafPore() throw();
  int32_t id;
  int32_t design_goaf_technology_id;
  std::string name;
  double h_offset;
  double v_offset;
  std::string comment;

  _DesignGoafPore__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_goaf_technology_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_h_offset(const double val);

  void __set_v_offset(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const DesignGoafPore & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_goaf_technology_id == rhs.design_goaf_technology_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(h_offset == rhs.h_offset))
      return false;
    if (!(v_offset == rhs.v_offset))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const DesignGoafPore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignGoafPore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignGoafPore &a, DesignGoafPore &b);

inline std::ostream& operator<<(std::ostream& out, const DesignGoafPore& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignGoafTechnology__isset {
  _DesignGoafTechnology__isset() : id(false), design_technology_id(false), name(false), comment(false), pore_stubble(false), dp(false), gs(false), ls(false), ws(false), hs(false), gp(false), pore_num(false), top_dist(false), h_offset(false), y_offset(false), l1(false), l2(false), w(false), h(false), close_length(false) {}
  bool id :1;
  bool design_technology_id :1;
  bool name :1;
  bool comment :1;
  bool pore_stubble :1;
  bool dp :1;
  bool gs :1;
  bool ls :1;
  bool ws :1;
  bool hs :1;
  bool gp :1;
  bool pore_num :1;
  bool top_dist :1;
  bool h_offset :1;
  bool y_offset :1;
  bool l1 :1;
  bool l2 :1;
  bool w :1;
  bool h :1;
  bool close_length :1;
} _DesignGoafTechnology__isset;

class DesignGoafTechnology {
 public:

  DesignGoafTechnology(const DesignGoafTechnology&);
  DesignGoafTechnology& operator=(const DesignGoafTechnology&);
  DesignGoafTechnology() : id(0), design_technology_id(0), name(), comment(), pore_stubble(0), dp(0), gs(0), ls(0), ws(0), hs(0), gp(0), pore_num(0), top_dist(0), h_offset(), y_offset(), l1(0), l2(0), w(0), h(0), close_length(0) {
  }

  virtual ~DesignGoafTechnology() throw();
  int32_t id;
  int32_t design_technology_id;
  std::string name;
  std::string comment;
  double pore_stubble;
  double dp;
  double gs;
  double ls;
  double ws;
  double hs;
  double gp;
  int32_t pore_num;
  double top_dist;
  std::string h_offset;
  std::string y_offset;
  double l1;
  double l2;
  double w;
  double h;
  double close_length;

  _DesignGoafTechnology__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_technology_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_pore_stubble(const double val);

  void __set_dp(const double val);

  void __set_gs(const double val);

  void __set_ls(const double val);

  void __set_ws(const double val);

  void __set_hs(const double val);

  void __set_gp(const double val);

  void __set_pore_num(const int32_t val);

  void __set_top_dist(const double val);

  void __set_h_offset(const std::string& val);

  void __set_y_offset(const std::string& val);

  void __set_l1(const double val);

  void __set_l2(const double val);

  void __set_w(const double val);

  void __set_h(const double val);

  void __set_close_length(const double val);

  bool operator == (const DesignGoafTechnology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_technology_id == rhs.design_technology_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(pore_stubble == rhs.pore_stubble))
      return false;
    if (!(dp == rhs.dp))
      return false;
    if (!(gs == rhs.gs))
      return false;
    if (!(ls == rhs.ls))
      return false;
    if (!(ws == rhs.ws))
      return false;
    if (!(hs == rhs.hs))
      return false;
    if (!(gp == rhs.gp))
      return false;
    if (!(pore_num == rhs.pore_num))
      return false;
    if (!(top_dist == rhs.top_dist))
      return false;
    if (!(h_offset == rhs.h_offset))
      return false;
    if (!(y_offset == rhs.y_offset))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(close_length == rhs.close_length))
      return false;
    return true;
  }
  bool operator != (const DesignGoafTechnology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignGoafTechnology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignGoafTechnology &a, DesignGoafTechnology &b);

inline std::ostream& operator<<(std::ostream& out, const DesignGoafTechnology& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignPore__isset {
  _DesignPore__isset() : id(false), design_eval_unit_id(false), design_site_id(false), name(false), d(false), x1(false), y1(false), z1(false), x2(false), y2(false), z2(false), length(false), angle1(false), angle2(false), comment(false), t(false) {}
  bool id :1;
  bool design_eval_unit_id :1;
  bool design_site_id :1;
  bool name :1;
  bool d :1;
  bool x1 :1;
  bool y1 :1;
  bool z1 :1;
  bool x2 :1;
  bool y2 :1;
  bool z2 :1;
  bool length :1;
  bool angle1 :1;
  bool angle2 :1;
  bool comment :1;
  bool t :1;
} _DesignPore__isset;

class DesignPore {
 public:

  DesignPore(const DesignPore&);
  DesignPore& operator=(const DesignPore&);
  DesignPore() : id(0), design_eval_unit_id(0), design_site_id(0), name(), d(0), x1(0), y1(0), z1(0), x2(0), y2(0), z2(0), length(0), angle1(0), angle2(0), comment(), t(0) {
  }

  virtual ~DesignPore() throw();
  int32_t id;
  int32_t design_eval_unit_id;
  int32_t design_site_id;
  std::string name;
  double d;
  double x1;
  double y1;
  double z1;
  double x2;
  double y2;
  double z2;
  double length;
  double angle1;
  double angle2;
  std::string comment;
  int32_t t;

  _DesignPore__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_eval_unit_id(const int32_t val);

  void __set_design_site_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_d(const double val);

  void __set_x1(const double val);

  void __set_y1(const double val);

  void __set_z1(const double val);

  void __set_x2(const double val);

  void __set_y2(const double val);

  void __set_z2(const double val);

  void __set_length(const double val);

  void __set_angle1(const double val);

  void __set_angle2(const double val);

  void __set_comment(const std::string& val);

  void __set_t(const int32_t val);

  bool operator == (const DesignPore & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_eval_unit_id == rhs.design_eval_unit_id))
      return false;
    if (!(design_site_id == rhs.design_site_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(x1 == rhs.x1))
      return false;
    if (!(y1 == rhs.y1))
      return false;
    if (!(z1 == rhs.z1))
      return false;
    if (!(x2 == rhs.x2))
      return false;
    if (!(y2 == rhs.y2))
      return false;
    if (!(z2 == rhs.z2))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(angle1 == rhs.angle1))
      return false;
    if (!(angle2 == rhs.angle2))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(t == rhs.t))
      return false;
    return true;
  }
  bool operator != (const DesignPore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignPore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignPore &a, DesignPore &b);

inline std::ostream& operator<<(std::ostream& out, const DesignPore& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignSite__isset {
  _DesignSite__isset() : id(false), design_technology_id(false), name(false), w(false), h(false), x(false), y(false), z(false), comment(false) {}
  bool id :1;
  bool design_technology_id :1;
  bool name :1;
  bool w :1;
  bool h :1;
  bool x :1;
  bool y :1;
  bool z :1;
  bool comment :1;
} _DesignSite__isset;

class DesignSite {
 public:

  DesignSite(const DesignSite&);
  DesignSite& operator=(const DesignSite&);
  DesignSite() : id(0), design_technology_id(0), name(), w(0), h(0), x(0), y(0), z(0), comment() {
  }

  virtual ~DesignSite() throw();
  int32_t id;
  int32_t design_technology_id;
  std::string name;
  double w;
  double h;
  double x;
  double y;
  double z;
  std::string comment;

  _DesignSite__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_technology_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_w(const double val);

  void __set_h(const double val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const DesignSite & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_technology_id == rhs.design_technology_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const DesignSite &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignSite & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignSite &a, DesignSite &b);

inline std::ostream& operator<<(std::ostream& out, const DesignSite& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignTechnology__isset {
  _DesignTechnology__isset() : id(false), coal_id(false), name(false), region(false), comment(false) {}
  bool id :1;
  bool coal_id :1;
  bool name :1;
  bool region :1;
  bool comment :1;
} _DesignTechnology__isset;

class DesignTechnology {
 public:

  DesignTechnology(const DesignTechnology&);
  DesignTechnology& operator=(const DesignTechnology&);
  DesignTechnology() : id(0), coal_id(0), name(), region(0), comment() {
  }

  virtual ~DesignTechnology() throw();
  int32_t id;
  int32_t coal_id;
  std::string name;
  int32_t region;
  std::string comment;

  _DesignTechnology__isset __isset;

  void __set_id(const int32_t val);

  void __set_coal_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_region(const int32_t val);

  void __set_comment(const std::string& val);

  bool operator == (const DesignTechnology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(coal_id == rhs.coal_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(region == rhs.region))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const DesignTechnology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignTechnology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignTechnology &a, DesignTechnology &b);

inline std::ostream& operator<<(std::ostream& out, const DesignTechnology& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignTunnelControlPoint__isset {
  _DesignTunnelControlPoint__isset() : id(false), design_eval_unit_partition_id(false), name(false), comment(false), x(false), y(false), z(false) {}
  bool id :1;
  bool design_eval_unit_partition_id :1;
  bool name :1;
  bool comment :1;
  bool x :1;
  bool y :1;
  bool z :1;
} _DesignTunnelControlPoint__isset;

class DesignTunnelControlPoint {
 public:

  DesignTunnelControlPoint(const DesignTunnelControlPoint&);
  DesignTunnelControlPoint& operator=(const DesignTunnelControlPoint&);
  DesignTunnelControlPoint() : id(0), design_eval_unit_partition_id(0), name(), comment(), x(0), y(0), z(0) {
  }

  virtual ~DesignTunnelControlPoint() throw();
  int32_t id;
  int32_t design_eval_unit_partition_id;
  std::string name;
  std::string comment;
  double x;
  double y;
  double z;

  _DesignTunnelControlPoint__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_eval_unit_partition_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const DesignTunnelControlPoint & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_eval_unit_partition_id == rhs.design_eval_unit_partition_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const DesignTunnelControlPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignTunnelControlPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignTunnelControlPoint &a, DesignTunnelControlPoint &b);

inline std::ostream& operator<<(std::ostream& out, const DesignTunnelControlPoint& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignWorkSurfControlPoint__isset {
  _DesignWorkSurfControlPoint__isset() : id(false), design_eval_unit_partition_id(false), name(false), comment(false), x(false), y(false), z(false) {}
  bool id :1;
  bool design_eval_unit_partition_id :1;
  bool name :1;
  bool comment :1;
  bool x :1;
  bool y :1;
  bool z :1;
} _DesignWorkSurfControlPoint__isset;

class DesignWorkSurfControlPoint {
 public:

  DesignWorkSurfControlPoint(const DesignWorkSurfControlPoint&);
  DesignWorkSurfControlPoint& operator=(const DesignWorkSurfControlPoint&);
  DesignWorkSurfControlPoint() : id(0), design_eval_unit_partition_id(0), name(), comment(), x(0), y(0), z(0) {
  }

  virtual ~DesignWorkSurfControlPoint() throw();
  int32_t id;
  int32_t design_eval_unit_partition_id;
  std::string name;
  std::string comment;
  double x;
  double y;
  double z;

  _DesignWorkSurfControlPoint__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_eval_unit_partition_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  bool operator == (const DesignWorkSurfControlPoint & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_eval_unit_partition_id == rhs.design_eval_unit_partition_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(z == rhs.z))
      return false;
    return true;
  }
  bool operator != (const DesignWorkSurfControlPoint &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignWorkSurfControlPoint & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignWorkSurfControlPoint &a, DesignWorkSurfControlPoint &b);

inline std::ostream& operator<<(std::ostream& out, const DesignWorkSurfControlPoint& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DesignWorkSurfTechnology__isset {
  _DesignWorkSurfTechnology__isset() : id(false), design_technology_id(false), name(false), comment(false), top_side(false), bottom_side(false), right_side(false), l1(false), w(false), h(false), l2(false), left_side(false), v_offset(false), h_offset(false), p_offset(false), wd(false), hd(false), lm(false), ws(false), ls(false), gs(false), hs(false), dp(false), gp(false), single_rock_tunnel(false), d_offset(false), pore_stubble(false), pore_angle(false), pore_type(false), close_length(false) {}
  bool id :1;
  bool design_technology_id :1;
  bool name :1;
  bool comment :1;
  bool top_side :1;
  bool bottom_side :1;
  bool right_side :1;
  bool l1 :1;
  bool w :1;
  bool h :1;
  bool l2 :1;
  bool left_side :1;
  bool v_offset :1;
  bool h_offset :1;
  bool p_offset :1;
  bool wd :1;
  bool hd :1;
  bool lm :1;
  bool ws :1;
  bool ls :1;
  bool gs :1;
  bool hs :1;
  bool dp :1;
  bool gp :1;
  bool single_rock_tunnel :1;
  bool d_offset :1;
  bool pore_stubble :1;
  bool pore_angle :1;
  bool pore_type :1;
  bool close_length :1;
} _DesignWorkSurfTechnology__isset;

class DesignWorkSurfTechnology {
 public:

  DesignWorkSurfTechnology(const DesignWorkSurfTechnology&);
  DesignWorkSurfTechnology& operator=(const DesignWorkSurfTechnology&);
  DesignWorkSurfTechnology() : id(0), design_technology_id(0), name(), comment(), top_side(0), bottom_side(0), right_side(0), l1(0), w(0), h(0), l2(0), left_side(0), v_offset(0), h_offset(0), p_offset(0), wd(0), hd(0), lm(0), ws(0), ls(0), gs(0), hs(0), dp(0), gp(0), single_rock_tunnel(0), d_offset(0), pore_stubble(0), pore_angle(0), pore_type(0), close_length(0) {
  }

  virtual ~DesignWorkSurfTechnology() throw();
  int32_t id;
  int32_t design_technology_id;
  std::string name;
  std::string comment;
  double top_side;
  double bottom_side;
  double right_side;
  double l1;
  double w;
  double h;
  double l2;
  double left_side;
  double v_offset;
  double h_offset;
  double p_offset;
  double wd;
  double hd;
  double lm;
  double ws;
  double ls;
  double gs;
  double hs;
  double dp;
  double gp;
  int32_t single_rock_tunnel;
  double d_offset;
  double pore_stubble;
  double pore_angle;
  int32_t pore_type;
  double close_length;

  _DesignWorkSurfTechnology__isset __isset;

  void __set_id(const int32_t val);

  void __set_design_technology_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_top_side(const double val);

  void __set_bottom_side(const double val);

  void __set_right_side(const double val);

  void __set_l1(const double val);

  void __set_w(const double val);

  void __set_h(const double val);

  void __set_l2(const double val);

  void __set_left_side(const double val);

  void __set_v_offset(const double val);

  void __set_h_offset(const double val);

  void __set_p_offset(const double val);

  void __set_wd(const double val);

  void __set_hd(const double val);

  void __set_lm(const double val);

  void __set_ws(const double val);

  void __set_ls(const double val);

  void __set_gs(const double val);

  void __set_hs(const double val);

  void __set_dp(const double val);

  void __set_gp(const double val);

  void __set_single_rock_tunnel(const int32_t val);

  void __set_d_offset(const double val);

  void __set_pore_stubble(const double val);

  void __set_pore_angle(const double val);

  void __set_pore_type(const int32_t val);

  void __set_close_length(const double val);

  bool operator == (const DesignWorkSurfTechnology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(design_technology_id == rhs.design_technology_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(top_side == rhs.top_side))
      return false;
    if (!(bottom_side == rhs.bottom_side))
      return false;
    if (!(right_side == rhs.right_side))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(w == rhs.w))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(left_side == rhs.left_side))
      return false;
    if (!(v_offset == rhs.v_offset))
      return false;
    if (!(h_offset == rhs.h_offset))
      return false;
    if (!(p_offset == rhs.p_offset))
      return false;
    if (!(wd == rhs.wd))
      return false;
    if (!(hd == rhs.hd))
      return false;
    if (!(lm == rhs.lm))
      return false;
    if (!(ws == rhs.ws))
      return false;
    if (!(ls == rhs.ls))
      return false;
    if (!(gs == rhs.gs))
      return false;
    if (!(hs == rhs.hs))
      return false;
    if (!(dp == rhs.dp))
      return false;
    if (!(gp == rhs.gp))
      return false;
    if (!(single_rock_tunnel == rhs.single_rock_tunnel))
      return false;
    if (!(d_offset == rhs.d_offset))
      return false;
    if (!(pore_stubble == rhs.pore_stubble))
      return false;
    if (!(pore_angle == rhs.pore_angle))
      return false;
    if (!(pore_type == rhs.pore_type))
      return false;
    if (!(close_length == rhs.close_length))
      return false;
    return true;
  }
  bool operator != (const DesignWorkSurfTechnology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DesignWorkSurfTechnology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DesignWorkSurfTechnology &a, DesignWorkSurfTechnology &b);

inline std::ostream& operator<<(std::ostream& out, const DesignWorkSurfTechnology& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrillingRadiusParam__isset {
  _DrillingRadiusParam__isset() : id(false), coal_id(false), name(false), r(false), l(false), k1(false), rho(false), q0(false), a(false), t(false), qm(false), qsum(false), eta(false), r0(false), p0(false), r1(false), p1(false) {}
  bool id :1;
  bool coal_id :1;
  bool name :1;
  bool r :1;
  bool l :1;
  bool k1 :1;
  bool rho :1;
  bool q0 :1;
  bool a :1;
  bool t :1;
  bool qm :1;
  bool qsum :1;
  bool eta :1;
  bool r0 :1;
  bool p0 :1;
  bool r1 :1;
  bool p1 :1;
} _DrillingRadiusParam__isset;

class DrillingRadiusParam {
 public:

  DrillingRadiusParam(const DrillingRadiusParam&);
  DrillingRadiusParam& operator=(const DrillingRadiusParam&);
  DrillingRadiusParam() : id(0), coal_id(0), name(), r(0), l(0), k1(0), rho(0), q0(0), a(0), t(0), qm(0), qsum(0), eta(0), r0(0), p0(0), r1(0), p1(0) {
  }

  virtual ~DrillingRadiusParam() throw();
  int32_t id;
  int32_t coal_id;
  std::string name;
  double r;
  double l;
  double k1;
  double rho;
  double q0;
  double a;
  double t;
  double qm;
  double qsum;
  double eta;
  double r0;
  double p0;
  double r1;
  double p1;

  _DrillingRadiusParam__isset __isset;

  void __set_id(const int32_t val);

  void __set_coal_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_r(const double val);

  void __set_l(const double val);

  void __set_k1(const double val);

  void __set_rho(const double val);

  void __set_q0(const double val);

  void __set_a(const double val);

  void __set_t(const double val);

  void __set_qm(const double val);

  void __set_qsum(const double val);

  void __set_eta(const double val);

  void __set_r0(const double val);

  void __set_p0(const double val);

  void __set_r1(const double val);

  void __set_p1(const double val);

  bool operator == (const DrillingRadiusParam & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(coal_id == rhs.coal_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(r == rhs.r))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(k1 == rhs.k1))
      return false;
    if (!(rho == rhs.rho))
      return false;
    if (!(q0 == rhs.q0))
      return false;
    if (!(a == rhs.a))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(qm == rhs.qm))
      return false;
    if (!(qsum == rhs.qsum))
      return false;
    if (!(eta == rhs.eta))
      return false;
    if (!(r0 == rhs.r0))
      return false;
    if (!(p0 == rhs.p0))
      return false;
    if (!(r1 == rhs.r1))
      return false;
    if (!(p1 == rhs.p1))
      return false;
    return true;
  }
  bool operator != (const DrillingRadiusParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrillingRadiusParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrillingRadiusParam &a, DrillingRadiusParam &b);

inline std::ostream& operator<<(std::ostream& out, const DrillingRadiusParam& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrillingSurf__isset {
  _DrillingSurf__isset() : id(false), work_area_id(false), tunnel_id(false), name(false), qr(false), qa(false), fore_qr(false), fore_qa(false), q4(false), comment(false) {}
  bool id :1;
  bool work_area_id :1;
  bool tunnel_id :1;
  bool name :1;
  bool qr :1;
  bool qa :1;
  bool fore_qr :1;
  bool fore_qa :1;
  bool q4 :1;
  bool comment :1;
} _DrillingSurf__isset;

class DrillingSurf {
 public:

  DrillingSurf(const DrillingSurf&);
  DrillingSurf& operator=(const DrillingSurf&);
  DrillingSurf() : id(0), work_area_id(0), tunnel_id(0), name(), qr(0), qa(0), fore_qr(0), fore_qa(0), q4(0), comment() {
  }

  virtual ~DrillingSurf() throw();
  int32_t id;
  int32_t work_area_id;
  int32_t tunnel_id;
  std::string name;
  double qr;
  double qa;
  double fore_qr;
  double fore_qa;
  double q4;
  std::string comment;

  _DrillingSurf__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_area_id(const int32_t val);

  void __set_tunnel_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_qr(const double val);

  void __set_qa(const double val);

  void __set_fore_qr(const double val);

  void __set_fore_qa(const double val);

  void __set_q4(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const DrillingSurf & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_area_id == rhs.work_area_id))
      return false;
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(qr == rhs.qr))
      return false;
    if (!(qa == rhs.qa))
      return false;
    if (!(fore_qr == rhs.fore_qr))
      return false;
    if (!(fore_qa == rhs.fore_qa))
      return false;
    if (!(q4 == rhs.q4))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const DrillingSurf &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrillingSurf & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrillingSurf &a, DrillingSurf &b);

inline std::ostream& operator<<(std::ostream& out, const DrillingSurf& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HighDrillingPore__isset {
  _HighDrillingPore__isset() : id(false), high_drilling_pore_param_id(false), num(false), length(false), angle(false), pore_type(false), comment(false) {}
  bool id :1;
  bool high_drilling_pore_param_id :1;
  bool num :1;
  bool length :1;
  bool angle :1;
  bool pore_type :1;
  bool comment :1;
} _HighDrillingPore__isset;

class HighDrillingPore {
 public:

  HighDrillingPore(const HighDrillingPore&);
  HighDrillingPore& operator=(const HighDrillingPore&);
  HighDrillingPore() : id(0), high_drilling_pore_param_id(0), num(0), length(0), angle(0), pore_type(0), comment() {
  }

  virtual ~HighDrillingPore() throw();
  int32_t id;
  int32_t high_drilling_pore_param_id;
  int32_t num;
  double length;
  double angle;
  int32_t pore_type;
  std::string comment;

  _HighDrillingPore__isset __isset;

  void __set_id(const int32_t val);

  void __set_high_drilling_pore_param_id(const int32_t val);

  void __set_num(const int32_t val);

  void __set_length(const double val);

  void __set_angle(const double val);

  void __set_pore_type(const int32_t val);

  void __set_comment(const std::string& val);

  bool operator == (const HighDrillingPore & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(high_drilling_pore_param_id == rhs.high_drilling_pore_param_id))
      return false;
    if (!(num == rhs.num))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(angle == rhs.angle))
      return false;
    if (!(pore_type == rhs.pore_type))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const HighDrillingPore &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HighDrillingPore & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HighDrillingPore &a, HighDrillingPore &b);

inline std::ostream& operator<<(std::ostream& out, const HighDrillingPore& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HighDrillingPoreParam__isset {
  _HighDrillingPoreParam__isset() : id(false), work_surf_id(false), name(false), lk(false), lc(false), lw(false), n1(false), n2(false), beta(false), ld(false), comment(false) {}
  bool id :1;
  bool work_surf_id :1;
  bool name :1;
  bool lk :1;
  bool lc :1;
  bool lw :1;
  bool n1 :1;
  bool n2 :1;
  bool beta :1;
  bool ld :1;
  bool comment :1;
} _HighDrillingPoreParam__isset;

class HighDrillingPoreParam {
 public:

  HighDrillingPoreParam(const HighDrillingPoreParam&);
  HighDrillingPoreParam& operator=(const HighDrillingPoreParam&);
  HighDrillingPoreParam() : id(0), work_surf_id(0), name(), lk(0), lc(0), lw(0), n1(0), n2(0), beta(0), ld(0), comment() {
  }

  virtual ~HighDrillingPoreParam() throw();
  int32_t id;
  int32_t work_surf_id;
  std::string name;
  double lk;
  double lc;
  double lw;
  int32_t n1;
  int32_t n2;
  double beta;
  double ld;
  std::string comment;

  _HighDrillingPoreParam__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_surf_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_lk(const double val);

  void __set_lc(const double val);

  void __set_lw(const double val);

  void __set_n1(const int32_t val);

  void __set_n2(const int32_t val);

  void __set_beta(const double val);

  void __set_ld(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const HighDrillingPoreParam & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_surf_id == rhs.work_surf_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(lk == rhs.lk))
      return false;
    if (!(lc == rhs.lc))
      return false;
    if (!(lw == rhs.lw))
      return false;
    if (!(n1 == rhs.n1))
      return false;
    if (!(n2 == rhs.n2))
      return false;
    if (!(beta == rhs.beta))
      return false;
    if (!(ld == rhs.ld))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const HighDrillingPoreParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HighDrillingPoreParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HighDrillingPoreParam &a, HighDrillingPoreParam &b);

inline std::ostream& operator<<(std::ostream& out, const HighDrillingPoreParam& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HighDrillingSiteParam__isset {
  _HighDrillingSiteParam__isset() : id(false), work_surf_id(false), name(false), l1(false), l2(false), lg(false), hn(false), theta(false), q(false), rtn(false), hs(false), comment(false) {}
  bool id :1;
  bool work_surf_id :1;
  bool name :1;
  bool l1 :1;
  bool l2 :1;
  bool lg :1;
  bool hn :1;
  bool theta :1;
  bool q :1;
  bool rtn :1;
  bool hs :1;
  bool comment :1;
} _HighDrillingSiteParam__isset;

class HighDrillingSiteParam {
 public:

  HighDrillingSiteParam(const HighDrillingSiteParam&);
  HighDrillingSiteParam& operator=(const HighDrillingSiteParam&);
  HighDrillingSiteParam() : id(0), work_surf_id(0), name(), l1(0), l2(0), lg(0), hn(0), theta(0), q(0), rtn(0), hs(0), comment() {
  }

  virtual ~HighDrillingSiteParam() throw();
  int32_t id;
  int32_t work_surf_id;
  std::string name;
  double l1;
  double l2;
  double lg;
  double hn;
  double theta;
  double q;
  double rtn;
  double hs;
  std::string comment;

  _HighDrillingSiteParam__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_surf_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_l1(const double val);

  void __set_l2(const double val);

  void __set_lg(const double val);

  void __set_hn(const double val);

  void __set_theta(const double val);

  void __set_q(const double val);

  void __set_rtn(const double val);

  void __set_hs(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const HighDrillingSiteParam & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_surf_id == rhs.work_surf_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(lg == rhs.lg))
      return false;
    if (!(hn == rhs.hn))
      return false;
    if (!(theta == rhs.theta))
      return false;
    if (!(q == rhs.q))
      return false;
    if (!(rtn == rhs.rtn))
      return false;
    if (!(hs == rhs.hs))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const HighDrillingSiteParam &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HighDrillingSiteParam & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HighDrillingSiteParam &a, HighDrillingSiteParam &b);

inline std::ostream& operator<<(std::ostream& out, const HighDrillingSiteParam& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HighDrillingTunnel__isset {
  _HighDrillingTunnel__isset() : id(false), work_surf_id(false), name(false), k(false), rock(false), hz_min(false), hz_max(false), comment(false) {}
  bool id :1;
  bool work_surf_id :1;
  bool name :1;
  bool k :1;
  bool rock :1;
  bool hz_min :1;
  bool hz_max :1;
  bool comment :1;
} _HighDrillingTunnel__isset;

class HighDrillingTunnel {
 public:

  HighDrillingTunnel(const HighDrillingTunnel&);
  HighDrillingTunnel& operator=(const HighDrillingTunnel&);
  HighDrillingTunnel() : id(0), work_surf_id(0), name(), k(0), rock(0), hz_min(0), hz_max(0), comment() {
  }

  virtual ~HighDrillingTunnel() throw();
  int32_t id;
  int32_t work_surf_id;
  std::string name;
  double k;
  int32_t rock;
  double hz_min;
  double hz_max;
  std::string comment;

  _HighDrillingTunnel__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_surf_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_k(const double val);

  void __set_rock(const int32_t val);

  void __set_hz_min(const double val);

  void __set_hz_max(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const HighDrillingTunnel & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_surf_id == rhs.work_surf_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(rock == rhs.rock))
      return false;
    if (!(hz_min == rhs.hz_min))
      return false;
    if (!(hz_max == rhs.hz_max))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const HighDrillingTunnel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HighDrillingTunnel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HighDrillingTunnel &a, HighDrillingTunnel &b);

inline std::ostream& operator<<(std::ostream& out, const HighDrillingTunnel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _HydrGeo__isset {
  _HydrGeo__isset() : id(false), name(false), x1(false), x2(false), x3(false), x4(false), x5(false), x6(false), x7(false), x8(false) {}
  bool id :1;
  bool name :1;
  bool x1 :1;
  bool x2 :1;
  bool x3 :1;
  bool x4 :1;
  bool x5 :1;
  bool x6 :1;
  bool x7 :1;
  bool x8 :1;
} _HydrGeo__isset;

class HydrGeo {
 public:

  HydrGeo(const HydrGeo&);
  HydrGeo& operator=(const HydrGeo&);
  HydrGeo() : id(0), name(), x1(0), x2(0), x3(0), x4(0), x5(0), x6(0), x7(0), x8() {
  }

  virtual ~HydrGeo() throw();
  int32_t id;
  std::string name;
  int32_t x1;
  int32_t x2;
  int32_t x3;
  double x4;
  double x5;
  double x6;
  double x7;
  std::string x8;

  _HydrGeo__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_x1(const int32_t val);

  void __set_x2(const int32_t val);

  void __set_x3(const int32_t val);

  void __set_x4(const double val);

  void __set_x5(const double val);

  void __set_x6(const double val);

  void __set_x7(const double val);

  void __set_x8(const std::string& val);

  bool operator == (const HydrGeo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(x1 == rhs.x1))
      return false;
    if (!(x2 == rhs.x2))
      return false;
    if (!(x3 == rhs.x3))
      return false;
    if (!(x4 == rhs.x4))
      return false;
    if (!(x5 == rhs.x5))
      return false;
    if (!(x6 == rhs.x6))
      return false;
    if (!(x7 == rhs.x7))
      return false;
    if (!(x8 == rhs.x8))
      return false;
    return true;
  }
  bool operator != (const HydrGeo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HydrGeo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(HydrGeo &a, HydrGeo &b);

inline std::ostream& operator<<(std::ostream& out, const HydrGeo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Mine__isset {
  _Mine__isset() : id(false), tech_mode_id(false), mine_region_id(false), account_id(false), name(false), province(false), city(false), capacity(false), topo_geo(false), hydr_geo(false), ground_condition(false), qr(false), qa(false), fore_qr(false), fore_qa(false), gas_k1(false), gas_k2(false), stereo_schem_diagram(false), rock_gas_k2(false), reserve_w1(false), reserve_w2(false), reserve_w3(false), gas_w0(false), gas_wc2(false), pump_k2(false), pump_k3(false), pump_k4(false), pump_k1(false), pump_k(false), pump_wc(false), reserve_gas(false), comment(false), protect_layer_condition(false) {}
  bool id :1;
  bool tech_mode_id :1;
  bool mine_region_id :1;
  bool account_id :1;
  bool name :1;
  bool province :1;
  bool city :1;
  bool capacity :1;
  bool topo_geo :1;
  bool hydr_geo :1;
  bool ground_condition :1;
  bool qr :1;
  bool qa :1;
  bool fore_qr :1;
  bool fore_qa :1;
  bool gas_k1 :1;
  bool gas_k2 :1;
  bool stereo_schem_diagram :1;
  bool rock_gas_k2 :1;
  bool reserve_w1 :1;
  bool reserve_w2 :1;
  bool reserve_w3 :1;
  bool gas_w0 :1;
  bool gas_wc2 :1;
  bool pump_k2 :1;
  bool pump_k3 :1;
  bool pump_k4 :1;
  bool pump_k1 :1;
  bool pump_k :1;
  bool pump_wc :1;
  bool reserve_gas :1;
  bool comment :1;
  bool protect_layer_condition :1;
} _Mine__isset;

class Mine {
 public:

  Mine(const Mine&);
  Mine& operator=(const Mine&);
  Mine() : id(0), tech_mode_id(0), mine_region_id(0), account_id(0), name(), province(), city(), capacity(0), topo_geo(0), hydr_geo(0), ground_condition(0), qr(0), qa(0), fore_qr(0), fore_qa(0), gas_k1(0), gas_k2(0), stereo_schem_diagram(), rock_gas_k2(0), reserve_w1(0), reserve_w2(0), reserve_w3(0), gas_w0(0), gas_wc2(0), pump_k2(0), pump_k3(0), pump_k4(0), pump_k1(0), pump_k(0), pump_wc(0), reserve_gas(0), comment(), protect_layer_condition(0) {
  }

  virtual ~Mine() throw();
  int32_t id;
  int32_t tech_mode_id;
  int32_t mine_region_id;
  int32_t account_id;
  std::string name;
  std::string province;
  std::string city;
  double capacity;
  int32_t topo_geo;
  int32_t hydr_geo;
  int32_t ground_condition;
  double qr;
  double qa;
  double fore_qr;
  double fore_qa;
  double gas_k1;
  double gas_k2;
  std::string stereo_schem_diagram;
  double rock_gas_k2;
  double reserve_w1;
  double reserve_w2;
  double reserve_w3;
  double gas_w0;
  double gas_wc2;
  double pump_k2;
  double pump_k3;
  double pump_k4;
  double pump_k1;
  double pump_k;
  double pump_wc;
  double reserve_gas;
  std::string comment;
  int32_t protect_layer_condition;

  _Mine__isset __isset;

  void __set_id(const int32_t val);

  void __set_tech_mode_id(const int32_t val);

  void __set_mine_region_id(const int32_t val);

  void __set_account_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_province(const std::string& val);

  void __set_city(const std::string& val);

  void __set_capacity(const double val);

  void __set_topo_geo(const int32_t val);

  void __set_hydr_geo(const int32_t val);

  void __set_ground_condition(const int32_t val);

  void __set_qr(const double val);

  void __set_qa(const double val);

  void __set_fore_qr(const double val);

  void __set_fore_qa(const double val);

  void __set_gas_k1(const double val);

  void __set_gas_k2(const double val);

  void __set_stereo_schem_diagram(const std::string& val);

  void __set_rock_gas_k2(const double val);

  void __set_reserve_w1(const double val);

  void __set_reserve_w2(const double val);

  void __set_reserve_w3(const double val);

  void __set_gas_w0(const double val);

  void __set_gas_wc2(const double val);

  void __set_pump_k2(const double val);

  void __set_pump_k3(const double val);

  void __set_pump_k4(const double val);

  void __set_pump_k1(const double val);

  void __set_pump_k(const double val);

  void __set_pump_wc(const double val);

  void __set_reserve_gas(const double val);

  void __set_comment(const std::string& val);

  void __set_protect_layer_condition(const int32_t val);

  bool operator == (const Mine & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(tech_mode_id == rhs.tech_mode_id))
      return false;
    if (!(mine_region_id == rhs.mine_region_id))
      return false;
    if (!(account_id == rhs.account_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(province == rhs.province))
      return false;
    if (!(city == rhs.city))
      return false;
    if (!(capacity == rhs.capacity))
      return false;
    if (!(topo_geo == rhs.topo_geo))
      return false;
    if (!(hydr_geo == rhs.hydr_geo))
      return false;
    if (!(ground_condition == rhs.ground_condition))
      return false;
    if (!(qr == rhs.qr))
      return false;
    if (!(qa == rhs.qa))
      return false;
    if (!(fore_qr == rhs.fore_qr))
      return false;
    if (!(fore_qa == rhs.fore_qa))
      return false;
    if (!(gas_k1 == rhs.gas_k1))
      return false;
    if (!(gas_k2 == rhs.gas_k2))
      return false;
    if (!(stereo_schem_diagram == rhs.stereo_schem_diagram))
      return false;
    if (!(rock_gas_k2 == rhs.rock_gas_k2))
      return false;
    if (!(reserve_w1 == rhs.reserve_w1))
      return false;
    if (!(reserve_w2 == rhs.reserve_w2))
      return false;
    if (!(reserve_w3 == rhs.reserve_w3))
      return false;
    if (!(gas_w0 == rhs.gas_w0))
      return false;
    if (!(gas_wc2 == rhs.gas_wc2))
      return false;
    if (!(pump_k2 == rhs.pump_k2))
      return false;
    if (!(pump_k3 == rhs.pump_k3))
      return false;
    if (!(pump_k4 == rhs.pump_k4))
      return false;
    if (!(pump_k1 == rhs.pump_k1))
      return false;
    if (!(pump_k == rhs.pump_k))
      return false;
    if (!(pump_wc == rhs.pump_wc))
      return false;
    if (!(reserve_gas == rhs.reserve_gas))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(protect_layer_condition == rhs.protect_layer_condition))
      return false;
    return true;
  }
  bool operator != (const Mine &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Mine & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Mine &a, Mine &b);

inline std::ostream& operator<<(std::ostream& out, const Mine& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MineBase__isset {
  _MineBase__isset() : id(false), name(false), comment(false) {}
  bool id :1;
  bool name :1;
  bool comment :1;
} _MineBase__isset;

class MineBase {
 public:

  MineBase(const MineBase&);
  MineBase& operator=(const MineBase&);
  MineBase() : id(0), name(), comment() {
  }

  virtual ~MineBase() throw();
  int32_t id;
  std::string name;
  std::string comment;

  _MineBase__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const MineBase & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const MineBase &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MineBase & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MineBase &a, MineBase &b);

inline std::ostream& operator<<(std::ostream& out, const MineBase& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _MineRegion__isset {
  _MineRegion__isset() : id(false), mine_base_id(false), name(false), comment(false) {}
  bool id :1;
  bool mine_base_id :1;
  bool name :1;
  bool comment :1;
} _MineRegion__isset;

class MineRegion {
 public:

  MineRegion(const MineRegion&);
  MineRegion& operator=(const MineRegion&);
  MineRegion() : id(0), mine_base_id(0), name(), comment() {
  }

  virtual ~MineRegion() throw();
  int32_t id;
  int32_t mine_base_id;
  std::string name;
  std::string comment;

  _MineRegion__isset __isset;

  void __set_id(const int32_t val);

  void __set_mine_base_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const MineRegion & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(mine_base_id == rhs.mine_base_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const MineRegion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MineRegion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(MineRegion &a, MineRegion &b);

inline std::ostream& operator<<(std::ostream& out, const MineRegion& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PoreFlow__isset {
  _PoreFlow__isset() : id(false), name(false), t(false), a0(false), d(false), d1(false), m(false), k(false), delta_t(false), x(false), p_test(false), p_cur(false), b(false), pt(false), delta_p(false), dh(false), q_hun(false), q_chun(false) {}
  bool id :1;
  bool name :1;
  bool t :1;
  bool a0 :1;
  bool d :1;
  bool d1 :1;
  bool m :1;
  bool k :1;
  bool delta_t :1;
  bool x :1;
  bool p_test :1;
  bool p_cur :1;
  bool b :1;
  bool pt :1;
  bool delta_p :1;
  bool dh :1;
  bool q_hun :1;
  bool q_chun :1;
} _PoreFlow__isset;

class PoreFlow {
 public:

  PoreFlow(const PoreFlow&);
  PoreFlow& operator=(const PoreFlow&);
  PoreFlow() : id(0), name(), t(0), a0(0), d(0), d1(0), m(0), k(0), delta_t(0), x(0), p_test(0), p_cur(0), b(0), pt(0), delta_p(0), dh(0), q_hun(0), q_chun(0) {
  }

  virtual ~PoreFlow() throw();
  int32_t id;
  std::string name;
  double t;
  double a0;
  double d;
  double d1;
  double m;
  double k;
  double delta_t;
  double x;
  double p_test;
  double p_cur;
  double b;
  double pt;
  double delta_p;
  double dh;
  double q_hun;
  double q_chun;

  _PoreFlow__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_t(const double val);

  void __set_a0(const double val);

  void __set_d(const double val);

  void __set_d1(const double val);

  void __set_m(const double val);

  void __set_k(const double val);

  void __set_delta_t(const double val);

  void __set_x(const double val);

  void __set_p_test(const double val);

  void __set_p_cur(const double val);

  void __set_b(const double val);

  void __set_pt(const double val);

  void __set_delta_p(const double val);

  void __set_dh(const double val);

  void __set_q_hun(const double val);

  void __set_q_chun(const double val);

  bool operator == (const PoreFlow & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(t == rhs.t))
      return false;
    if (!(a0 == rhs.a0))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(d1 == rhs.d1))
      return false;
    if (!(m == rhs.m))
      return false;
    if (!(k == rhs.k))
      return false;
    if (!(delta_t == rhs.delta_t))
      return false;
    if (!(x == rhs.x))
      return false;
    if (!(p_test == rhs.p_test))
      return false;
    if (!(p_cur == rhs.p_cur))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(pt == rhs.pt))
      return false;
    if (!(delta_p == rhs.delta_p))
      return false;
    if (!(dh == rhs.dh))
      return false;
    if (!(q_hun == rhs.q_hun))
      return false;
    if (!(q_chun == rhs.q_chun))
      return false;
    return true;
  }
  bool operator != (const PoreFlow &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoreFlow & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoreFlow &a, PoreFlow &b);

inline std::ostream& operator<<(std::ostream& out, const PoreFlow& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _PoreSize__isset {
  _PoreSize__isset() : id(false), name(false), q(false), v(false), d(false), p(false), sigma(false), delta(false), comment(false) {}
  bool id :1;
  bool name :1;
  bool q :1;
  bool v :1;
  bool d :1;
  bool p :1;
  bool sigma :1;
  bool delta :1;
  bool comment :1;
} _PoreSize__isset;

class PoreSize {
 public:

  PoreSize(const PoreSize&);
  PoreSize& operator=(const PoreSize&);
  PoreSize() : id(0), name(), q(0), v(0), d(0), p(0), sigma(0), delta(0), comment() {
  }

  virtual ~PoreSize() throw();
  int32_t id;
  std::string name;
  double q;
  double v;
  double d;
  double p;
  double sigma;
  double delta;
  std::string comment;

  _PoreSize__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_q(const double val);

  void __set_v(const double val);

  void __set_d(const double val);

  void __set_p(const double val);

  void __set_sigma(const double val);

  void __set_delta(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const PoreSize & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(q == rhs.q))
      return false;
    if (!(v == rhs.v))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(p == rhs.p))
      return false;
    if (!(sigma == rhs.sigma))
      return false;
    if (!(delta == rhs.delta))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const PoreSize &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PoreSize & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(PoreSize &a, PoreSize &b);

inline std::ostream& operator<<(std::ostream& out, const PoreSize& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ResAbundance__isset {
  _ResAbundance__isset() : id(false), name(false), min_abundance(false), max_abundance(false) {}
  bool id :1;
  bool name :1;
  bool min_abundance :1;
  bool max_abundance :1;
} _ResAbundance__isset;

class ResAbundance {
 public:

  ResAbundance(const ResAbundance&);
  ResAbundance& operator=(const ResAbundance&);
  ResAbundance() : id(0), name(), min_abundance(0), max_abundance(0) {
  }

  virtual ~ResAbundance() throw();
  int32_t id;
  std::string name;
  double min_abundance;
  double max_abundance;

  _ResAbundance__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_min_abundance(const double val);

  void __set_max_abundance(const double val);

  bool operator == (const ResAbundance & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(min_abundance == rhs.min_abundance))
      return false;
    if (!(max_abundance == rhs.max_abundance))
      return false;
    return true;
  }
  bool operator != (const ResAbundance &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ResAbundance & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ResAbundance &a, ResAbundance &b);

inline std::ostream& operator<<(std::ostream& out, const ResAbundance& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Rock__isset {
  _Rock__isset() : id(false), name(false), a(false), b(false), c(false), comment(false) {}
  bool id :1;
  bool name :1;
  bool a :1;
  bool b :1;
  bool c :1;
  bool comment :1;
} _Rock__isset;

class Rock {
 public:

  Rock(const Rock&);
  Rock& operator=(const Rock&);
  Rock() : id(0), name(), a(0), b(0), c(0), comment() {
  }

  virtual ~Rock() throw();
  int32_t id;
  std::string name;
  double a;
  double b;
  double c;
  std::string comment;

  _Rock__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_a(const double val);

  void __set_b(const double val);

  void __set_c(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const Rock & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(a == rhs.a))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(c == rhs.c))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Rock &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Rock & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Rock &a, Rock &b);

inline std::ostream& operator<<(std::ostream& out, const Rock& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SysInfo__isset {
  _SysInfo__isset() : id(false), account_id(false), last_login_time(false), comment(false) {}
  bool id :1;
  bool account_id :1;
  bool last_login_time :1;
  bool comment :1;
} _SysInfo__isset;

class SysInfo {
 public:

  SysInfo(const SysInfo&);
  SysInfo& operator=(const SysInfo&);
  SysInfo() : id(0), account_id(0), last_login_time(), comment() {
  }

  virtual ~SysInfo() throw();
  int32_t id;
  int32_t account_id;
  std::string last_login_time;
  std::string comment;

  _SysInfo__isset __isset;

  void __set_id(const int32_t val);

  void __set_account_id(const int32_t val);

  void __set_last_login_time(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const SysInfo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(account_id == rhs.account_id))
      return false;
    if (!(last_login_time == rhs.last_login_time))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const SysInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SysInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SysInfo &a, SysInfo &b);

inline std::ostream& operator<<(std::ostream& out, const SysInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TechMode__isset {
  _TechMode__isset() : id(false), mine_region_id(false), name(false), mode_type(false), c1(false), c2(false), c3(false), comment(false) {}
  bool id :1;
  bool mine_region_id :1;
  bool name :1;
  bool mode_type :1;
  bool c1 :1;
  bool c2 :1;
  bool c3 :1;
  bool comment :1;
} _TechMode__isset;

class TechMode {
 public:

  TechMode(const TechMode&);
  TechMode& operator=(const TechMode&);
  TechMode() : id(0), mine_region_id(0), name(), mode_type(0), c1(0), c2(0), c3(0), comment() {
  }

  virtual ~TechMode() throw();
  int32_t id;
  int32_t mine_region_id;
  std::string name;
  int32_t mode_type;
  int32_t c1;
  int32_t c2;
  int32_t c3;
  std::string comment;

  _TechMode__isset __isset;

  void __set_id(const int32_t val);

  void __set_mine_region_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_mode_type(const int32_t val);

  void __set_c1(const int32_t val);

  void __set_c2(const int32_t val);

  void __set_c3(const int32_t val);

  void __set_comment(const std::string& val);

  bool operator == (const TechMode & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(mine_region_id == rhs.mine_region_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(mode_type == rhs.mode_type))
      return false;
    if (!(c1 == rhs.c1))
      return false;
    if (!(c2 == rhs.c2))
      return false;
    if (!(c3 == rhs.c3))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const TechMode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TechMode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TechMode &a, TechMode &b);

inline std::ostream& operator<<(std::ostream& out, const TechMode& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Technology__isset {
  _Technology__isset() : id(false), mine_region_id(false), name(false), iskey(false), doc(false), video(false), comment(false) {}
  bool id :1;
  bool mine_region_id :1;
  bool name :1;
  bool iskey :1;
  bool doc :1;
  bool video :1;
  bool comment :1;
} _Technology__isset;

class Technology {
 public:

  Technology(const Technology&);
  Technology& operator=(const Technology&);
  Technology() : id(0), mine_region_id(0), name(), iskey(0), doc(), video(), comment() {
  }

  virtual ~Technology() throw();
  int32_t id;
  int32_t mine_region_id;
  std::string name;
  int32_t iskey;
  std::string doc;
  std::string video;
  std::string comment;

  _Technology__isset __isset;

  void __set_id(const int32_t val);

  void __set_mine_region_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_iskey(const int32_t val);

  void __set_doc(const std::string& val);

  void __set_video(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const Technology & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(mine_region_id == rhs.mine_region_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(iskey == rhs.iskey))
      return false;
    if (!(doc == rhs.doc))
      return false;
    if (!(video == rhs.video))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const Technology &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Technology & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Technology &a, Technology &b);

inline std::ostream& operator<<(std::ostream& out, const Technology& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _TopoGeo__isset {
  _TopoGeo__isset() : id(false), name(false), feature(false), comment(false) {}
  bool id :1;
  bool name :1;
  bool feature :1;
  bool comment :1;
} _TopoGeo__isset;

class TopoGeo {
 public:

  TopoGeo(const TopoGeo&);
  TopoGeo& operator=(const TopoGeo&);
  TopoGeo() : id(0), name(), feature(), comment() {
  }

  virtual ~TopoGeo() throw();
  int32_t id;
  std::string name;
  std::string feature;
  std::string comment;

  _TopoGeo__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_feature(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const TopoGeo & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(feature == rhs.feature))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const TopoGeo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TopoGeo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(TopoGeo &a, TopoGeo &b);

inline std::ostream& operator<<(std::ostream& out, const TopoGeo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _Tunnel__isset {
  _Tunnel__isset() : id(false), name(false), b(false), h(false), l(false), s(false), d(false), wh(false), v(false), q3(false), q0(false), comment(false), tunnel_type(false), top_side(false), bottom_side(false), left_side(false), right_side(false), x1(false), y1(false), z1(false), x2(false), y2(false), z2(false) {}
  bool id :1;
  bool name :1;
  bool b :1;
  bool h :1;
  bool l :1;
  bool s :1;
  bool d :1;
  bool wh :1;
  bool v :1;
  bool q3 :1;
  bool q0 :1;
  bool comment :1;
  bool tunnel_type :1;
  bool top_side :1;
  bool bottom_side :1;
  bool left_side :1;
  bool right_side :1;
  bool x1 :1;
  bool y1 :1;
  bool z1 :1;
  bool x2 :1;
  bool y2 :1;
  bool z2 :1;
} _Tunnel__isset;

class Tunnel {
 public:

  Tunnel(const Tunnel&);
  Tunnel& operator=(const Tunnel&);
  Tunnel() : id(0), name(), b(0), h(0), l(0), s(0), d(0), wh(0), v(0), q3(0), q0(0), comment(), tunnel_type(0), top_side(0), bottom_side(0), left_side(0), right_side(0), x1(0), y1(0), z1(0), x2(0), y2(0), z2(0) {
  }

  virtual ~Tunnel() throw();
  int32_t id;
  std::string name;
  double b;
  double h;
  double l;
  double s;
  double d;
  double wh;
  double v;
  double q3;
  double q0;
  std::string comment;
  int32_t tunnel_type;
  double top_side;
  double bottom_side;
  double left_side;
  double right_side;
  double x1;
  double y1;
  double z1;
  double x2;
  double y2;
  double z2;

  _Tunnel__isset __isset;

  void __set_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_b(const double val);

  void __set_h(const double val);

  void __set_l(const double val);

  void __set_s(const double val);

  void __set_d(const double val);

  void __set_wh(const double val);

  void __set_v(const double val);

  void __set_q3(const double val);

  void __set_q0(const double val);

  void __set_comment(const std::string& val);

  void __set_tunnel_type(const int32_t val);

  void __set_top_side(const double val);

  void __set_bottom_side(const double val);

  void __set_left_side(const double val);

  void __set_right_side(const double val);

  void __set_x1(const double val);

  void __set_y1(const double val);

  void __set_z1(const double val);

  void __set_x2(const double val);

  void __set_y2(const double val);

  void __set_z2(const double val);

  bool operator == (const Tunnel & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(b == rhs.b))
      return false;
    if (!(h == rhs.h))
      return false;
    if (!(l == rhs.l))
      return false;
    if (!(s == rhs.s))
      return false;
    if (!(d == rhs.d))
      return false;
    if (!(wh == rhs.wh))
      return false;
    if (!(v == rhs.v))
      return false;
    if (!(q3 == rhs.q3))
      return false;
    if (!(q0 == rhs.q0))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(tunnel_type == rhs.tunnel_type))
      return false;
    if (!(top_side == rhs.top_side))
      return false;
    if (!(bottom_side == rhs.bottom_side))
      return false;
    if (!(left_side == rhs.left_side))
      return false;
    if (!(right_side == rhs.right_side))
      return false;
    if (!(x1 == rhs.x1))
      return false;
    if (!(y1 == rhs.y1))
      return false;
    if (!(z1 == rhs.z1))
      return false;
    if (!(x2 == rhs.x2))
      return false;
    if (!(y2 == rhs.y2))
      return false;
    if (!(z2 == rhs.z2))
      return false;
    return true;
  }
  bool operator != (const Tunnel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Tunnel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Tunnel &a, Tunnel &b);

inline std::ostream& operator<<(std::ostream& out, const Tunnel& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkArea__isset {
  _WorkArea__isset() : id(false), coal_id(false), name(false), mode(false), a(false), qr(false), qa(false), fore_qr(false), fore_qa(false), comment(false) {}
  bool id :1;
  bool coal_id :1;
  bool name :1;
  bool mode :1;
  bool a :1;
  bool qr :1;
  bool qa :1;
  bool fore_qr :1;
  bool fore_qa :1;
  bool comment :1;
} _WorkArea__isset;

class WorkArea {
 public:

  WorkArea(const WorkArea&);
  WorkArea& operator=(const WorkArea&);
  WorkArea() : id(0), coal_id(0), name(), mode(0), a(0), qr(0), qa(0), fore_qr(0), fore_qa(0), comment() {
  }

  virtual ~WorkArea() throw();
  int32_t id;
  int32_t coal_id;
  std::string name;
  int32_t mode;
  double a;
  double qr;
  double qa;
  double fore_qr;
  double fore_qa;
  std::string comment;

  _WorkArea__isset __isset;

  void __set_id(const int32_t val);

  void __set_coal_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_mode(const int32_t val);

  void __set_a(const double val);

  void __set_qr(const double val);

  void __set_qa(const double val);

  void __set_fore_qr(const double val);

  void __set_fore_qa(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const WorkArea & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(coal_id == rhs.coal_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(mode == rhs.mode))
      return false;
    if (!(a == rhs.a))
      return false;
    if (!(qr == rhs.qr))
      return false;
    if (!(qa == rhs.qa))
      return false;
    if (!(fore_qr == rhs.fore_qr))
      return false;
    if (!(fore_qa == rhs.fore_qa))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const WorkArea &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkArea & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkArea &a, WorkArea &b);

inline std::ostream& operator<<(std::ostream& out, const WorkArea& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _WorkSurf__isset {
  _WorkSurf__isset() : id(false), work_area_id(false), tunnel_id(false), name(false), a(false), qr(false), qa(false), fore_qr(false), fore_qa(false), l1(false), l2(false), layerable(false), k1(false), k2(false), k3(false), kf(false), method(false), last_t(false), qr1(false), qr2(false), comment(false) {}
  bool id :1;
  bool work_area_id :1;
  bool tunnel_id :1;
  bool name :1;
  bool a :1;
  bool qr :1;
  bool qa :1;
  bool fore_qr :1;
  bool fore_qa :1;
  bool l1 :1;
  bool l2 :1;
  bool layerable :1;
  bool k1 :1;
  bool k2 :1;
  bool k3 :1;
  bool kf :1;
  bool method :1;
  bool last_t :1;
  bool qr1 :1;
  bool qr2 :1;
  bool comment :1;
} _WorkSurf__isset;

class WorkSurf {
 public:

  WorkSurf(const WorkSurf&);
  WorkSurf& operator=(const WorkSurf&);
  WorkSurf() : id(0), work_area_id(0), tunnel_id(0), name(), a(0), qr(0), qa(0), fore_qr(0), fore_qa(0), l1(0), l2(0), layerable(0), k1(0), k2(0), k3(0), kf(0), method(0), last_t(0), qr1(0), qr2(0), comment() {
  }

  virtual ~WorkSurf() throw();
  int32_t id;
  int32_t work_area_id;
  int32_t tunnel_id;
  std::string name;
  double a;
  double qr;
  double qa;
  double fore_qr;
  double fore_qa;
  double l1;
  double l2;
  int32_t layerable;
  double k1;
  double k2;
  double k3;
  double kf;
  int32_t method;
  double last_t;
  double qr1;
  double qr2;
  std::string comment;

  _WorkSurf__isset __isset;

  void __set_id(const int32_t val);

  void __set_work_area_id(const int32_t val);

  void __set_tunnel_id(const int32_t val);

  void __set_name(const std::string& val);

  void __set_a(const double val);

  void __set_qr(const double val);

  void __set_qa(const double val);

  void __set_fore_qr(const double val);

  void __set_fore_qa(const double val);

  void __set_l1(const double val);

  void __set_l2(const double val);

  void __set_layerable(const int32_t val);

  void __set_k1(const double val);

  void __set_k2(const double val);

  void __set_k3(const double val);

  void __set_kf(const double val);

  void __set_method(const int32_t val);

  void __set_last_t(const double val);

  void __set_qr1(const double val);

  void __set_qr2(const double val);

  void __set_comment(const std::string& val);

  bool operator == (const WorkSurf & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(work_area_id == rhs.work_area_id))
      return false;
    if (!(tunnel_id == rhs.tunnel_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(a == rhs.a))
      return false;
    if (!(qr == rhs.qr))
      return false;
    if (!(qa == rhs.qa))
      return false;
    if (!(fore_qr == rhs.fore_qr))
      return false;
    if (!(fore_qa == rhs.fore_qa))
      return false;
    if (!(l1 == rhs.l1))
      return false;
    if (!(l2 == rhs.l2))
      return false;
    if (!(layerable == rhs.layerable))
      return false;
    if (!(k1 == rhs.k1))
      return false;
    if (!(k2 == rhs.k2))
      return false;
    if (!(k3 == rhs.k3))
      return false;
    if (!(kf == rhs.kf))
      return false;
    if (!(method == rhs.method))
      return false;
    if (!(last_t == rhs.last_t))
      return false;
    if (!(qr1 == rhs.qr1))
      return false;
    if (!(qr2 == rhs.qr2))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const WorkSurf &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WorkSurf & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WorkSurf &a, WorkSurf &b);

inline std::ostream& operator<<(std::ostream& out, const WorkSurf& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _DrillingSurfGasFlowResult__isset {
  _DrillingSurfGasFlowResult__isset() : q0(false), q3(false), q4(false), qa(false) {}
  bool q0 :1;
  bool q3 :1;
  bool q4 :1;
  bool qa :1;
} _DrillingSurfGasFlowResult__isset;

class DrillingSurfGasFlowResult {
 public:

  DrillingSurfGasFlowResult(const DrillingSurfGasFlowResult&);
  DrillingSurfGasFlowResult& operator=(const DrillingSurfGasFlowResult&);
  DrillingSurfGasFlowResult() : q0(0), q3(0), q4(0), qa(0) {
  }

  virtual ~DrillingSurfGasFlowResult() throw();
  double q0;
  double q3;
  double q4;
  double qa;

  _DrillingSurfGasFlowResult__isset __isset;

  void __set_q0(const double val);

  void __set_q3(const double val);

  void __set_q4(const double val);

  void __set_qa(const double val);

  bool operator == (const DrillingSurfGasFlowResult & rhs) const
  {
    if (!(q0 == rhs.q0))
      return false;
    if (!(q3 == rhs.q3))
      return false;
    if (!(q4 == rhs.q4))
      return false;
    if (!(qa == rhs.qa))
      return false;
    return true;
  }
  bool operator != (const DrillingSurfGasFlowResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DrillingSurfGasFlowResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(DrillingSurfGasFlowResult &a, DrillingSurfGasFlowResult &b);

inline std::ostream& operator<<(std::ostream& out, const DrillingSurfGasFlowResult& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
